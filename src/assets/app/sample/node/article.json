{
  "title": "DRAG AND DROP LAYOUT",
  "body": [{
    "type": "article",
    "title": "使用 DevTools 对 Angular 前端应用性能分析优化",
    "banner": {
      "img": {
        "src": "/sites/default/files/styles/crop/public/2022-01/55.jpg?itok=UtKYaymH"
      }
    },
    "meta": [{
        "icon": "schedule",
        "label": "08/01/2022"
      },
      {
        "icon": "folder",
        "label": "前端茶馆"
      }
    ],
    "body": "<h4 id=\"%E4%BD%BF%E7%94%A8-lighthouse-%E8%AF%84%E5%88%86\">使用 lighthouse 评分</h4>\r\n\r\n<p>以南宁IT派[www.nnitpai.com]为例记录分析优化过程，使用 Devtools lighthouse 对首页进行综合的评分：<br />\r\n<img alt=\"image 0\" data-entity-type=\"file\" data-entity-uuid=\"c397a1f3-b764-4fd2-ab09-98d61f2a4dbd\" height=\"603\" src=\"/sites/default/files/inline-images/image_0.png\" width=\"940\" /><br />\r\n性能评分勉强及格差强人意，切换到 performance 性能选项卡:<br />\r\n<img alt=\"image 1\" data-entity-type=\"file\" data-entity-uuid=\"17526354-c3f6-45ab-8d28-8100cd1d10e8\" height=\"506\" src=\"/sites/default/files/inline-images/image_1.png\" width=\"951\" /><br />\r\n记录的同时，可以依次滚动页面到底部，暂停看看分析结果：<br />\r\n<img alt=\"image 2\" data-entity-type=\"file\" data-entity-uuid=\"2349f2bb-d08a-4e5e-a6fa-8ca891b91022\" height=\"422\" src=\"/sites/default/files/inline-images/image_2.png\" width=\"949\" /><br />\r\n发现一推很深的函数调用，放大具体看看：（记得要用本地开发环境来查看，这样可以方便看未编译版本中具体的组件或者函数）<br />\r\n<img alt=\"image 3\" data-entity-type=\"file\" data-entity-uuid=\"8213b0c5-a285-43d3-85be-b2221a9a106c\" height=\"404\" src=\"/sites/default/files/inline-images/image_3.png\" width=\"954\" /></p>\r\n\r\n<p>发现大部分的深度调用都与这个 MenuComponent 组件有关，不断的在调用刷新，可以看到一个 executeTemplate 这个函数，这个是angular对模板里面的变量或者函数执行计算值，已检测是否有变化，相应进行渲染。</p>\r\n\r\n<p>看看 MenuComponent 组件模板关键部分：</p>\r\n\r\n<pre data-language=\"html\">\r\n<code data-language=\"html\">&lt;ng-container *ngIf=\"content\"&gt;\r\n  &lt;header *ngIf=\"screen.eq('gt-sm')\" class=\"header\" #header&gt;\r\n    //\r\n  &lt;/header&gt;\r\n  &lt;div class=\"drawer\"&gt;\r\n    &lt;mat-toolbar *ngIf=\"screen.eq('lt-md')\"&gt;\r\n      //\r\n    &lt;/mat-toolbar&gt;\r\n    &lt;div [hidden]=\"!(screen.eq('lt-md') &amp;&amp; isDrawer)\"&gt;\r\n      //\r\n    &lt;/div&gt;\r\n  &lt;/div&gt;\r\n&lt;/ng-container&gt;\r\n</code></pre>\r\n\r\n<p>里面有个方法调用<code data-backticks=\"1\">screen.eq()</code><br />\r\n在eq方法打个log看看日志：<br />\r\n<img alt=\"image 4\" data-entity-type=\"file\" data-entity-uuid=\"f10edafe-8099-4572-8a3c-b14fd27ebe35\" height=\"548\" src=\"/sites/default/files/inline-images/image_4.png\" width=\"951\" /><br />\r\n只要页面有事件发生，比如dom的更改，这个log一直飙升，导致严重的性能问题，问题应该就是在这里，为什么会被反复执行？</p>\r\n\r\n<h4 id=\"%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3-angular-%E7%9A%84%E9%BB%98%E8%AE%A4%E6%9B%B4%E6%96%B0%E6%A3%80%E6%B5%8B%E6%9C%BA%E5%88%B6\">简单了解 Angular 的默认更新检测机制</h4>\r\n\r\n<p>有几种情况会触发 Angular 检测：</p>\r\n\r\n<ul>\r\n\t<li>用户的输出操作，点击、提交、滚动等等</li>\r\n\t<li>http 请求</li>\r\n\t<li>定时事件，setTimeout\\setInterval</li>\r\n</ul>\r\n\r\n<p>变更检测机制是 Angular 内置的框架功能，可确保组件的数据与HTML模板视图进行自动同步，对于模板中使用的表达式，它将当前值与先前值进行比较，如果值不同则 isChanged，然后进行更新，组件的检测机制：</p>\r\n\r\n<ul>\r\n\t<li>Default: 默认的检测机制，比较事件发生前后的模板表达式值来决定是否更新视图，只要有更新，会更新整个数组树。</li>\r\n\t<li>OnPush: 检测组件的Input输入或者异步管道订阅的数据发生变化时才会更新；</li>\r\n</ul>\r\n\r\n<h4 id=\"%E5%AF%BB%E6%89%BE%E9%97%AE%E9%A2%98%E7%9A%84%E5%8E%9F%E5%9B%A0\">寻找问题的原因</h4>\r\n\r\n<p>当页面滚到在背景视频的时候，log的输出特别的密集，仔细观察这个组件有DOM数据的刷新：<br />\r\n<img alt=\"image 5\" data-entity-type=\"file\" data-entity-uuid=\"6fc98b18-340e-4c7c-ab6c-03cd5eb73108\" height=\"226\" src=\"/sites/default/files/inline-images/image_5.png\" width=\"960\" /><br />\r\n这应该是使用了定时器更新了当前的播放时间，导致 angular 不断触发监测机制。</p>\r\n\r\n<h4 id=\"%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98\">解决问题</h4>\r\n\r\n<h5 id=\"%E6%8A%8A%E7%BB%84%E4%BB%B6%E9%BB%98%E8%AE%A4%E7%9B%91%E6%B5%8B%E6%9C%BA%E5%88%B6%E6%9B%B4%E6%94%B9%E4%B8%BAonpush\">把组件默认监测机制更改为OnPush</h5>\r\n\r\n<p>从而可以忽略外部其他组件的变更周期，当输入属性发生变化时才会触发。</p>\r\n\r\n<pre data-language=\"ts\">\r\n<code data-language=\"ts\">import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n} from '@angular/core';\r\n@Component({\r\n  selector: 'app-menu',\r\n  templateUrl: './menu.component.html',\r\n  styleUrls: ['./menu.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\n</code></pre>\r\n\r\n<h5 id=\"%E6%89%8B%E5%8A%A8%E6%9B%B4%E6%96%B0%E6%A3%80%E6%9F%A5\">手动更新检查</h5>\r\n\r\n<p><code data-backticks=\"1\">screen.eq('xs')</code>&nbsp;方法是用来检测当前屏幕的媒体查询，根据屏幕尺寸做出显示逻辑，使用 OnPush方式时，模板表达式不会再随着外部的检测周期影响到，当页面宽度发生变化时，我们就需要手动的去告诉组件更新检测：</p>\r\n\r\n<p>新建一个媒体查询的服务，在组件里面订阅这个可观察对象，这个观察对象会在浏览器宽度发生变化时推送当前窗口的媒体查询值：</p>\r\n\r\n<pre data-language=\"ts\">\r\n<code data-language=\"ts\">mqAlias$(): Observable&lt;string[]&gt; {\r\n    return this.mediaObserver.asObservable().pipe(\r\n      distinctUntilChanged(\r\n        (x: MediaChange[], y: MediaChange[]) =&gt;\r\n          this.getAlias(x) === this.getAlias(y)\r\n      ),\r\n      map((change: any) =&gt; {\r\n        return change.map((item: any) =&gt; {\r\n          return item.mqAlias;\r\n        });\r\n      })\r\n    );\r\n  }\r\n</code></pre>\r\n\r\n<p>并在组件中引用</p>\r\n\r\n<pre data-language=\"ts\">\r\n<code data-language=\"ts\">@Component({\r\n  selector: 'app-menu-item',\r\n  templateUrl: './menu-item.component.html',\r\n  styleUrls: ['./menu-item.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MenuItemComponent implements OnInit {\r\n  @Input() content: any;\r\n  @Input() mobileMenu: any;\r\n  showXs: boolean;\r\n  constructor(\r\n    private screen: ScreenState,\r\n    private screenService: ScreenService,\r\n    private cd: ChangeDetectorRef\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    if (this.screenService.isPlatformBrowser()) {\r\n      this.screen.mqAlias$().subscribe((alia) =&gt; {\r\n        this.showXs = alia.includes('xs');\r\n        this.cd.detectChanges();\r\n      });\r\n    }\r\n  }\r\n}\r\n</code></pre>\r\n\r\n<p><img alt=\"image 6\" data-entity-type=\"file\" data-entity-uuid=\"dc62a2a9-8854-4a74-8806-d156f76e69ac\" height=\"519\" src=\"/sites/default/files/inline-images/image_6.png\" width=\"952\" /></p>\r\n\r\n<h4 id=\"%E6%80%BB%E7%BB%93\">总结</h4>\r\n\r\n<p>评分提升还是很明显的，对于后面组件的开发提供了很好的最佳实践，多理解熟悉 Angular 的内部运行机制，为项目开发带来更好的效益。</p>\r\n\r\n<ul>\r\n\t<li>要善于使用 lighthouse 进行检测评分，针对不同问题具体分析；</li>\r\n\t<li>多使用 Devtools 分析，查找问题的入口；</li>\r\n\t<li>不要在模板中使用函数或者getter，当有大量变更时，会存在很多的性能隐患；</li>\r\n</ul>\r\n\r\n<p>接下来，会继续针对这个案例继续分析，使项目的 lighthouse 评分更加友好，提供给各位前端开发一些借鉴和交流。</p>\r\n",
    "sidebar": [{
        "type": "media-list",
        "title": "POPULAR POSTS",
        "elements": [{
            "link": {
              "label": "使用 DevTools 对 Angular 前端应用性能分析优化",
              "href": "/node/417"
            },
            "img": {
              "src": "/sites/default/files/styles/media_3_2_medium/public/2022-01/55.jpg?itok=rNQkyyXE",
              "alt": ""
            },
            "changed": "2022/01/08"
          },
          {
            "link": {
              "label": "使用 takeUntil 操作符管理 Angular 组件的订阅",
              "href": "/node/415"
            },
            "img": {
              "src": "/sites/default/files/styles/media_3_2_medium/public/2022-01/361.jpg?itok=B-uexzdG",
              "alt": ""
            },
            "changed": "2022/01/03"
          },
          {
            "link": {
              "label": "你应该了解的 Angular 最佳实践",
              "href": "/node/414"
            },
            "img": {
              "src": "/sites/default/files/styles/media_3_2_medium/public/2022-01/400.png?itok=Ulkdzkpo",
              "alt": ""
            },
            "changed": "2022/01/03"
          },
          {
            "link": {
              "label": "Angular 5 rxjs 5.5.2 多个 http 并行 forkJoin 请求",
              "href": "/node/387"
            },
            "img": {
              "src": "/sites/default/files/styles/media_3_2_medium/public/2021-05/v2-5c27976d3638bc5c984d2f49329347f5_r.jpeg?h=a4b59061&itok=mnkQS8i4",
              "alt": ""
            },
            "changed": "2021/05/14"
          }
        ]
      },
      {
        "type": "menu-list",
        "title": "CATEGORIES",
        "elements": [{
            "link": {
              "href": "/frontend",
              "label": "前端茶馆"
            },
            "label": "10"
          },
          {
            "link": {
              "href": "/drupal",
              "label": "Drupal 自习室"
            },
            "label": "6"
          }
        ]
      }
    ]
  }, {
    "type": "carousel-1v1",
    "title": {
      "label": "Relate article",
      "style": "style-v1"
    },
    "bg": {
      "classes": "bg-shadow bg-fill-width"
    },
    "sliders": {
      "params": {
        "slidesPerView": 1.2,
        "spaceBetween": 20,
        "navigation": false,
        "breakpoints": {
          "600": {
            "slidesPerView": 3,
            "spaceBetween": 20
          },
          "960": {
            "slidesPerView": 3,
            "spaceBetween": 50
          }
        }
      },
      "classes": "p-bottom",
      "elements": [{
        "type": "card",
        "link": {
          "label": "JOHNSON",
          "href": "/"
        },
        "subTitle": "Frontend Devel",
        "classes": "card-no-shadow",
        "body": "Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. ",
        "feature": {
          "fullIcon": "fullscreen",
          "openIcon": "open_in_new",
          "link": "#",
          "ratios": "media-4-3",
          "img": {
            "classes": "object-fit",
            "src": "/assets/images/cases/porto1.jpg"
          }
        }
      }, {
        "type": "card",
        "feature": {
          "fullIcon": "fullscreen",
          "openIcon": "open_in_new",
          "link": "#",
          "ratios": "media-4-3",
          "img": {
            "classes": "object-fit",
            "src": "/assets/images/cases/porto7.jpg"
          }
        },
        "link": {
          "label": "JOHNSONss",
          "href": "/"
        },
        "subTitle": "Frontend Devel",
        "classes": "card-no-shadow",
        "body": "Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. "
      }, {
        "type": "card",
        "feature": {
          "fullIcon": "fullscreen",
          "openIcon": "open_in_new",
          "link": "#",
          "ratios": "media-4-3",
          "img": {
            "classes": "object-fit",
            "src": "/assets/images/cases/porto2.jpg"
          }
        },
        "link": {
          "label": "Will",
          "href": "/"
        },
        "subTitle": "Frontend Devel",
        "classes": "card-no-shadow",
        "body": "Lorem ipsum dolor sit amet, consetetur sadipscing elitr. "
      }, {
        "type": "card",
        "feature": {
          "fullIcon": "fullscreen",
          "openIcon": "open_in_new",
          "link": "#",
          "ratios": "media-4-3",
          "img": {
            "classes": "object-fit",
            "src": "/assets/images/cases/porto3.jpg"
          }
        },
        "link": {
          "label": "Tamy",
          "href": "/"
        },
        "subTitle": "Backend Devel",
        "classes": "card-no-shadow",
        "body": "Sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum."
      }, {
        "type": "card",
        "feature": {
          "fullIcon": "fullscreen",
          "openIcon": "open_in_new",
          "link": "#",
          "ratios": "media-4-3",
          "img": {
            "classes": "object-fit",
            "src": "/assets/images/cases/porto4.jpg"
          }
        },
        "link": {
          "label": "Kelly",
          "href": "/"
        },
        "subTitle": "Frontend Devel",
        "classes": "card-no-shadow",
        "body": "Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat."
      }, {
        "type": "card",
        "feature": {
          "fullIcon": "fullscreen",
          "openIcon": "open_in_new",
          "link": "#",
          "ratios": "media-4-3",
          "img": {
            "classes": "object-fit",
            "src": "/assets/images/cases/porto5.jpg"
          }
        },
        "link": {
          "label": "Wilian",
          "href": "/"
        },
        "subTitle": "Frontend Devel",
        "classes": "card-no-shadow",
        "body": "Vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim."
      }, {
        "type": "card",
        "feature": {
          "fullIcon": "fullscreen",
          "openIcon": "open_in_new",
          "link": "#",
          "ratios": "media-4-3",
          "img": {
            "classes": "object-fit",
            "src": "/assets/images/cases/porto6.jpg"
          }
        },
        "link": {
          "label": "Snobi",
          "href": "/"
        },
        "subTitle": "BA Test",
        "classes": "card-no-shadow",
        "body": "Consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat."
      }]
    }
  }]
}
