@use '~@angular/material' as mat;
@import "../mixins/amixin";
@import "./builder/builder-sidebar";
@import "./builder/builder-list";
@import "./builder/builder-inline-edit";

$dark-primary: mat.define-palette(mat.$gray-palette, 300, 50, 500);
$dark-accent: mat.define-palette(mat.$teal-palette, A200, A100, A400);
$dark-warn: mat.define-palette(mat.$deep-orange-palette);
$dark-theme: mat.define-dark-theme($dark-primary, $dark-accent, $dark-warn);

@mixin theme($background, $foreground, $primary, $warn) {
  background-color: mat.get-color-from-palette($background, card);

  .builder-sidebar {
    background-color: mat.get-color-from-palette($foreground, elevation, 0.85);
    color: #f5f5f5;
    @include mat.elevation(
      4,
      mat.get-color-from-palette($background, focused-button),
      0.4
    );
    .mat-divider {
      border-top-color: rgba(255, 255, 255, 0.2);
    }
    .menu {
      .item {
        &:hover,
        &:focus {
          color: #fff;
          &::after {
            background-color: rgba(#fff, 0.1);
          }
        }

        &.active {
          color: #fff;
          &::after {
            background-color: mat.get-color-from-palette($primary);
          }
        }
      }
    }
  }
  .builder {
    .builder-toolbar {
      background-color: mat.get-color-from-palette($background, background);
      color: mat.get-color-from-palette($foreground, text, 0.75);
      .left {
        .page-title {
          border-bottom: 1px solid transparent;
          &:focus-visible {
            outline: none;
            border-bottom-color: mat.get-color-from-palette($primary);
          }
        }
      }
      .middle {
        .time {
          color: mat.get-color-from-palette($foreground, text, 0.45);
        }
      }
      &.fixed {
        @include mat.elevation(
          2,
          mat.get-color-from-palette($background, tooltip),
          0.25
        );
      }
      .right {
        color: mat.get-color-from-palette($foreground, text, 0.5);
      }
    }
    .builder-main {
      > .sidebar {
        @include sidebar($background, $foreground, $primary);
      }
    }
    > .mat-drawer-container {
      background-color: transparent;
      .builder-list {
        @include builder-list($background, $foreground, $primary, $warn);
      }
    }
    .mat-drawer-content {
      box-shadow: 0 0 20px rgba(0, 0, 0, 0.11);
      @include inline-edit($background, $foreground, $primary);
      @include scrollbar(mat.get-color-from-palette($primary));

      .backdrop {
        background-color: mat.get-color-from-palette(
          $foreground,
          slider-off-active
        );
      }
      .showcase {
        background-color: mat.get-color-from-palette($background, card);
        > app-card-1v1 {
          > .card-1v1 {
            @include scrollbar(mat.get-color-from-palette($primary));
          }
        }
        .showcase-footer {
          color: mat.get-color-from-palette($foreground, text);
          border-top: 1px solid mat.get-color-from-palette($foreground, divider);
          background: mat.get-color-from-palette($background, background);
        }
        .component-toolbar {
          + app-spacer {
            background-color: mat.get-color-from-palette($primary, 0.25);
          }
        }
      }
      .preview-container {
        .mat-drawer {
          .actions {
            &.expand {
              background-color: mat.get-color-from-palette($background, card);
              @include mat.elevation(
                2,
                mat.get-color-from-palette($background, hover),
                0.4
              );
            }
          }
        }
      }
    }
    .cdk-drag-placeholder {
      background-color: mat.get-color-from-palette($background, background);
      border: 3px dotted mat.get-color-from-palette($foreground, divider);
      width: 100%;
      &:hover {
        background-color: mat.get-color-from-palette($primary, 200);
        border-color: mat.get-color-from-palette($primary);
      }
    }
  }
}
@mixin builder-color($config-or-theme) {
  $config: mat.get-color-config($config-or-theme);
  $foreground: map-get($config, foreground);
  $background: map-get($config, background);
  $primary: map-get($config, primary);
  $accent: map-get($config, accent);
  $warn: map-get($config, warn);

  $darkBg: map-get(
    $map: $dark-theme,
    $key: background,
  );
  $darkFore: map-get(
    $map: $dark-theme,
    $key: foreground,
  );
  $darkPrimary: map-get(
    $map: $dark-theme,
    $key: primary,
  );
  .builder-wrapper {
    @include theme($background, $foreground, $primary, $warn);

    &.dark {
      @include theme($darkBg, $darkFore, $darkPrimary, $warn);
      .builder-list,
      #builder-list {
        background-color: #fafafa !important;
      }
      .preview-container {
        .mat-drawer {
          .actions {
            &.expand {
              color: #fafafa;
            }
          }
        }
      }
    }
  }

  // for dynamic-component host class
  .active-toolbar {
    position: relative;
    display: block;
    box-sizing: content-box;
    &:hover {
      > .component-toolbar {
        display: block !important;
      }
    }
    > .component-toolbar {
      position: absolute;
      left: 0;
      top: 0px;
      width: 100%;
      z-index: 999;
      line-height: 1;
    }
  }
  .drawer-right {
    .builder-list {
      min-width: 85vw;
    }
  }

  .widget-picker {
    .popup {
      @include mat.elevation(
        2,
        mat.get-color-from-palette($background, hover),
        0.4
      );
      background-color: mat.get-color-from-palette($background, card);
      border: 1px solid mat.get-color-from-palette($foreground, divider);
      .hover-show {
        > app-dynamic-component {
          > app-spacer {
            background-color: mat.get-color-from-palette($primary, 0.5);
          }
        }
      }
    }
    .item {
      .inner {
        &:hover {
          background-color: mat.get-color-from-palette($primary, 0.1);
        }
      }
    }
  }

  .builder-template {
    .card {
      border: 1px solid mat.get-color-from-palette($foreground, divider);
      background-color: mat.get-color-from-palette($background, card);
      transition: all 0.1s ease-in;
      @include mat.elevation(
        4,
        mat.get-color-from-palette($foreground, divider),
        0.4
      );
      &:hover {
        border-color: mat.get-color-from-palette($primary);
      }
    }
  }
}
