{
    "pipes": [
        {
            "name": "DataSourcePipe",
            "id": "pipe-DataSourcePipe-8651a4e34f630a0c614a278dbb13253ce4ce92b15e498f170a1e9562be183a1c13ca10b21d9ede7e2c788214cd787ea51b85f7dd6fdb4ea4046ab674a050aba2",
            "file": "src/app/core/pipe/dataSource.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "array",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "array",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "dataSource",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material/table';\n\n@Pipe({\n  name: 'dataSource',\n})\nexport class DataSourcePipe implements PipeTransform {\n  transform(array: any[]): any {\n    return array ? new MatTableDataSource(array) : new MatTableDataSource([]);\n  }\n}\n"
        },
        {
            "name": "SafeHtmlPipe",
            "id": "pipe-SafeHtmlPipe-5f79761fabedbd45016eb23e4638a07b0c903a6fcd75d1089d631cb43811a8072ce6bb52a3fd845d26f7544eda2c51c74cae20dacea12fa4f464ad12cc3bb021",
            "file": "src/app/core/pipe/safe-html.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "html",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "html",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "safeHtml",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Pipe({\n  name: 'safeHtml',\n})\nexport class SafeHtmlPipe implements PipeTransform {\n  constructor(private sanitizer: DomSanitizer) {}\n\n  transform(html: any): any {\n    return this.sanitizer.bypassSecurityTrustHtml(html);\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "Action",
            "id": "interface-Action-c82f202a5a68c4f13467fc5c27f54faab6b210ed140ec058c8e5821fb72690d098a086d2b6a071c0a089a378b7c31ba3f7a26e2c785d3b0180786fd33b1debca",
            "file": "src/app/core/mobx/IAppConfig.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IText } from '../interface/widgets/IText';\nimport { IAmap } from '../interface/IAmap';\nexport interface IAppConfig {\n  defTheme: string;\n  config?: ICoreConfig | null;\n  page: IPage;\n}\nexport interface ICoreConfig {\n  defaultTheme: string;\n  theme: ITheme[];\n  login: ILogin;\n  defaultLogo: string;\n  defaultAvatar: string;\n  defaultThumb: string;\n  amap: IAmap;\n  apiUrl: IApiUrl;\n  loading: boolean;\n  article: IArticle;\n  editor: IEditor;\n  actions: IActions;\n  dialog: IDialog;\n  user: User;\n  commerce: Commerce;\n  googleAnalytics: GoogleAnalytics;\n  guard: Guard;\n  access: {\n    check: true;\n  };\n  qidian: {\n    id: string;\n    key: string;\n  };\n}\nexport interface ITheme {\n  name: string;\n  style: string;\n  icon?: string;\n  svgIcon?: string;\n}\n\nexport interface PhoneLogin {\n  enable: boolean;\n  tabLabel: string;\n  leftTime: number;\n  submitLabel: string;\n  error: string;\n}\n\nexport interface PswLogin {\n  enable: boolean;\n  tabLabel: string;\n  submitLabel: string;\n}\n\nexport interface ILogin {\n  loginRedirect: string;\n  left: any;\n  phoneLogin: PhoneLogin;\n  pswLogin: PswLogin;\n}\n\nexport interface Github {\n  repos: string;\n  api: string;\n}\n\nexport interface IApiUrl {\n  loginPath: string;\n  logoutPath: string;\n  userIdGetPath: string;\n  nodeGetPath: string;\n  commentGetPath: string;\n  paymentPath: string;\n  taxonomyGetPath: string;\n  flaggingGetPath: string;\n  userGetPath: string;\n  yushan: string;\n  search: any;\n  github: Github;\n}\n\nexport interface Form {\n  label: string;\n  key: string;\n  value: number;\n  type: string;\n  placeholder: string;\n  controlType: string;\n  appearance: string;\n  errorMes: string;\n  tooltip: string;\n  matTooltipPosition: string;\n  suffix: string;\n}\n\nexport interface FontSize {\n  enable: boolean;\n  form: Form[];\n}\n\nexport interface Comment {\n  enable: boolean;\n}\n\nexport interface IArticle {\n  fontSize: FontSize;\n  comment: Comment;\n}\n\nexport interface Modules {\n  toolbar: any[][];\n}\n\nexport interface IEditor {\n  modules: Modules;\n}\n\nexport interface Icon {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Flag {\n  icon: Icon;\n  enable: boolean;\n}\n\nexport interface Button {\n  icon: string;\n  label: string;\n}\n\nexport interface Share {\n  button: Button;\n  enable: boolean;\n}\n\nexport interface Icon2 {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Download {\n  label: string;\n  icon: Icon2;\n  enable: boolean;\n}\n\nexport interface IActions {\n  flag: Flag;\n  share: Share;\n  download: Download;\n}\n\nexport interface Params {\n  width: string;\n  path: string;\n  first: boolean;\n}\n\nexport interface Title {\n  label: string;\n  style: string;\n}\n\nexport interface Action {\n  type: string;\n  label: string;\n  color: string;\n  href: string;\n}\n\nexport interface Text {\n  title: Title;\n  spacer: string;\n  body: string;\n  actions: Action[];\n  actionsAlign: string;\n}\n\nexport interface ForceDialog {\n  params: Params;\n  text: Text;\n}\n\nexport interface IDialog {\n  forceDialog: ForceDialog;\n}\n\nexport interface User {\n  banner: string;\n}\nexport interface Action2 {\n  type: string;\n  label: string;\n  href: string;\n  color: string;\n}\n\nexport interface Commerce {\n  vip: string;\n  payNode: string;\n  dialog: {\n    spacer: string;\n    title: {\n      label: string;\n      style: string;\n    };\n    body: string;\n    actionsAlign: string;\n    actions: Action2[];\n  };\n}\n\nexport interface GoogleAnalytics {\n  id: string;\n}\n\nexport interface Guard {\n  authGuard: boolean;\n}\n\nexport interface IPage {\n  meta?: any[];\n  config?: any;\n  title: string;\n  body: any[];\n}\n\nexport interface ICommerce {\n  vip: string;\n  payNode: string;\n  dialog: IText;\n}\n",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 169
                },
                {
                    "name": "href",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 170
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 168
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 167
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Action2",
            "id": "interface-Action2-c82f202a5a68c4f13467fc5c27f54faab6b210ed140ec058c8e5821fb72690d098a086d2b6a071c0a089a378b7c31ba3f7a26e2c785d3b0180786fd33b1debca",
            "file": "src/app/core/mobx/IAppConfig.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IText } from '../interface/widgets/IText';\nimport { IAmap } from '../interface/IAmap';\nexport interface IAppConfig {\n  defTheme: string;\n  config?: ICoreConfig | null;\n  page: IPage;\n}\nexport interface ICoreConfig {\n  defaultTheme: string;\n  theme: ITheme[];\n  login: ILogin;\n  defaultLogo: string;\n  defaultAvatar: string;\n  defaultThumb: string;\n  amap: IAmap;\n  apiUrl: IApiUrl;\n  loading: boolean;\n  article: IArticle;\n  editor: IEditor;\n  actions: IActions;\n  dialog: IDialog;\n  user: User;\n  commerce: Commerce;\n  googleAnalytics: GoogleAnalytics;\n  guard: Guard;\n  access: {\n    check: true;\n  };\n  qidian: {\n    id: string;\n    key: string;\n  };\n}\nexport interface ITheme {\n  name: string;\n  style: string;\n  icon?: string;\n  svgIcon?: string;\n}\n\nexport interface PhoneLogin {\n  enable: boolean;\n  tabLabel: string;\n  leftTime: number;\n  submitLabel: string;\n  error: string;\n}\n\nexport interface PswLogin {\n  enable: boolean;\n  tabLabel: string;\n  submitLabel: string;\n}\n\nexport interface ILogin {\n  loginRedirect: string;\n  left: any;\n  phoneLogin: PhoneLogin;\n  pswLogin: PswLogin;\n}\n\nexport interface Github {\n  repos: string;\n  api: string;\n}\n\nexport interface IApiUrl {\n  loginPath: string;\n  logoutPath: string;\n  userIdGetPath: string;\n  nodeGetPath: string;\n  commentGetPath: string;\n  paymentPath: string;\n  taxonomyGetPath: string;\n  flaggingGetPath: string;\n  userGetPath: string;\n  yushan: string;\n  search: any;\n  github: Github;\n}\n\nexport interface Form {\n  label: string;\n  key: string;\n  value: number;\n  type: string;\n  placeholder: string;\n  controlType: string;\n  appearance: string;\n  errorMes: string;\n  tooltip: string;\n  matTooltipPosition: string;\n  suffix: string;\n}\n\nexport interface FontSize {\n  enable: boolean;\n  form: Form[];\n}\n\nexport interface Comment {\n  enable: boolean;\n}\n\nexport interface IArticle {\n  fontSize: FontSize;\n  comment: Comment;\n}\n\nexport interface Modules {\n  toolbar: any[][];\n}\n\nexport interface IEditor {\n  modules: Modules;\n}\n\nexport interface Icon {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Flag {\n  icon: Icon;\n  enable: boolean;\n}\n\nexport interface Button {\n  icon: string;\n  label: string;\n}\n\nexport interface Share {\n  button: Button;\n  enable: boolean;\n}\n\nexport interface Icon2 {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Download {\n  label: string;\n  icon: Icon2;\n  enable: boolean;\n}\n\nexport interface IActions {\n  flag: Flag;\n  share: Share;\n  download: Download;\n}\n\nexport interface Params {\n  width: string;\n  path: string;\n  first: boolean;\n}\n\nexport interface Title {\n  label: string;\n  style: string;\n}\n\nexport interface Action {\n  type: string;\n  label: string;\n  color: string;\n  href: string;\n}\n\nexport interface Text {\n  title: Title;\n  spacer: string;\n  body: string;\n  actions: Action[];\n  actionsAlign: string;\n}\n\nexport interface ForceDialog {\n  params: Params;\n  text: Text;\n}\n\nexport interface IDialog {\n  forceDialog: ForceDialog;\n}\n\nexport interface User {\n  banner: string;\n}\nexport interface Action2 {\n  type: string;\n  label: string;\n  href: string;\n  color: string;\n}\n\nexport interface Commerce {\n  vip: string;\n  payNode: string;\n  dialog: {\n    spacer: string;\n    title: {\n      label: string;\n      style: string;\n    };\n    body: string;\n    actionsAlign: string;\n    actions: Action2[];\n  };\n}\n\nexport interface GoogleAnalytics {\n  id: string;\n}\n\nexport interface Guard {\n  authGuard: boolean;\n}\n\nexport interface IPage {\n  meta?: any[];\n  config?: any;\n  title: string;\n  body: any[];\n}\n\nexport interface ICommerce {\n  vip: string;\n  payNode: string;\n  dialog: IText;\n}\n",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 197
                },
                {
                    "name": "href",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 196
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 195
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 194
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Button",
            "id": "interface-Button-c82f202a5a68c4f13467fc5c27f54faab6b210ed140ec058c8e5821fb72690d098a086d2b6a071c0a089a378b7c31ba3f7a26e2c785d3b0180786fd33b1debca",
            "file": "src/app/core/mobx/IAppConfig.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IText } from '../interface/widgets/IText';\nimport { IAmap } from '../interface/IAmap';\nexport interface IAppConfig {\n  defTheme: string;\n  config?: ICoreConfig | null;\n  page: IPage;\n}\nexport interface ICoreConfig {\n  defaultTheme: string;\n  theme: ITheme[];\n  login: ILogin;\n  defaultLogo: string;\n  defaultAvatar: string;\n  defaultThumb: string;\n  amap: IAmap;\n  apiUrl: IApiUrl;\n  loading: boolean;\n  article: IArticle;\n  editor: IEditor;\n  actions: IActions;\n  dialog: IDialog;\n  user: User;\n  commerce: Commerce;\n  googleAnalytics: GoogleAnalytics;\n  guard: Guard;\n  access: {\n    check: true;\n  };\n  qidian: {\n    id: string;\n    key: string;\n  };\n}\nexport interface ITheme {\n  name: string;\n  style: string;\n  icon?: string;\n  svgIcon?: string;\n}\n\nexport interface PhoneLogin {\n  enable: boolean;\n  tabLabel: string;\n  leftTime: number;\n  submitLabel: string;\n  error: string;\n}\n\nexport interface PswLogin {\n  enable: boolean;\n  tabLabel: string;\n  submitLabel: string;\n}\n\nexport interface ILogin {\n  loginRedirect: string;\n  left: any;\n  phoneLogin: PhoneLogin;\n  pswLogin: PswLogin;\n}\n\nexport interface Github {\n  repos: string;\n  api: string;\n}\n\nexport interface IApiUrl {\n  loginPath: string;\n  logoutPath: string;\n  userIdGetPath: string;\n  nodeGetPath: string;\n  commentGetPath: string;\n  paymentPath: string;\n  taxonomyGetPath: string;\n  flaggingGetPath: string;\n  userGetPath: string;\n  yushan: string;\n  search: any;\n  github: Github;\n}\n\nexport interface Form {\n  label: string;\n  key: string;\n  value: number;\n  type: string;\n  placeholder: string;\n  controlType: string;\n  appearance: string;\n  errorMes: string;\n  tooltip: string;\n  matTooltipPosition: string;\n  suffix: string;\n}\n\nexport interface FontSize {\n  enable: boolean;\n  form: Form[];\n}\n\nexport interface Comment {\n  enable: boolean;\n}\n\nexport interface IArticle {\n  fontSize: FontSize;\n  comment: Comment;\n}\n\nexport interface Modules {\n  toolbar: any[][];\n}\n\nexport interface IEditor {\n  modules: Modules;\n}\n\nexport interface Icon {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Flag {\n  icon: Icon;\n  enable: boolean;\n}\n\nexport interface Button {\n  icon: string;\n  label: string;\n}\n\nexport interface Share {\n  button: Button;\n  enable: boolean;\n}\n\nexport interface Icon2 {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Download {\n  label: string;\n  icon: Icon2;\n  enable: boolean;\n}\n\nexport interface IActions {\n  flag: Flag;\n  share: Share;\n  download: Download;\n}\n\nexport interface Params {\n  width: string;\n  path: string;\n  first: boolean;\n}\n\nexport interface Title {\n  label: string;\n  style: string;\n}\n\nexport interface Action {\n  type: string;\n  label: string;\n  color: string;\n  href: string;\n}\n\nexport interface Text {\n  title: Title;\n  spacer: string;\n  body: string;\n  actions: Action[];\n  actionsAlign: string;\n}\n\nexport interface ForceDialog {\n  params: Params;\n  text: Text;\n}\n\nexport interface IDialog {\n  forceDialog: ForceDialog;\n}\n\nexport interface User {\n  banner: string;\n}\nexport interface Action2 {\n  type: string;\n  label: string;\n  href: string;\n  color: string;\n}\n\nexport interface Commerce {\n  vip: string;\n  payNode: string;\n  dialog: {\n    spacer: string;\n    title: {\n      label: string;\n      style: string;\n    };\n    body: string;\n    actionsAlign: string;\n    actions: Action2[];\n  };\n}\n\nexport interface GoogleAnalytics {\n  id: string;\n}\n\nexport interface Guard {\n  authGuard: boolean;\n}\n\nexport interface IPage {\n  meta?: any[];\n  config?: any;\n  title: string;\n  body: any[];\n}\n\nexport interface ICommerce {\n  vip: string;\n  payNode: string;\n  dialog: IText;\n}\n",
            "properties": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 129
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 130
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Button",
            "id": "interface-Button-a49846076de153ae6ab9d4c5aa4c9901fb5c49e15623d51cb8db920fdc0030d41c567f98c59bfa2cfaadd4b2816ae19c4fd4a15a8233eadc55aab8d8718f798c-1",
            "file": "src/app/core/interface/widgets/IActions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IControl } from './IControl';\n\nexport interface ISearchAction {\n  type: string;\n  button: Button;\n  form: IControl[];\n}\n\nexport interface Button {\n  label: string;\n  color: string;\n}\n\nexport interface IShare {\n  type: string;\n  button: Button;\n  params: {\n    url: string;\n  };\n}\n",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Button-1"
        },
        {
            "name": "Comment",
            "id": "interface-Comment-c82f202a5a68c4f13467fc5c27f54faab6b210ed140ec058c8e5821fb72690d098a086d2b6a071c0a089a378b7c31ba3f7a26e2c785d3b0180786fd33b1debca",
            "file": "src/app/core/mobx/IAppConfig.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IText } from '../interface/widgets/IText';\nimport { IAmap } from '../interface/IAmap';\nexport interface IAppConfig {\n  defTheme: string;\n  config?: ICoreConfig | null;\n  page: IPage;\n}\nexport interface ICoreConfig {\n  defaultTheme: string;\n  theme: ITheme[];\n  login: ILogin;\n  defaultLogo: string;\n  defaultAvatar: string;\n  defaultThumb: string;\n  amap: IAmap;\n  apiUrl: IApiUrl;\n  loading: boolean;\n  article: IArticle;\n  editor: IEditor;\n  actions: IActions;\n  dialog: IDialog;\n  user: User;\n  commerce: Commerce;\n  googleAnalytics: GoogleAnalytics;\n  guard: Guard;\n  access: {\n    check: true;\n  };\n  qidian: {\n    id: string;\n    key: string;\n  };\n}\nexport interface ITheme {\n  name: string;\n  style: string;\n  icon?: string;\n  svgIcon?: string;\n}\n\nexport interface PhoneLogin {\n  enable: boolean;\n  tabLabel: string;\n  leftTime: number;\n  submitLabel: string;\n  error: string;\n}\n\nexport interface PswLogin {\n  enable: boolean;\n  tabLabel: string;\n  submitLabel: string;\n}\n\nexport interface ILogin {\n  loginRedirect: string;\n  left: any;\n  phoneLogin: PhoneLogin;\n  pswLogin: PswLogin;\n}\n\nexport interface Github {\n  repos: string;\n  api: string;\n}\n\nexport interface IApiUrl {\n  loginPath: string;\n  logoutPath: string;\n  userIdGetPath: string;\n  nodeGetPath: string;\n  commentGetPath: string;\n  paymentPath: string;\n  taxonomyGetPath: string;\n  flaggingGetPath: string;\n  userGetPath: string;\n  yushan: string;\n  search: any;\n  github: Github;\n}\n\nexport interface Form {\n  label: string;\n  key: string;\n  value: number;\n  type: string;\n  placeholder: string;\n  controlType: string;\n  appearance: string;\n  errorMes: string;\n  tooltip: string;\n  matTooltipPosition: string;\n  suffix: string;\n}\n\nexport interface FontSize {\n  enable: boolean;\n  form: Form[];\n}\n\nexport interface Comment {\n  enable: boolean;\n}\n\nexport interface IArticle {\n  fontSize: FontSize;\n  comment: Comment;\n}\n\nexport interface Modules {\n  toolbar: any[][];\n}\n\nexport interface IEditor {\n  modules: Modules;\n}\n\nexport interface Icon {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Flag {\n  icon: Icon;\n  enable: boolean;\n}\n\nexport interface Button {\n  icon: string;\n  label: string;\n}\n\nexport interface Share {\n  button: Button;\n  enable: boolean;\n}\n\nexport interface Icon2 {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Download {\n  label: string;\n  icon: Icon2;\n  enable: boolean;\n}\n\nexport interface IActions {\n  flag: Flag;\n  share: Share;\n  download: Download;\n}\n\nexport interface Params {\n  width: string;\n  path: string;\n  first: boolean;\n}\n\nexport interface Title {\n  label: string;\n  style: string;\n}\n\nexport interface Action {\n  type: string;\n  label: string;\n  color: string;\n  href: string;\n}\n\nexport interface Text {\n  title: Title;\n  spacer: string;\n  body: string;\n  actions: Action[];\n  actionsAlign: string;\n}\n\nexport interface ForceDialog {\n  params: Params;\n  text: Text;\n}\n\nexport interface IDialog {\n  forceDialog: ForceDialog;\n}\n\nexport interface User {\n  banner: string;\n}\nexport interface Action2 {\n  type: string;\n  label: string;\n  href: string;\n  color: string;\n}\n\nexport interface Commerce {\n  vip: string;\n  payNode: string;\n  dialog: {\n    spacer: string;\n    title: {\n      label: string;\n      style: string;\n    };\n    body: string;\n    actionsAlign: string;\n    actions: Action2[];\n  };\n}\n\nexport interface GoogleAnalytics {\n  id: string;\n}\n\nexport interface Guard {\n  authGuard: boolean;\n}\n\nexport interface IPage {\n  meta?: any[];\n  config?: any;\n  title: string;\n  body: any[];\n}\n\nexport interface ICommerce {\n  vip: string;\n  payNode: string;\n  dialog: IText;\n}\n",
            "properties": [
                {
                    "name": "enable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 102
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Commerce",
            "id": "interface-Commerce-c82f202a5a68c4f13467fc5c27f54faab6b210ed140ec058c8e5821fb72690d098a086d2b6a071c0a089a378b7c31ba3f7a26e2c785d3b0180786fd33b1debca",
            "file": "src/app/core/mobx/IAppConfig.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IText } from '../interface/widgets/IText';\nimport { IAmap } from '../interface/IAmap';\nexport interface IAppConfig {\n  defTheme: string;\n  config?: ICoreConfig | null;\n  page: IPage;\n}\nexport interface ICoreConfig {\n  defaultTheme: string;\n  theme: ITheme[];\n  login: ILogin;\n  defaultLogo: string;\n  defaultAvatar: string;\n  defaultThumb: string;\n  amap: IAmap;\n  apiUrl: IApiUrl;\n  loading: boolean;\n  article: IArticle;\n  editor: IEditor;\n  actions: IActions;\n  dialog: IDialog;\n  user: User;\n  commerce: Commerce;\n  googleAnalytics: GoogleAnalytics;\n  guard: Guard;\n  access: {\n    check: true;\n  };\n  qidian: {\n    id: string;\n    key: string;\n  };\n}\nexport interface ITheme {\n  name: string;\n  style: string;\n  icon?: string;\n  svgIcon?: string;\n}\n\nexport interface PhoneLogin {\n  enable: boolean;\n  tabLabel: string;\n  leftTime: number;\n  submitLabel: string;\n  error: string;\n}\n\nexport interface PswLogin {\n  enable: boolean;\n  tabLabel: string;\n  submitLabel: string;\n}\n\nexport interface ILogin {\n  loginRedirect: string;\n  left: any;\n  phoneLogin: PhoneLogin;\n  pswLogin: PswLogin;\n}\n\nexport interface Github {\n  repos: string;\n  api: string;\n}\n\nexport interface IApiUrl {\n  loginPath: string;\n  logoutPath: string;\n  userIdGetPath: string;\n  nodeGetPath: string;\n  commentGetPath: string;\n  paymentPath: string;\n  taxonomyGetPath: string;\n  flaggingGetPath: string;\n  userGetPath: string;\n  yushan: string;\n  search: any;\n  github: Github;\n}\n\nexport interface Form {\n  label: string;\n  key: string;\n  value: number;\n  type: string;\n  placeholder: string;\n  controlType: string;\n  appearance: string;\n  errorMes: string;\n  tooltip: string;\n  matTooltipPosition: string;\n  suffix: string;\n}\n\nexport interface FontSize {\n  enable: boolean;\n  form: Form[];\n}\n\nexport interface Comment {\n  enable: boolean;\n}\n\nexport interface IArticle {\n  fontSize: FontSize;\n  comment: Comment;\n}\n\nexport interface Modules {\n  toolbar: any[][];\n}\n\nexport interface IEditor {\n  modules: Modules;\n}\n\nexport interface Icon {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Flag {\n  icon: Icon;\n  enable: boolean;\n}\n\nexport interface Button {\n  icon: string;\n  label: string;\n}\n\nexport interface Share {\n  button: Button;\n  enable: boolean;\n}\n\nexport interface Icon2 {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Download {\n  label: string;\n  icon: Icon2;\n  enable: boolean;\n}\n\nexport interface IActions {\n  flag: Flag;\n  share: Share;\n  download: Download;\n}\n\nexport interface Params {\n  width: string;\n  path: string;\n  first: boolean;\n}\n\nexport interface Title {\n  label: string;\n  style: string;\n}\n\nexport interface Action {\n  type: string;\n  label: string;\n  color: string;\n  href: string;\n}\n\nexport interface Text {\n  title: Title;\n  spacer: string;\n  body: string;\n  actions: Action[];\n  actionsAlign: string;\n}\n\nexport interface ForceDialog {\n  params: Params;\n  text: Text;\n}\n\nexport interface IDialog {\n  forceDialog: ForceDialog;\n}\n\nexport interface User {\n  banner: string;\n}\nexport interface Action2 {\n  type: string;\n  label: string;\n  href: string;\n  color: string;\n}\n\nexport interface Commerce {\n  vip: string;\n  payNode: string;\n  dialog: {\n    spacer: string;\n    title: {\n      label: string;\n      style: string;\n    };\n    body: string;\n    actionsAlign: string;\n    actions: Action2[];\n  };\n}\n\nexport interface GoogleAnalytics {\n  id: string;\n}\n\nexport interface Guard {\n  authGuard: boolean;\n}\n\nexport interface IPage {\n  meta?: any[];\n  config?: any;\n  title: string;\n  body: any[];\n}\n\nexport interface ICommerce {\n  vip: string;\n  payNode: string;\n  dialog: IText;\n}\n",
            "properties": [
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 203
                },
                {
                    "name": "payNode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 202
                },
                {
                    "name": "vip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 201
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "CurrentUser",
            "id": "interface-CurrentUser-36c5149e38de7d349acb785c2d10603b120291fb4bc06980bf60b318481cf2c9644db10f0e4e4cce272df86324d359d1072ccba209c1fa59287a9a55c7b39285",
            "file": "src/app/core/mobx/user/IUser.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IUser extends TokenUser {\n  id: string;\n  display_name?: string;\n  user_fullname?: string;\n  mail?: string;\n  name?: string;\n  status?: boolean;\n  authenticated: boolean;\n  picture?: string;\n}\n\nexport interface TokenUser {\n  csrf_token: string;\n  current_user: CurrentUser;\n  logout_token: string;\n}\n\nexport interface CurrentUser {\n  uid: string;\n  name: string;\n  roles: string[];\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "roles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "uid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Download",
            "id": "interface-Download-c82f202a5a68c4f13467fc5c27f54faab6b210ed140ec058c8e5821fb72690d098a086d2b6a071c0a089a378b7c31ba3f7a26e2c785d3b0180786fd33b1debca",
            "file": "src/app/core/mobx/IAppConfig.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IText } from '../interface/widgets/IText';\nimport { IAmap } from '../interface/IAmap';\nexport interface IAppConfig {\n  defTheme: string;\n  config?: ICoreConfig | null;\n  page: IPage;\n}\nexport interface ICoreConfig {\n  defaultTheme: string;\n  theme: ITheme[];\n  login: ILogin;\n  defaultLogo: string;\n  defaultAvatar: string;\n  defaultThumb: string;\n  amap: IAmap;\n  apiUrl: IApiUrl;\n  loading: boolean;\n  article: IArticle;\n  editor: IEditor;\n  actions: IActions;\n  dialog: IDialog;\n  user: User;\n  commerce: Commerce;\n  googleAnalytics: GoogleAnalytics;\n  guard: Guard;\n  access: {\n    check: true;\n  };\n  qidian: {\n    id: string;\n    key: string;\n  };\n}\nexport interface ITheme {\n  name: string;\n  style: string;\n  icon?: string;\n  svgIcon?: string;\n}\n\nexport interface PhoneLogin {\n  enable: boolean;\n  tabLabel: string;\n  leftTime: number;\n  submitLabel: string;\n  error: string;\n}\n\nexport interface PswLogin {\n  enable: boolean;\n  tabLabel: string;\n  submitLabel: string;\n}\n\nexport interface ILogin {\n  loginRedirect: string;\n  left: any;\n  phoneLogin: PhoneLogin;\n  pswLogin: PswLogin;\n}\n\nexport interface Github {\n  repos: string;\n  api: string;\n}\n\nexport interface IApiUrl {\n  loginPath: string;\n  logoutPath: string;\n  userIdGetPath: string;\n  nodeGetPath: string;\n  commentGetPath: string;\n  paymentPath: string;\n  taxonomyGetPath: string;\n  flaggingGetPath: string;\n  userGetPath: string;\n  yushan: string;\n  search: any;\n  github: Github;\n}\n\nexport interface Form {\n  label: string;\n  key: string;\n  value: number;\n  type: string;\n  placeholder: string;\n  controlType: string;\n  appearance: string;\n  errorMes: string;\n  tooltip: string;\n  matTooltipPosition: string;\n  suffix: string;\n}\n\nexport interface FontSize {\n  enable: boolean;\n  form: Form[];\n}\n\nexport interface Comment {\n  enable: boolean;\n}\n\nexport interface IArticle {\n  fontSize: FontSize;\n  comment: Comment;\n}\n\nexport interface Modules {\n  toolbar: any[][];\n}\n\nexport interface IEditor {\n  modules: Modules;\n}\n\nexport interface Icon {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Flag {\n  icon: Icon;\n  enable: boolean;\n}\n\nexport interface Button {\n  icon: string;\n  label: string;\n}\n\nexport interface Share {\n  button: Button;\n  enable: boolean;\n}\n\nexport interface Icon2 {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Download {\n  label: string;\n  icon: Icon2;\n  enable: boolean;\n}\n\nexport interface IActions {\n  flag: Flag;\n  share: Share;\n  download: Download;\n}\n\nexport interface Params {\n  width: string;\n  path: string;\n  first: boolean;\n}\n\nexport interface Title {\n  label: string;\n  style: string;\n}\n\nexport interface Action {\n  type: string;\n  label: string;\n  color: string;\n  href: string;\n}\n\nexport interface Text {\n  title: Title;\n  spacer: string;\n  body: string;\n  actions: Action[];\n  actionsAlign: string;\n}\n\nexport interface ForceDialog {\n  params: Params;\n  text: Text;\n}\n\nexport interface IDialog {\n  forceDialog: ForceDialog;\n}\n\nexport interface User {\n  banner: string;\n}\nexport interface Action2 {\n  type: string;\n  label: string;\n  href: string;\n  color: string;\n}\n\nexport interface Commerce {\n  vip: string;\n  payNode: string;\n  dialog: {\n    spacer: string;\n    title: {\n      label: string;\n      style: string;\n    };\n    body: string;\n    actionsAlign: string;\n    actions: Action2[];\n  };\n}\n\nexport interface GoogleAnalytics {\n  id: string;\n}\n\nexport interface Guard {\n  authGuard: boolean;\n}\n\nexport interface IPage {\n  meta?: any[];\n  config?: any;\n  title: string;\n  body: any[];\n}\n\nexport interface ICommerce {\n  vip: string;\n  payNode: string;\n  dialog: IText;\n}\n",
            "properties": [
                {
                    "name": "enable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 146
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Icon2",
                    "optional": false,
                    "description": "",
                    "line": 145
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 144
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Flag",
            "id": "interface-Flag-c82f202a5a68c4f13467fc5c27f54faab6b210ed140ec058c8e5821fb72690d098a086d2b6a071c0a089a378b7c31ba3f7a26e2c785d3b0180786fd33b1debca",
            "file": "src/app/core/mobx/IAppConfig.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IText } from '../interface/widgets/IText';\nimport { IAmap } from '../interface/IAmap';\nexport interface IAppConfig {\n  defTheme: string;\n  config?: ICoreConfig | null;\n  page: IPage;\n}\nexport interface ICoreConfig {\n  defaultTheme: string;\n  theme: ITheme[];\n  login: ILogin;\n  defaultLogo: string;\n  defaultAvatar: string;\n  defaultThumb: string;\n  amap: IAmap;\n  apiUrl: IApiUrl;\n  loading: boolean;\n  article: IArticle;\n  editor: IEditor;\n  actions: IActions;\n  dialog: IDialog;\n  user: User;\n  commerce: Commerce;\n  googleAnalytics: GoogleAnalytics;\n  guard: Guard;\n  access: {\n    check: true;\n  };\n  qidian: {\n    id: string;\n    key: string;\n  };\n}\nexport interface ITheme {\n  name: string;\n  style: string;\n  icon?: string;\n  svgIcon?: string;\n}\n\nexport interface PhoneLogin {\n  enable: boolean;\n  tabLabel: string;\n  leftTime: number;\n  submitLabel: string;\n  error: string;\n}\n\nexport interface PswLogin {\n  enable: boolean;\n  tabLabel: string;\n  submitLabel: string;\n}\n\nexport interface ILogin {\n  loginRedirect: string;\n  left: any;\n  phoneLogin: PhoneLogin;\n  pswLogin: PswLogin;\n}\n\nexport interface Github {\n  repos: string;\n  api: string;\n}\n\nexport interface IApiUrl {\n  loginPath: string;\n  logoutPath: string;\n  userIdGetPath: string;\n  nodeGetPath: string;\n  commentGetPath: string;\n  paymentPath: string;\n  taxonomyGetPath: string;\n  flaggingGetPath: string;\n  userGetPath: string;\n  yushan: string;\n  search: any;\n  github: Github;\n}\n\nexport interface Form {\n  label: string;\n  key: string;\n  value: number;\n  type: string;\n  placeholder: string;\n  controlType: string;\n  appearance: string;\n  errorMes: string;\n  tooltip: string;\n  matTooltipPosition: string;\n  suffix: string;\n}\n\nexport interface FontSize {\n  enable: boolean;\n  form: Form[];\n}\n\nexport interface Comment {\n  enable: boolean;\n}\n\nexport interface IArticle {\n  fontSize: FontSize;\n  comment: Comment;\n}\n\nexport interface Modules {\n  toolbar: any[][];\n}\n\nexport interface IEditor {\n  modules: Modules;\n}\n\nexport interface Icon {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Flag {\n  icon: Icon;\n  enable: boolean;\n}\n\nexport interface Button {\n  icon: string;\n  label: string;\n}\n\nexport interface Share {\n  button: Button;\n  enable: boolean;\n}\n\nexport interface Icon2 {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Download {\n  label: string;\n  icon: Icon2;\n  enable: boolean;\n}\n\nexport interface IActions {\n  flag: Flag;\n  share: Share;\n  download: Download;\n}\n\nexport interface Params {\n  width: string;\n  path: string;\n  first: boolean;\n}\n\nexport interface Title {\n  label: string;\n  style: string;\n}\n\nexport interface Action {\n  type: string;\n  label: string;\n  color: string;\n  href: string;\n}\n\nexport interface Text {\n  title: Title;\n  spacer: string;\n  body: string;\n  actions: Action[];\n  actionsAlign: string;\n}\n\nexport interface ForceDialog {\n  params: Params;\n  text: Text;\n}\n\nexport interface IDialog {\n  forceDialog: ForceDialog;\n}\n\nexport interface User {\n  banner: string;\n}\nexport interface Action2 {\n  type: string;\n  label: string;\n  href: string;\n  color: string;\n}\n\nexport interface Commerce {\n  vip: string;\n  payNode: string;\n  dialog: {\n    spacer: string;\n    title: {\n      label: string;\n      style: string;\n    };\n    body: string;\n    actionsAlign: string;\n    actions: Action2[];\n  };\n}\n\nexport interface GoogleAnalytics {\n  id: string;\n}\n\nexport interface Guard {\n  authGuard: boolean;\n}\n\nexport interface IPage {\n  meta?: any[];\n  config?: any;\n  title: string;\n  body: any[];\n}\n\nexport interface ICommerce {\n  vip: string;\n  payNode: string;\n  dialog: IText;\n}\n",
            "properties": [
                {
                    "name": "enable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 125
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Icon",
                    "optional": false,
                    "description": "",
                    "line": 124
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "FlaggedEntity",
            "id": "interface-FlaggedEntity-e2ec04e987aefccfa55dcbb8561fb28f207b35ffedb84f61df0e12956eb8879383c9e3eb2b53cf5f4370454fb36b91cdaa23edd75e5714675403cc62ff3f45ae",
            "file": "src/app/core/interface/widgets/IFlag.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IIcon } from './IIcon';\n\nexport interface IFlag {\n  type: string;\n  label: string;\n  icon: IIcon;\n  params: Params;\n}\n\nexport interface Params {\n  type: string;\n  entity_type: string;\n  entity_id: string;\n  relationships: Relationships;\n}\n\nexport interface Relationships {\n  flagged_entity: FlaggedEntity;\n}\n\nexport interface FlaggedEntity {\n  type: string;\n  id: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "FontSize",
            "id": "interface-FontSize-c82f202a5a68c4f13467fc5c27f54faab6b210ed140ec058c8e5821fb72690d098a086d2b6a071c0a089a378b7c31ba3f7a26e2c785d3b0180786fd33b1debca",
            "file": "src/app/core/mobx/IAppConfig.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IText } from '../interface/widgets/IText';\nimport { IAmap } from '../interface/IAmap';\nexport interface IAppConfig {\n  defTheme: string;\n  config?: ICoreConfig | null;\n  page: IPage;\n}\nexport interface ICoreConfig {\n  defaultTheme: string;\n  theme: ITheme[];\n  login: ILogin;\n  defaultLogo: string;\n  defaultAvatar: string;\n  defaultThumb: string;\n  amap: IAmap;\n  apiUrl: IApiUrl;\n  loading: boolean;\n  article: IArticle;\n  editor: IEditor;\n  actions: IActions;\n  dialog: IDialog;\n  user: User;\n  commerce: Commerce;\n  googleAnalytics: GoogleAnalytics;\n  guard: Guard;\n  access: {\n    check: true;\n  };\n  qidian: {\n    id: string;\n    key: string;\n  };\n}\nexport interface ITheme {\n  name: string;\n  style: string;\n  icon?: string;\n  svgIcon?: string;\n}\n\nexport interface PhoneLogin {\n  enable: boolean;\n  tabLabel: string;\n  leftTime: number;\n  submitLabel: string;\n  error: string;\n}\n\nexport interface PswLogin {\n  enable: boolean;\n  tabLabel: string;\n  submitLabel: string;\n}\n\nexport interface ILogin {\n  loginRedirect: string;\n  left: any;\n  phoneLogin: PhoneLogin;\n  pswLogin: PswLogin;\n}\n\nexport interface Github {\n  repos: string;\n  api: string;\n}\n\nexport interface IApiUrl {\n  loginPath: string;\n  logoutPath: string;\n  userIdGetPath: string;\n  nodeGetPath: string;\n  commentGetPath: string;\n  paymentPath: string;\n  taxonomyGetPath: string;\n  flaggingGetPath: string;\n  userGetPath: string;\n  yushan: string;\n  search: any;\n  github: Github;\n}\n\nexport interface Form {\n  label: string;\n  key: string;\n  value: number;\n  type: string;\n  placeholder: string;\n  controlType: string;\n  appearance: string;\n  errorMes: string;\n  tooltip: string;\n  matTooltipPosition: string;\n  suffix: string;\n}\n\nexport interface FontSize {\n  enable: boolean;\n  form: Form[];\n}\n\nexport interface Comment {\n  enable: boolean;\n}\n\nexport interface IArticle {\n  fontSize: FontSize;\n  comment: Comment;\n}\n\nexport interface Modules {\n  toolbar: any[][];\n}\n\nexport interface IEditor {\n  modules: Modules;\n}\n\nexport interface Icon {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Flag {\n  icon: Icon;\n  enable: boolean;\n}\n\nexport interface Button {\n  icon: string;\n  label: string;\n}\n\nexport interface Share {\n  button: Button;\n  enable: boolean;\n}\n\nexport interface Icon2 {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Download {\n  label: string;\n  icon: Icon2;\n  enable: boolean;\n}\n\nexport interface IActions {\n  flag: Flag;\n  share: Share;\n  download: Download;\n}\n\nexport interface Params {\n  width: string;\n  path: string;\n  first: boolean;\n}\n\nexport interface Title {\n  label: string;\n  style: string;\n}\n\nexport interface Action {\n  type: string;\n  label: string;\n  color: string;\n  href: string;\n}\n\nexport interface Text {\n  title: Title;\n  spacer: string;\n  body: string;\n  actions: Action[];\n  actionsAlign: string;\n}\n\nexport interface ForceDialog {\n  params: Params;\n  text: Text;\n}\n\nexport interface IDialog {\n  forceDialog: ForceDialog;\n}\n\nexport interface User {\n  banner: string;\n}\nexport interface Action2 {\n  type: string;\n  label: string;\n  href: string;\n  color: string;\n}\n\nexport interface Commerce {\n  vip: string;\n  payNode: string;\n  dialog: {\n    spacer: string;\n    title: {\n      label: string;\n      style: string;\n    };\n    body: string;\n    actionsAlign: string;\n    actions: Action2[];\n  };\n}\n\nexport interface GoogleAnalytics {\n  id: string;\n}\n\nexport interface Guard {\n  authGuard: boolean;\n}\n\nexport interface IPage {\n  meta?: any[];\n  config?: any;\n  title: string;\n  body: any[];\n}\n\nexport interface ICommerce {\n  vip: string;\n  payNode: string;\n  dialog: IText;\n}\n",
            "properties": [
                {
                    "name": "enable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Form[]",
                    "optional": false,
                    "description": "",
                    "line": 98
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ForceDialog",
            "id": "interface-ForceDialog-c82f202a5a68c4f13467fc5c27f54faab6b210ed140ec058c8e5821fb72690d098a086d2b6a071c0a089a378b7c31ba3f7a26e2c785d3b0180786fd33b1debca",
            "file": "src/app/core/mobx/IAppConfig.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IText } from '../interface/widgets/IText';\nimport { IAmap } from '../interface/IAmap';\nexport interface IAppConfig {\n  defTheme: string;\n  config?: ICoreConfig | null;\n  page: IPage;\n}\nexport interface ICoreConfig {\n  defaultTheme: string;\n  theme: ITheme[];\n  login: ILogin;\n  defaultLogo: string;\n  defaultAvatar: string;\n  defaultThumb: string;\n  amap: IAmap;\n  apiUrl: IApiUrl;\n  loading: boolean;\n  article: IArticle;\n  editor: IEditor;\n  actions: IActions;\n  dialog: IDialog;\n  user: User;\n  commerce: Commerce;\n  googleAnalytics: GoogleAnalytics;\n  guard: Guard;\n  access: {\n    check: true;\n  };\n  qidian: {\n    id: string;\n    key: string;\n  };\n}\nexport interface ITheme {\n  name: string;\n  style: string;\n  icon?: string;\n  svgIcon?: string;\n}\n\nexport interface PhoneLogin {\n  enable: boolean;\n  tabLabel: string;\n  leftTime: number;\n  submitLabel: string;\n  error: string;\n}\n\nexport interface PswLogin {\n  enable: boolean;\n  tabLabel: string;\n  submitLabel: string;\n}\n\nexport interface ILogin {\n  loginRedirect: string;\n  left: any;\n  phoneLogin: PhoneLogin;\n  pswLogin: PswLogin;\n}\n\nexport interface Github {\n  repos: string;\n  api: string;\n}\n\nexport interface IApiUrl {\n  loginPath: string;\n  logoutPath: string;\n  userIdGetPath: string;\n  nodeGetPath: string;\n  commentGetPath: string;\n  paymentPath: string;\n  taxonomyGetPath: string;\n  flaggingGetPath: string;\n  userGetPath: string;\n  yushan: string;\n  search: any;\n  github: Github;\n}\n\nexport interface Form {\n  label: string;\n  key: string;\n  value: number;\n  type: string;\n  placeholder: string;\n  controlType: string;\n  appearance: string;\n  errorMes: string;\n  tooltip: string;\n  matTooltipPosition: string;\n  suffix: string;\n}\n\nexport interface FontSize {\n  enable: boolean;\n  form: Form[];\n}\n\nexport interface Comment {\n  enable: boolean;\n}\n\nexport interface IArticle {\n  fontSize: FontSize;\n  comment: Comment;\n}\n\nexport interface Modules {\n  toolbar: any[][];\n}\n\nexport interface IEditor {\n  modules: Modules;\n}\n\nexport interface Icon {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Flag {\n  icon: Icon;\n  enable: boolean;\n}\n\nexport interface Button {\n  icon: string;\n  label: string;\n}\n\nexport interface Share {\n  button: Button;\n  enable: boolean;\n}\n\nexport interface Icon2 {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Download {\n  label: string;\n  icon: Icon2;\n  enable: boolean;\n}\n\nexport interface IActions {\n  flag: Flag;\n  share: Share;\n  download: Download;\n}\n\nexport interface Params {\n  width: string;\n  path: string;\n  first: boolean;\n}\n\nexport interface Title {\n  label: string;\n  style: string;\n}\n\nexport interface Action {\n  type: string;\n  label: string;\n  color: string;\n  href: string;\n}\n\nexport interface Text {\n  title: Title;\n  spacer: string;\n  body: string;\n  actions: Action[];\n  actionsAlign: string;\n}\n\nexport interface ForceDialog {\n  params: Params;\n  text: Text;\n}\n\nexport interface IDialog {\n  forceDialog: ForceDialog;\n}\n\nexport interface User {\n  banner: string;\n}\nexport interface Action2 {\n  type: string;\n  label: string;\n  href: string;\n  color: string;\n}\n\nexport interface Commerce {\n  vip: string;\n  payNode: string;\n  dialog: {\n    spacer: string;\n    title: {\n      label: string;\n      style: string;\n    };\n    body: string;\n    actionsAlign: string;\n    actions: Action2[];\n  };\n}\n\nexport interface GoogleAnalytics {\n  id: string;\n}\n\nexport interface Guard {\n  authGuard: boolean;\n}\n\nexport interface IPage {\n  meta?: any[];\n  config?: any;\n  title: string;\n  body: any[];\n}\n\nexport interface ICommerce {\n  vip: string;\n  payNode: string;\n  dialog: IText;\n}\n",
            "properties": [
                {
                    "name": "params",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Params",
                    "optional": false,
                    "description": "",
                    "line": 182
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Text",
                    "optional": false,
                    "description": "",
                    "line": 183
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Form",
            "id": "interface-Form-c82f202a5a68c4f13467fc5c27f54faab6b210ed140ec058c8e5821fb72690d098a086d2b6a071c0a089a378b7c31ba3f7a26e2c785d3b0180786fd33b1debca",
            "file": "src/app/core/mobx/IAppConfig.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IText } from '../interface/widgets/IText';\nimport { IAmap } from '../interface/IAmap';\nexport interface IAppConfig {\n  defTheme: string;\n  config?: ICoreConfig | null;\n  page: IPage;\n}\nexport interface ICoreConfig {\n  defaultTheme: string;\n  theme: ITheme[];\n  login: ILogin;\n  defaultLogo: string;\n  defaultAvatar: string;\n  defaultThumb: string;\n  amap: IAmap;\n  apiUrl: IApiUrl;\n  loading: boolean;\n  article: IArticle;\n  editor: IEditor;\n  actions: IActions;\n  dialog: IDialog;\n  user: User;\n  commerce: Commerce;\n  googleAnalytics: GoogleAnalytics;\n  guard: Guard;\n  access: {\n    check: true;\n  };\n  qidian: {\n    id: string;\n    key: string;\n  };\n}\nexport interface ITheme {\n  name: string;\n  style: string;\n  icon?: string;\n  svgIcon?: string;\n}\n\nexport interface PhoneLogin {\n  enable: boolean;\n  tabLabel: string;\n  leftTime: number;\n  submitLabel: string;\n  error: string;\n}\n\nexport interface PswLogin {\n  enable: boolean;\n  tabLabel: string;\n  submitLabel: string;\n}\n\nexport interface ILogin {\n  loginRedirect: string;\n  left: any;\n  phoneLogin: PhoneLogin;\n  pswLogin: PswLogin;\n}\n\nexport interface Github {\n  repos: string;\n  api: string;\n}\n\nexport interface IApiUrl {\n  loginPath: string;\n  logoutPath: string;\n  userIdGetPath: string;\n  nodeGetPath: string;\n  commentGetPath: string;\n  paymentPath: string;\n  taxonomyGetPath: string;\n  flaggingGetPath: string;\n  userGetPath: string;\n  yushan: string;\n  search: any;\n  github: Github;\n}\n\nexport interface Form {\n  label: string;\n  key: string;\n  value: number;\n  type: string;\n  placeholder: string;\n  controlType: string;\n  appearance: string;\n  errorMes: string;\n  tooltip: string;\n  matTooltipPosition: string;\n  suffix: string;\n}\n\nexport interface FontSize {\n  enable: boolean;\n  form: Form[];\n}\n\nexport interface Comment {\n  enable: boolean;\n}\n\nexport interface IArticle {\n  fontSize: FontSize;\n  comment: Comment;\n}\n\nexport interface Modules {\n  toolbar: any[][];\n}\n\nexport interface IEditor {\n  modules: Modules;\n}\n\nexport interface Icon {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Flag {\n  icon: Icon;\n  enable: boolean;\n}\n\nexport interface Button {\n  icon: string;\n  label: string;\n}\n\nexport interface Share {\n  button: Button;\n  enable: boolean;\n}\n\nexport interface Icon2 {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Download {\n  label: string;\n  icon: Icon2;\n  enable: boolean;\n}\n\nexport interface IActions {\n  flag: Flag;\n  share: Share;\n  download: Download;\n}\n\nexport interface Params {\n  width: string;\n  path: string;\n  first: boolean;\n}\n\nexport interface Title {\n  label: string;\n  style: string;\n}\n\nexport interface Action {\n  type: string;\n  label: string;\n  color: string;\n  href: string;\n}\n\nexport interface Text {\n  title: Title;\n  spacer: string;\n  body: string;\n  actions: Action[];\n  actionsAlign: string;\n}\n\nexport interface ForceDialog {\n  params: Params;\n  text: Text;\n}\n\nexport interface IDialog {\n  forceDialog: ForceDialog;\n}\n\nexport interface User {\n  banner: string;\n}\nexport interface Action2 {\n  type: string;\n  label: string;\n  href: string;\n  color: string;\n}\n\nexport interface Commerce {\n  vip: string;\n  payNode: string;\n  dialog: {\n    spacer: string;\n    title: {\n      label: string;\n      style: string;\n    };\n    body: string;\n    actionsAlign: string;\n    actions: Action2[];\n  };\n}\n\nexport interface GoogleAnalytics {\n  id: string;\n}\n\nexport interface Guard {\n  authGuard: boolean;\n}\n\nexport interface IPage {\n  meta?: any[];\n  config?: any;\n  title: string;\n  body: any[];\n}\n\nexport interface ICommerce {\n  vip: string;\n  payNode: string;\n  dialog: IText;\n}\n",
            "properties": [
                {
                    "name": "appearance",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "controlType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "errorMes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 90
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "matTooltipPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 92
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "suffix",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 85
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Github",
            "id": "interface-Github-c82f202a5a68c4f13467fc5c27f54faab6b210ed140ec058c8e5821fb72690d098a086d2b6a071c0a089a378b7c31ba3f7a26e2c785d3b0180786fd33b1debca",
            "file": "src/app/core/mobx/IAppConfig.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IText } from '../interface/widgets/IText';\nimport { IAmap } from '../interface/IAmap';\nexport interface IAppConfig {\n  defTheme: string;\n  config?: ICoreConfig | null;\n  page: IPage;\n}\nexport interface ICoreConfig {\n  defaultTheme: string;\n  theme: ITheme[];\n  login: ILogin;\n  defaultLogo: string;\n  defaultAvatar: string;\n  defaultThumb: string;\n  amap: IAmap;\n  apiUrl: IApiUrl;\n  loading: boolean;\n  article: IArticle;\n  editor: IEditor;\n  actions: IActions;\n  dialog: IDialog;\n  user: User;\n  commerce: Commerce;\n  googleAnalytics: GoogleAnalytics;\n  guard: Guard;\n  access: {\n    check: true;\n  };\n  qidian: {\n    id: string;\n    key: string;\n  };\n}\nexport interface ITheme {\n  name: string;\n  style: string;\n  icon?: string;\n  svgIcon?: string;\n}\n\nexport interface PhoneLogin {\n  enable: boolean;\n  tabLabel: string;\n  leftTime: number;\n  submitLabel: string;\n  error: string;\n}\n\nexport interface PswLogin {\n  enable: boolean;\n  tabLabel: string;\n  submitLabel: string;\n}\n\nexport interface ILogin {\n  loginRedirect: string;\n  left: any;\n  phoneLogin: PhoneLogin;\n  pswLogin: PswLogin;\n}\n\nexport interface Github {\n  repos: string;\n  api: string;\n}\n\nexport interface IApiUrl {\n  loginPath: string;\n  logoutPath: string;\n  userIdGetPath: string;\n  nodeGetPath: string;\n  commentGetPath: string;\n  paymentPath: string;\n  taxonomyGetPath: string;\n  flaggingGetPath: string;\n  userGetPath: string;\n  yushan: string;\n  search: any;\n  github: Github;\n}\n\nexport interface Form {\n  label: string;\n  key: string;\n  value: number;\n  type: string;\n  placeholder: string;\n  controlType: string;\n  appearance: string;\n  errorMes: string;\n  tooltip: string;\n  matTooltipPosition: string;\n  suffix: string;\n}\n\nexport interface FontSize {\n  enable: boolean;\n  form: Form[];\n}\n\nexport interface Comment {\n  enable: boolean;\n}\n\nexport interface IArticle {\n  fontSize: FontSize;\n  comment: Comment;\n}\n\nexport interface Modules {\n  toolbar: any[][];\n}\n\nexport interface IEditor {\n  modules: Modules;\n}\n\nexport interface Icon {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Flag {\n  icon: Icon;\n  enable: boolean;\n}\n\nexport interface Button {\n  icon: string;\n  label: string;\n}\n\nexport interface Share {\n  button: Button;\n  enable: boolean;\n}\n\nexport interface Icon2 {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Download {\n  label: string;\n  icon: Icon2;\n  enable: boolean;\n}\n\nexport interface IActions {\n  flag: Flag;\n  share: Share;\n  download: Download;\n}\n\nexport interface Params {\n  width: string;\n  path: string;\n  first: boolean;\n}\n\nexport interface Title {\n  label: string;\n  style: string;\n}\n\nexport interface Action {\n  type: string;\n  label: string;\n  color: string;\n  href: string;\n}\n\nexport interface Text {\n  title: Title;\n  spacer: string;\n  body: string;\n  actions: Action[];\n  actionsAlign: string;\n}\n\nexport interface ForceDialog {\n  params: Params;\n  text: Text;\n}\n\nexport interface IDialog {\n  forceDialog: ForceDialog;\n}\n\nexport interface User {\n  banner: string;\n}\nexport interface Action2 {\n  type: string;\n  label: string;\n  href: string;\n  color: string;\n}\n\nexport interface Commerce {\n  vip: string;\n  payNode: string;\n  dialog: {\n    spacer: string;\n    title: {\n      label: string;\n      style: string;\n    };\n    body: string;\n    actionsAlign: string;\n    actions: Action2[];\n  };\n}\n\nexport interface GoogleAnalytics {\n  id: string;\n}\n\nexport interface Guard {\n  authGuard: boolean;\n}\n\nexport interface IPage {\n  meta?: any[];\n  config?: any;\n  title: string;\n  body: any[];\n}\n\nexport interface ICommerce {\n  vip: string;\n  payNode: string;\n  dialog: IText;\n}\n",
            "properties": [
                {
                    "name": "api",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "repos",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 63
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GoogleAnalytics",
            "id": "interface-GoogleAnalytics-c82f202a5a68c4f13467fc5c27f54faab6b210ed140ec058c8e5821fb72690d098a086d2b6a071c0a089a378b7c31ba3f7a26e2c785d3b0180786fd33b1debca",
            "file": "src/app/core/mobx/IAppConfig.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IText } from '../interface/widgets/IText';\nimport { IAmap } from '../interface/IAmap';\nexport interface IAppConfig {\n  defTheme: string;\n  config?: ICoreConfig | null;\n  page: IPage;\n}\nexport interface ICoreConfig {\n  defaultTheme: string;\n  theme: ITheme[];\n  login: ILogin;\n  defaultLogo: string;\n  defaultAvatar: string;\n  defaultThumb: string;\n  amap: IAmap;\n  apiUrl: IApiUrl;\n  loading: boolean;\n  article: IArticle;\n  editor: IEditor;\n  actions: IActions;\n  dialog: IDialog;\n  user: User;\n  commerce: Commerce;\n  googleAnalytics: GoogleAnalytics;\n  guard: Guard;\n  access: {\n    check: true;\n  };\n  qidian: {\n    id: string;\n    key: string;\n  };\n}\nexport interface ITheme {\n  name: string;\n  style: string;\n  icon?: string;\n  svgIcon?: string;\n}\n\nexport interface PhoneLogin {\n  enable: boolean;\n  tabLabel: string;\n  leftTime: number;\n  submitLabel: string;\n  error: string;\n}\n\nexport interface PswLogin {\n  enable: boolean;\n  tabLabel: string;\n  submitLabel: string;\n}\n\nexport interface ILogin {\n  loginRedirect: string;\n  left: any;\n  phoneLogin: PhoneLogin;\n  pswLogin: PswLogin;\n}\n\nexport interface Github {\n  repos: string;\n  api: string;\n}\n\nexport interface IApiUrl {\n  loginPath: string;\n  logoutPath: string;\n  userIdGetPath: string;\n  nodeGetPath: string;\n  commentGetPath: string;\n  paymentPath: string;\n  taxonomyGetPath: string;\n  flaggingGetPath: string;\n  userGetPath: string;\n  yushan: string;\n  search: any;\n  github: Github;\n}\n\nexport interface Form {\n  label: string;\n  key: string;\n  value: number;\n  type: string;\n  placeholder: string;\n  controlType: string;\n  appearance: string;\n  errorMes: string;\n  tooltip: string;\n  matTooltipPosition: string;\n  suffix: string;\n}\n\nexport interface FontSize {\n  enable: boolean;\n  form: Form[];\n}\n\nexport interface Comment {\n  enable: boolean;\n}\n\nexport interface IArticle {\n  fontSize: FontSize;\n  comment: Comment;\n}\n\nexport interface Modules {\n  toolbar: any[][];\n}\n\nexport interface IEditor {\n  modules: Modules;\n}\n\nexport interface Icon {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Flag {\n  icon: Icon;\n  enable: boolean;\n}\n\nexport interface Button {\n  icon: string;\n  label: string;\n}\n\nexport interface Share {\n  button: Button;\n  enable: boolean;\n}\n\nexport interface Icon2 {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Download {\n  label: string;\n  icon: Icon2;\n  enable: boolean;\n}\n\nexport interface IActions {\n  flag: Flag;\n  share: Share;\n  download: Download;\n}\n\nexport interface Params {\n  width: string;\n  path: string;\n  first: boolean;\n}\n\nexport interface Title {\n  label: string;\n  style: string;\n}\n\nexport interface Action {\n  type: string;\n  label: string;\n  color: string;\n  href: string;\n}\n\nexport interface Text {\n  title: Title;\n  spacer: string;\n  body: string;\n  actions: Action[];\n  actionsAlign: string;\n}\n\nexport interface ForceDialog {\n  params: Params;\n  text: Text;\n}\n\nexport interface IDialog {\n  forceDialog: ForceDialog;\n}\n\nexport interface User {\n  banner: string;\n}\nexport interface Action2 {\n  type: string;\n  label: string;\n  href: string;\n  color: string;\n}\n\nexport interface Commerce {\n  vip: string;\n  payNode: string;\n  dialog: {\n    spacer: string;\n    title: {\n      label: string;\n      style: string;\n    };\n    body: string;\n    actionsAlign: string;\n    actions: Action2[];\n  };\n}\n\nexport interface GoogleAnalytics {\n  id: string;\n}\n\nexport interface Guard {\n  authGuard: boolean;\n}\n\nexport interface IPage {\n  meta?: any[];\n  config?: any;\n  title: string;\n  body: any[];\n}\n\nexport interface ICommerce {\n  vip: string;\n  payNode: string;\n  dialog: IText;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 216
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Guard",
            "id": "interface-Guard-c82f202a5a68c4f13467fc5c27f54faab6b210ed140ec058c8e5821fb72690d098a086d2b6a071c0a089a378b7c31ba3f7a26e2c785d3b0180786fd33b1debca",
            "file": "src/app/core/mobx/IAppConfig.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IText } from '../interface/widgets/IText';\nimport { IAmap } from '../interface/IAmap';\nexport interface IAppConfig {\n  defTheme: string;\n  config?: ICoreConfig | null;\n  page: IPage;\n}\nexport interface ICoreConfig {\n  defaultTheme: string;\n  theme: ITheme[];\n  login: ILogin;\n  defaultLogo: string;\n  defaultAvatar: string;\n  defaultThumb: string;\n  amap: IAmap;\n  apiUrl: IApiUrl;\n  loading: boolean;\n  article: IArticle;\n  editor: IEditor;\n  actions: IActions;\n  dialog: IDialog;\n  user: User;\n  commerce: Commerce;\n  googleAnalytics: GoogleAnalytics;\n  guard: Guard;\n  access: {\n    check: true;\n  };\n  qidian: {\n    id: string;\n    key: string;\n  };\n}\nexport interface ITheme {\n  name: string;\n  style: string;\n  icon?: string;\n  svgIcon?: string;\n}\n\nexport interface PhoneLogin {\n  enable: boolean;\n  tabLabel: string;\n  leftTime: number;\n  submitLabel: string;\n  error: string;\n}\n\nexport interface PswLogin {\n  enable: boolean;\n  tabLabel: string;\n  submitLabel: string;\n}\n\nexport interface ILogin {\n  loginRedirect: string;\n  left: any;\n  phoneLogin: PhoneLogin;\n  pswLogin: PswLogin;\n}\n\nexport interface Github {\n  repos: string;\n  api: string;\n}\n\nexport interface IApiUrl {\n  loginPath: string;\n  logoutPath: string;\n  userIdGetPath: string;\n  nodeGetPath: string;\n  commentGetPath: string;\n  paymentPath: string;\n  taxonomyGetPath: string;\n  flaggingGetPath: string;\n  userGetPath: string;\n  yushan: string;\n  search: any;\n  github: Github;\n}\n\nexport interface Form {\n  label: string;\n  key: string;\n  value: number;\n  type: string;\n  placeholder: string;\n  controlType: string;\n  appearance: string;\n  errorMes: string;\n  tooltip: string;\n  matTooltipPosition: string;\n  suffix: string;\n}\n\nexport interface FontSize {\n  enable: boolean;\n  form: Form[];\n}\n\nexport interface Comment {\n  enable: boolean;\n}\n\nexport interface IArticle {\n  fontSize: FontSize;\n  comment: Comment;\n}\n\nexport interface Modules {\n  toolbar: any[][];\n}\n\nexport interface IEditor {\n  modules: Modules;\n}\n\nexport interface Icon {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Flag {\n  icon: Icon;\n  enable: boolean;\n}\n\nexport interface Button {\n  icon: string;\n  label: string;\n}\n\nexport interface Share {\n  button: Button;\n  enable: boolean;\n}\n\nexport interface Icon2 {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Download {\n  label: string;\n  icon: Icon2;\n  enable: boolean;\n}\n\nexport interface IActions {\n  flag: Flag;\n  share: Share;\n  download: Download;\n}\n\nexport interface Params {\n  width: string;\n  path: string;\n  first: boolean;\n}\n\nexport interface Title {\n  label: string;\n  style: string;\n}\n\nexport interface Action {\n  type: string;\n  label: string;\n  color: string;\n  href: string;\n}\n\nexport interface Text {\n  title: Title;\n  spacer: string;\n  body: string;\n  actions: Action[];\n  actionsAlign: string;\n}\n\nexport interface ForceDialog {\n  params: Params;\n  text: Text;\n}\n\nexport interface IDialog {\n  forceDialog: ForceDialog;\n}\n\nexport interface User {\n  banner: string;\n}\nexport interface Action2 {\n  type: string;\n  label: string;\n  href: string;\n  color: string;\n}\n\nexport interface Commerce {\n  vip: string;\n  payNode: string;\n  dialog: {\n    spacer: string;\n    title: {\n      label: string;\n      style: string;\n    };\n    body: string;\n    actionsAlign: string;\n    actions: Action2[];\n  };\n}\n\nexport interface GoogleAnalytics {\n  id: string;\n}\n\nexport interface Guard {\n  authGuard: boolean;\n}\n\nexport interface IPage {\n  meta?: any[];\n  config?: any;\n  title: string;\n  body: any[];\n}\n\nexport interface ICommerce {\n  vip: string;\n  payNode: string;\n  dialog: IText;\n}\n",
            "properties": [
                {
                    "name": "authGuard",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 220
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IAction",
            "id": "interface-IAction-8439a0fee9f8a15147411a931c5ecbb5f1ff4199c174b25aeb3ae902644b424ea9a3c17c6ac394561885e76af538e62b5bf59d7655ddcf76de9cbafbc673863d",
            "file": "src/app/core/interface/IForm.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IAction {\n  label: string;\n  type?: string;\n  color: string;\n  params: IActionParams;\n}\n\nexport interface IActionParams {\n  type: string;\n  snackMes?: string;\n}\n",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "params",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IActionParams",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IActionParams",
            "id": "interface-IActionParams-8439a0fee9f8a15147411a931c5ecbb5f1ff4199c174b25aeb3ae902644b424ea9a3c17c6ac394561885e76af538e62b5bf59d7655ddcf76de9cbafbc673863d",
            "file": "src/app/core/interface/IForm.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IAction {\n  label: string;\n  type?: string;\n  color: string;\n  params: IActionParams;\n}\n\nexport interface IActionParams {\n  type: string;\n  snackMes?: string;\n}\n",
            "properties": [
                {
                    "name": "snackMes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IActions",
            "id": "interface-IActions-c82f202a5a68c4f13467fc5c27f54faab6b210ed140ec058c8e5821fb72690d098a086d2b6a071c0a089a378b7c31ba3f7a26e2c785d3b0180786fd33b1debca",
            "file": "src/app/core/mobx/IAppConfig.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IText } from '../interface/widgets/IText';\nimport { IAmap } from '../interface/IAmap';\nexport interface IAppConfig {\n  defTheme: string;\n  config?: ICoreConfig | null;\n  page: IPage;\n}\nexport interface ICoreConfig {\n  defaultTheme: string;\n  theme: ITheme[];\n  login: ILogin;\n  defaultLogo: string;\n  defaultAvatar: string;\n  defaultThumb: string;\n  amap: IAmap;\n  apiUrl: IApiUrl;\n  loading: boolean;\n  article: IArticle;\n  editor: IEditor;\n  actions: IActions;\n  dialog: IDialog;\n  user: User;\n  commerce: Commerce;\n  googleAnalytics: GoogleAnalytics;\n  guard: Guard;\n  access: {\n    check: true;\n  };\n  qidian: {\n    id: string;\n    key: string;\n  };\n}\nexport interface ITheme {\n  name: string;\n  style: string;\n  icon?: string;\n  svgIcon?: string;\n}\n\nexport interface PhoneLogin {\n  enable: boolean;\n  tabLabel: string;\n  leftTime: number;\n  submitLabel: string;\n  error: string;\n}\n\nexport interface PswLogin {\n  enable: boolean;\n  tabLabel: string;\n  submitLabel: string;\n}\n\nexport interface ILogin {\n  loginRedirect: string;\n  left: any;\n  phoneLogin: PhoneLogin;\n  pswLogin: PswLogin;\n}\n\nexport interface Github {\n  repos: string;\n  api: string;\n}\n\nexport interface IApiUrl {\n  loginPath: string;\n  logoutPath: string;\n  userIdGetPath: string;\n  nodeGetPath: string;\n  commentGetPath: string;\n  paymentPath: string;\n  taxonomyGetPath: string;\n  flaggingGetPath: string;\n  userGetPath: string;\n  yushan: string;\n  search: any;\n  github: Github;\n}\n\nexport interface Form {\n  label: string;\n  key: string;\n  value: number;\n  type: string;\n  placeholder: string;\n  controlType: string;\n  appearance: string;\n  errorMes: string;\n  tooltip: string;\n  matTooltipPosition: string;\n  suffix: string;\n}\n\nexport interface FontSize {\n  enable: boolean;\n  form: Form[];\n}\n\nexport interface Comment {\n  enable: boolean;\n}\n\nexport interface IArticle {\n  fontSize: FontSize;\n  comment: Comment;\n}\n\nexport interface Modules {\n  toolbar: any[][];\n}\n\nexport interface IEditor {\n  modules: Modules;\n}\n\nexport interface Icon {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Flag {\n  icon: Icon;\n  enable: boolean;\n}\n\nexport interface Button {\n  icon: string;\n  label: string;\n}\n\nexport interface Share {\n  button: Button;\n  enable: boolean;\n}\n\nexport interface Icon2 {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Download {\n  label: string;\n  icon: Icon2;\n  enable: boolean;\n}\n\nexport interface IActions {\n  flag: Flag;\n  share: Share;\n  download: Download;\n}\n\nexport interface Params {\n  width: string;\n  path: string;\n  first: boolean;\n}\n\nexport interface Title {\n  label: string;\n  style: string;\n}\n\nexport interface Action {\n  type: string;\n  label: string;\n  color: string;\n  href: string;\n}\n\nexport interface Text {\n  title: Title;\n  spacer: string;\n  body: string;\n  actions: Action[];\n  actionsAlign: string;\n}\n\nexport interface ForceDialog {\n  params: Params;\n  text: Text;\n}\n\nexport interface IDialog {\n  forceDialog: ForceDialog;\n}\n\nexport interface User {\n  banner: string;\n}\nexport interface Action2 {\n  type: string;\n  label: string;\n  href: string;\n  color: string;\n}\n\nexport interface Commerce {\n  vip: string;\n  payNode: string;\n  dialog: {\n    spacer: string;\n    title: {\n      label: string;\n      style: string;\n    };\n    body: string;\n    actionsAlign: string;\n    actions: Action2[];\n  };\n}\n\nexport interface GoogleAnalytics {\n  id: string;\n}\n\nexport interface Guard {\n  authGuard: boolean;\n}\n\nexport interface IPage {\n  meta?: any[];\n  config?: any;\n  title: string;\n  body: any[];\n}\n\nexport interface ICommerce {\n  vip: string;\n  payNode: string;\n  dialog: IText;\n}\n",
            "properties": [
                {
                    "name": "download",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Download",
                    "optional": false,
                    "description": "",
                    "line": 152
                },
                {
                    "name": "flag",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Flag",
                    "optional": false,
                    "description": "",
                    "line": 150
                },
                {
                    "name": "share",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Share",
                    "optional": false,
                    "description": "",
                    "line": 151
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IAmap",
            "id": "interface-IAmap-b96de4de903935d4d02e06292b50c76e1fd26013b1f2dc648fe64bc539f36f997665cb116100bbd41761f8c067443a3bcd19c6c8670c87a57a6daab37174233e",
            "file": "src/app/core/interface/IAmap.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IAmap {\n  key: string;\n  version: string;\n  plugins: string[];\n  city: string;\n  zoom: number;\n  center: number[];\n  mapStyle: {\n    [key: string]: string;\n  };\n  features: string[];\n}\n\nexport interface IMark {\n  index: number;\n  marker: string;\n  item?: any;\n}\n",
            "properties": [
                {
                    "name": "center",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "city",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "features",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "mapStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "plugins",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "zoom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IApiUrl",
            "id": "interface-IApiUrl-c82f202a5a68c4f13467fc5c27f54faab6b210ed140ec058c8e5821fb72690d098a086d2b6a071c0a089a378b7c31ba3f7a26e2c785d3b0180786fd33b1debca",
            "file": "src/app/core/mobx/IAppConfig.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IText } from '../interface/widgets/IText';\nimport { IAmap } from '../interface/IAmap';\nexport interface IAppConfig {\n  defTheme: string;\n  config?: ICoreConfig | null;\n  page: IPage;\n}\nexport interface ICoreConfig {\n  defaultTheme: string;\n  theme: ITheme[];\n  login: ILogin;\n  defaultLogo: string;\n  defaultAvatar: string;\n  defaultThumb: string;\n  amap: IAmap;\n  apiUrl: IApiUrl;\n  loading: boolean;\n  article: IArticle;\n  editor: IEditor;\n  actions: IActions;\n  dialog: IDialog;\n  user: User;\n  commerce: Commerce;\n  googleAnalytics: GoogleAnalytics;\n  guard: Guard;\n  access: {\n    check: true;\n  };\n  qidian: {\n    id: string;\n    key: string;\n  };\n}\nexport interface ITheme {\n  name: string;\n  style: string;\n  icon?: string;\n  svgIcon?: string;\n}\n\nexport interface PhoneLogin {\n  enable: boolean;\n  tabLabel: string;\n  leftTime: number;\n  submitLabel: string;\n  error: string;\n}\n\nexport interface PswLogin {\n  enable: boolean;\n  tabLabel: string;\n  submitLabel: string;\n}\n\nexport interface ILogin {\n  loginRedirect: string;\n  left: any;\n  phoneLogin: PhoneLogin;\n  pswLogin: PswLogin;\n}\n\nexport interface Github {\n  repos: string;\n  api: string;\n}\n\nexport interface IApiUrl {\n  loginPath: string;\n  logoutPath: string;\n  userIdGetPath: string;\n  nodeGetPath: string;\n  commentGetPath: string;\n  paymentPath: string;\n  taxonomyGetPath: string;\n  flaggingGetPath: string;\n  userGetPath: string;\n  yushan: string;\n  search: any;\n  github: Github;\n}\n\nexport interface Form {\n  label: string;\n  key: string;\n  value: number;\n  type: string;\n  placeholder: string;\n  controlType: string;\n  appearance: string;\n  errorMes: string;\n  tooltip: string;\n  matTooltipPosition: string;\n  suffix: string;\n}\n\nexport interface FontSize {\n  enable: boolean;\n  form: Form[];\n}\n\nexport interface Comment {\n  enable: boolean;\n}\n\nexport interface IArticle {\n  fontSize: FontSize;\n  comment: Comment;\n}\n\nexport interface Modules {\n  toolbar: any[][];\n}\n\nexport interface IEditor {\n  modules: Modules;\n}\n\nexport interface Icon {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Flag {\n  icon: Icon;\n  enable: boolean;\n}\n\nexport interface Button {\n  icon: string;\n  label: string;\n}\n\nexport interface Share {\n  button: Button;\n  enable: boolean;\n}\n\nexport interface Icon2 {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Download {\n  label: string;\n  icon: Icon2;\n  enable: boolean;\n}\n\nexport interface IActions {\n  flag: Flag;\n  share: Share;\n  download: Download;\n}\n\nexport interface Params {\n  width: string;\n  path: string;\n  first: boolean;\n}\n\nexport interface Title {\n  label: string;\n  style: string;\n}\n\nexport interface Action {\n  type: string;\n  label: string;\n  color: string;\n  href: string;\n}\n\nexport interface Text {\n  title: Title;\n  spacer: string;\n  body: string;\n  actions: Action[];\n  actionsAlign: string;\n}\n\nexport interface ForceDialog {\n  params: Params;\n  text: Text;\n}\n\nexport interface IDialog {\n  forceDialog: ForceDialog;\n}\n\nexport interface User {\n  banner: string;\n}\nexport interface Action2 {\n  type: string;\n  label: string;\n  href: string;\n  color: string;\n}\n\nexport interface Commerce {\n  vip: string;\n  payNode: string;\n  dialog: {\n    spacer: string;\n    title: {\n      label: string;\n      style: string;\n    };\n    body: string;\n    actionsAlign: string;\n    actions: Action2[];\n  };\n}\n\nexport interface GoogleAnalytics {\n  id: string;\n}\n\nexport interface Guard {\n  authGuard: boolean;\n}\n\nexport interface IPage {\n  meta?: any[];\n  config?: any;\n  title: string;\n  body: any[];\n}\n\nexport interface ICommerce {\n  vip: string;\n  payNode: string;\n  dialog: IText;\n}\n",
            "properties": [
                {
                    "name": "commentGetPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "flaggingGetPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "github",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Github",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "loginPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "logoutPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "nodeGetPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "paymentPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "search",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "taxonomyGetPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "userGetPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "userIdGetPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "yushan",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 77
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IAppConfig",
            "id": "interface-IAppConfig-c82f202a5a68c4f13467fc5c27f54faab6b210ed140ec058c8e5821fb72690d098a086d2b6a071c0a089a378b7c31ba3f7a26e2c785d3b0180786fd33b1debca",
            "file": "src/app/core/mobx/IAppConfig.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IText } from '../interface/widgets/IText';\nimport { IAmap } from '../interface/IAmap';\nexport interface IAppConfig {\n  defTheme: string;\n  config?: ICoreConfig | null;\n  page: IPage;\n}\nexport interface ICoreConfig {\n  defaultTheme: string;\n  theme: ITheme[];\n  login: ILogin;\n  defaultLogo: string;\n  defaultAvatar: string;\n  defaultThumb: string;\n  amap: IAmap;\n  apiUrl: IApiUrl;\n  loading: boolean;\n  article: IArticle;\n  editor: IEditor;\n  actions: IActions;\n  dialog: IDialog;\n  user: User;\n  commerce: Commerce;\n  googleAnalytics: GoogleAnalytics;\n  guard: Guard;\n  access: {\n    check: true;\n  };\n  qidian: {\n    id: string;\n    key: string;\n  };\n}\nexport interface ITheme {\n  name: string;\n  style: string;\n  icon?: string;\n  svgIcon?: string;\n}\n\nexport interface PhoneLogin {\n  enable: boolean;\n  tabLabel: string;\n  leftTime: number;\n  submitLabel: string;\n  error: string;\n}\n\nexport interface PswLogin {\n  enable: boolean;\n  tabLabel: string;\n  submitLabel: string;\n}\n\nexport interface ILogin {\n  loginRedirect: string;\n  left: any;\n  phoneLogin: PhoneLogin;\n  pswLogin: PswLogin;\n}\n\nexport interface Github {\n  repos: string;\n  api: string;\n}\n\nexport interface IApiUrl {\n  loginPath: string;\n  logoutPath: string;\n  userIdGetPath: string;\n  nodeGetPath: string;\n  commentGetPath: string;\n  paymentPath: string;\n  taxonomyGetPath: string;\n  flaggingGetPath: string;\n  userGetPath: string;\n  yushan: string;\n  search: any;\n  github: Github;\n}\n\nexport interface Form {\n  label: string;\n  key: string;\n  value: number;\n  type: string;\n  placeholder: string;\n  controlType: string;\n  appearance: string;\n  errorMes: string;\n  tooltip: string;\n  matTooltipPosition: string;\n  suffix: string;\n}\n\nexport interface FontSize {\n  enable: boolean;\n  form: Form[];\n}\n\nexport interface Comment {\n  enable: boolean;\n}\n\nexport interface IArticle {\n  fontSize: FontSize;\n  comment: Comment;\n}\n\nexport interface Modules {\n  toolbar: any[][];\n}\n\nexport interface IEditor {\n  modules: Modules;\n}\n\nexport interface Icon {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Flag {\n  icon: Icon;\n  enable: boolean;\n}\n\nexport interface Button {\n  icon: string;\n  label: string;\n}\n\nexport interface Share {\n  button: Button;\n  enable: boolean;\n}\n\nexport interface Icon2 {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Download {\n  label: string;\n  icon: Icon2;\n  enable: boolean;\n}\n\nexport interface IActions {\n  flag: Flag;\n  share: Share;\n  download: Download;\n}\n\nexport interface Params {\n  width: string;\n  path: string;\n  first: boolean;\n}\n\nexport interface Title {\n  label: string;\n  style: string;\n}\n\nexport interface Action {\n  type: string;\n  label: string;\n  color: string;\n  href: string;\n}\n\nexport interface Text {\n  title: Title;\n  spacer: string;\n  body: string;\n  actions: Action[];\n  actionsAlign: string;\n}\n\nexport interface ForceDialog {\n  params: Params;\n  text: Text;\n}\n\nexport interface IDialog {\n  forceDialog: ForceDialog;\n}\n\nexport interface User {\n  banner: string;\n}\nexport interface Action2 {\n  type: string;\n  label: string;\n  href: string;\n  color: string;\n}\n\nexport interface Commerce {\n  vip: string;\n  payNode: string;\n  dialog: {\n    spacer: string;\n    title: {\n      label: string;\n      style: string;\n    };\n    body: string;\n    actionsAlign: string;\n    actions: Action2[];\n  };\n}\n\nexport interface GoogleAnalytics {\n  id: string;\n}\n\nexport interface Guard {\n  authGuard: boolean;\n}\n\nexport interface IPage {\n  meta?: any[];\n  config?: any;\n  title: string;\n  body: any[];\n}\n\nexport interface ICommerce {\n  vip: string;\n  payNode: string;\n  dialog: IText;\n}\n",
            "properties": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICoreConfig | null",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "defTheme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPage",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IArticle",
            "id": "interface-IArticle-c82f202a5a68c4f13467fc5c27f54faab6b210ed140ec058c8e5821fb72690d098a086d2b6a071c0a089a378b7c31ba3f7a26e2c785d3b0180786fd33b1debca",
            "file": "src/app/core/mobx/IAppConfig.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IText } from '../interface/widgets/IText';\nimport { IAmap } from '../interface/IAmap';\nexport interface IAppConfig {\n  defTheme: string;\n  config?: ICoreConfig | null;\n  page: IPage;\n}\nexport interface ICoreConfig {\n  defaultTheme: string;\n  theme: ITheme[];\n  login: ILogin;\n  defaultLogo: string;\n  defaultAvatar: string;\n  defaultThumb: string;\n  amap: IAmap;\n  apiUrl: IApiUrl;\n  loading: boolean;\n  article: IArticle;\n  editor: IEditor;\n  actions: IActions;\n  dialog: IDialog;\n  user: User;\n  commerce: Commerce;\n  googleAnalytics: GoogleAnalytics;\n  guard: Guard;\n  access: {\n    check: true;\n  };\n  qidian: {\n    id: string;\n    key: string;\n  };\n}\nexport interface ITheme {\n  name: string;\n  style: string;\n  icon?: string;\n  svgIcon?: string;\n}\n\nexport interface PhoneLogin {\n  enable: boolean;\n  tabLabel: string;\n  leftTime: number;\n  submitLabel: string;\n  error: string;\n}\n\nexport interface PswLogin {\n  enable: boolean;\n  tabLabel: string;\n  submitLabel: string;\n}\n\nexport interface ILogin {\n  loginRedirect: string;\n  left: any;\n  phoneLogin: PhoneLogin;\n  pswLogin: PswLogin;\n}\n\nexport interface Github {\n  repos: string;\n  api: string;\n}\n\nexport interface IApiUrl {\n  loginPath: string;\n  logoutPath: string;\n  userIdGetPath: string;\n  nodeGetPath: string;\n  commentGetPath: string;\n  paymentPath: string;\n  taxonomyGetPath: string;\n  flaggingGetPath: string;\n  userGetPath: string;\n  yushan: string;\n  search: any;\n  github: Github;\n}\n\nexport interface Form {\n  label: string;\n  key: string;\n  value: number;\n  type: string;\n  placeholder: string;\n  controlType: string;\n  appearance: string;\n  errorMes: string;\n  tooltip: string;\n  matTooltipPosition: string;\n  suffix: string;\n}\n\nexport interface FontSize {\n  enable: boolean;\n  form: Form[];\n}\n\nexport interface Comment {\n  enable: boolean;\n}\n\nexport interface IArticle {\n  fontSize: FontSize;\n  comment: Comment;\n}\n\nexport interface Modules {\n  toolbar: any[][];\n}\n\nexport interface IEditor {\n  modules: Modules;\n}\n\nexport interface Icon {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Flag {\n  icon: Icon;\n  enable: boolean;\n}\n\nexport interface Button {\n  icon: string;\n  label: string;\n}\n\nexport interface Share {\n  button: Button;\n  enable: boolean;\n}\n\nexport interface Icon2 {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Download {\n  label: string;\n  icon: Icon2;\n  enable: boolean;\n}\n\nexport interface IActions {\n  flag: Flag;\n  share: Share;\n  download: Download;\n}\n\nexport interface Params {\n  width: string;\n  path: string;\n  first: boolean;\n}\n\nexport interface Title {\n  label: string;\n  style: string;\n}\n\nexport interface Action {\n  type: string;\n  label: string;\n  color: string;\n  href: string;\n}\n\nexport interface Text {\n  title: Title;\n  spacer: string;\n  body: string;\n  actions: Action[];\n  actionsAlign: string;\n}\n\nexport interface ForceDialog {\n  params: Params;\n  text: Text;\n}\n\nexport interface IDialog {\n  forceDialog: ForceDialog;\n}\n\nexport interface User {\n  banner: string;\n}\nexport interface Action2 {\n  type: string;\n  label: string;\n  href: string;\n  color: string;\n}\n\nexport interface Commerce {\n  vip: string;\n  payNode: string;\n  dialog: {\n    spacer: string;\n    title: {\n      label: string;\n      style: string;\n    };\n    body: string;\n    actionsAlign: string;\n    actions: Action2[];\n  };\n}\n\nexport interface GoogleAnalytics {\n  id: string;\n}\n\nexport interface Guard {\n  authGuard: boolean;\n}\n\nexport interface IPage {\n  meta?: any[];\n  config?: any;\n  title: string;\n  body: any[];\n}\n\nexport interface ICommerce {\n  vip: string;\n  payNode: string;\n  dialog: IText;\n}\n",
            "properties": [
                {
                    "name": "comment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Comment",
                    "optional": false,
                    "description": "",
                    "line": 107
                },
                {
                    "name": "fontSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FontSize",
                    "optional": false,
                    "description": "",
                    "line": 106
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IArticleAccess",
            "id": "interface-IArticleAccess-78465b785f855d7a6866675ad96b5c2683d258d07eea73c3f1c8db56d99aa005f8a60a19f03e33c0ce7f9901a9944e65523d552a263963690998165fe763e65b",
            "file": "src/app/core/interface/node/IArticle.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IArticleAccess {\n  canAccess: boolean;\n  isReqRule: boolean;\n  isPayed: boolean;\n  reqMoney: number;\n  payUrl: string;\n}\n",
            "properties": [
                {
                    "name": "canAccess",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "isPayed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "isReqRule",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "payUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "reqMoney",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IBaseNode",
            "id": "interface-IBaseNode-aecaca9f04241adba4e4dcdaa6c15701a3c360bfb6be39bd44169b53d3159ace2c85d1d4dc399c1df2beade066afb6ece978f5f9e34b99856579c3b99146522d",
            "file": "src/app/core/interface/node/INode.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IImg } from '@core/interface/widgets/IImg';\nimport { QuillModule } from 'ngx-quill';\nexport interface IBaseNode {\n  title: string;\n  body: string;\n  banner?: any;\n  meta?: any[];\n  params: {\n    pay?: {\n      money: number;\n    };\n    require_rule?: string[];\n    comment: ICommentParams;\n  };\n  editor?: {\n    title: any;\n    height: string;\n    modules: QuillModule;\n    placeholder: string;\n    action: any;\n    succes: any;\n  };\n  comment?: ICommentConfig;\n  actions: any[];\n  bottom: any[];\n  sidebar?: any[];\n}\n\nexport interface ICommentParams {\n  type: string;\n  id?: string;\n  attributes: {\n    entity_type?: string;\n    field_name?: string;\n    comment_body: {\n      value: any;\n      format: 'full_html' | 'plain_text';\n    };\n  };\n  relationships: {\n    comment_type?: {\n      data: {\n        type: string;\n        id: string;\n      };\n    };\n    entity_id?: {\n      data: {\n        type: string;\n        id: string;\n      };\n    };\n    uid?: {\n      data: {\n        type: string;\n        id: string;\n      };\n    };\n  };\n}\n\nexport interface ICommentContent {\n  author: {\n    img: IImg;\n    id: string;\n    title: string;\n    subTitle: string | null;\n    align: string;\n  };\n  time: string;\n  id: string;\n  content: string;\n  child: ICommentContent[] | [];\n  level: number;\n}\n\nexport interface ICommentConfig {\n  actions: string[];\n  title: boolean;\n}\n\nexport interface IQuestion extends IBaseNode {\n  topic: any[];\n}\n\nexport interface ICase extends IBaseNode {\n  date: any[];\n  block: any[];\n  form: any[];\n}\n\nexport interface ICasePrams {\n  transaction_level: 'general' | 'important' | 'exigence';\n  case_procedure: string;\n}\n",
            "properties": [
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "banner",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "body",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "bottom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "comment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICommentConfig",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "editor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "meta",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "params",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "sidebar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IBg",
            "id": "interface-IBg-965e01d0126361061e2f158c2b6fc4fe745e89381a6cab2c774d34142f3c6be36c358c27ec452c3a824d7409893ad11303e9560999d6f8af48e1934caace92a8",
            "file": "src/app/core/interface/widgets/IBg.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IBg {\n  classes: string;\n  style?: object;\n}\n",
            "properties": [
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IBgImg",
            "id": "interface-IBgImg-b9da702a685f5d630a66ac91c00181c4d715f62f228e4cc500baf4204e8550141312bf65c1458903b4232cb0bd269df681004ffd50217fb650b71033700e87eb",
            "file": "src/app/core/interface/widgets/IBgImg.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IImg } from './IImg';\nexport interface IBgImg {\n  classes: string;\n  img: IImg;\n}\n",
            "properties": [
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "img",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IImg",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IBox",
            "id": "interface-IBox-489bfc1f1cf90136e700b4cca8ad62d774fc19bacf91ce1320e9bf0cdf8f92ea87b5723af8de0eeb2fe796216bebca916a5da0fae74c4d85e245b6d0e0638e2b",
            "file": "src/app/core/interface/widgets/IBox.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IIcon } from './IIcon';\nimport { IImg } from './IImg';\nimport { ILink } from './ILink';\nexport interface IBox {\n  style: string;\n  icon?: IIcon;\n  img: IImg;\n  title: ILink;\n  content?: any;\n  more?: ILink;\n}\n",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIcon",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "img",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IImg",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "more",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILink",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILink",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IBreadcrumb",
            "id": "interface-IBreadcrumb-18fb1b4b6ed3637d8d76cacd40241f5b6ce1920d3288a8a1d5bb9adbf2d24922194787a73b9abb860f8c7a0ed543f4daf5b98c3f2c01e19b6e6a860692fd18ff",
            "file": "src/app/core/interface/widgets/IBreadcrumb.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IBreadcrumb {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        },
        {
            "name": "IBtnAnimate",
            "id": "interface-IBtnAnimate-1468aceca4ca3d92d28ef2a5900e4e58c8d5d5a4a85eabe145a15a4f40c5c88c1b79b4f02a146bfe9d487f10565ff76905e57fd45712d15034217b44061e6dfb",
            "file": "src/app/core/interface/widgets/IBtnAnimate.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IBtnAnimate {\n  style: any;\n  href: string;\n  icon: string;\n  label: string;\n}\n",
            "properties": [
                {
                    "name": "href",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ICard",
            "id": "interface-ICard-614684f48da88bdc2a6129f6143a4625743cd4b703d0c82aec1cc9c61fbb37358df7908de458bbc66dc7333f81c76a52d65fae2072bee467b43f42cc254f5a90",
            "file": "src/app/uiux/widgets/IWidgets.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IImg } from '@core/interface/widgets/IImg';\nimport { ILink } from '@core/interface/widgets/ILink';\nimport { IIcon } from '../../core/interface/widgets/IIcon';\n\nexport interface ICard {\n  title?: string;\n  subTitle?: string;\n  avatar?: IImg;\n  body?: any;\n  classes?: any;\n  img?: {\n    src: string;\n    alt?: string;\n    hostClasses?: any;\n    classes?: any;\n  };\n  header: {\n    avatar: IImg;\n    title: string;\n    subTitle: string;\n    icon: IIcon;\n    meta: IMeta[];\n  };\n  footer: {\n    meta: IMeta[];\n  };\n  carousel?: any;\n  feature?: any;\n  overlay?: any[];\n  link: ILink;\n  actions?: any;\n  progressBar: {\n    mode: 'determinate' | 'indeterminate' | 'buffer' | 'query';\n    value: number;\n  };\n}\n\nexport interface IMeta {\n  label: string;\n  value: string;\n}\n\nexport interface IInlineLightbox {\n  label: string[];\n  elements: ILightboxElement[];\n}\n\nexport interface ILightboxElement {\n  src: string;\n  caption: string;\n  thumb: string;\n}\n\nexport interface IDynamicTable {\n  header: {\n    label: string;\n    key: string;\n    classes?: string;\n    style?: object;\n    dialog?: {\n      shorten: number;\n      label: string;\n    };\n  }[];\n  elements: any[];\n}\n",
            "properties": [
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "avatar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IImg",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "body",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "carousel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "feature",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "footer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "img",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILink",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "overlay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "progressBar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "subTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ICase",
            "id": "interface-ICase-aecaca9f04241adba4e4dcdaa6c15701a3c360bfb6be39bd44169b53d3159ace2c85d1d4dc399c1df2beade066afb6ece978f5f9e34b99856579c3b99146522d",
            "file": "src/app/core/interface/node/INode.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IImg } from '@core/interface/widgets/IImg';\nimport { QuillModule } from 'ngx-quill';\nexport interface IBaseNode {\n  title: string;\n  body: string;\n  banner?: any;\n  meta?: any[];\n  params: {\n    pay?: {\n      money: number;\n    };\n    require_rule?: string[];\n    comment: ICommentParams;\n  };\n  editor?: {\n    title: any;\n    height: string;\n    modules: QuillModule;\n    placeholder: string;\n    action: any;\n    succes: any;\n  };\n  comment?: ICommentConfig;\n  actions: any[];\n  bottom: any[];\n  sidebar?: any[];\n}\n\nexport interface ICommentParams {\n  type: string;\n  id?: string;\n  attributes: {\n    entity_type?: string;\n    field_name?: string;\n    comment_body: {\n      value: any;\n      format: 'full_html' | 'plain_text';\n    };\n  };\n  relationships: {\n    comment_type?: {\n      data: {\n        type: string;\n        id: string;\n      };\n    };\n    entity_id?: {\n      data: {\n        type: string;\n        id: string;\n      };\n    };\n    uid?: {\n      data: {\n        type: string;\n        id: string;\n      };\n    };\n  };\n}\n\nexport interface ICommentContent {\n  author: {\n    img: IImg;\n    id: string;\n    title: string;\n    subTitle: string | null;\n    align: string;\n  };\n  time: string;\n  id: string;\n  content: string;\n  child: ICommentContent[] | [];\n  level: number;\n}\n\nexport interface ICommentConfig {\n  actions: string[];\n  title: boolean;\n}\n\nexport interface IQuestion extends IBaseNode {\n  topic: any[];\n}\n\nexport interface ICase extends IBaseNode {\n  date: any[];\n  block: any[];\n  form: any[];\n}\n\nexport interface ICasePrams {\n  transaction_level: 'general' | 'important' | 'exigence';\n  case_procedure: string;\n}\n",
            "properties": [
                {
                    "name": "block",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 89
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IBaseNode"
        },
        {
            "name": "ICasePrams",
            "id": "interface-ICasePrams-aecaca9f04241adba4e4dcdaa6c15701a3c360bfb6be39bd44169b53d3159ace2c85d1d4dc399c1df2beade066afb6ece978f5f9e34b99856579c3b99146522d",
            "file": "src/app/core/interface/node/INode.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IImg } from '@core/interface/widgets/IImg';\nimport { QuillModule } from 'ngx-quill';\nexport interface IBaseNode {\n  title: string;\n  body: string;\n  banner?: any;\n  meta?: any[];\n  params: {\n    pay?: {\n      money: number;\n    };\n    require_rule?: string[];\n    comment: ICommentParams;\n  };\n  editor?: {\n    title: any;\n    height: string;\n    modules: QuillModule;\n    placeholder: string;\n    action: any;\n    succes: any;\n  };\n  comment?: ICommentConfig;\n  actions: any[];\n  bottom: any[];\n  sidebar?: any[];\n}\n\nexport interface ICommentParams {\n  type: string;\n  id?: string;\n  attributes: {\n    entity_type?: string;\n    field_name?: string;\n    comment_body: {\n      value: any;\n      format: 'full_html' | 'plain_text';\n    };\n  };\n  relationships: {\n    comment_type?: {\n      data: {\n        type: string;\n        id: string;\n      };\n    };\n    entity_id?: {\n      data: {\n        type: string;\n        id: string;\n      };\n    };\n    uid?: {\n      data: {\n        type: string;\n        id: string;\n      };\n    };\n  };\n}\n\nexport interface ICommentContent {\n  author: {\n    img: IImg;\n    id: string;\n    title: string;\n    subTitle: string | null;\n    align: string;\n  };\n  time: string;\n  id: string;\n  content: string;\n  child: ICommentContent[] | [];\n  level: number;\n}\n\nexport interface ICommentConfig {\n  actions: string[];\n  title: boolean;\n}\n\nexport interface IQuestion extends IBaseNode {\n  topic: any[];\n}\n\nexport interface ICase extends IBaseNode {\n  date: any[];\n  block: any[];\n  form: any[];\n}\n\nexport interface ICasePrams {\n  transaction_level: 'general' | 'important' | 'exigence';\n  case_procedure: string;\n}\n",
            "properties": [
                {
                    "name": "case_procedure",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "transaction_level",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"general\" | \"important\" | \"exigence\"",
                    "optional": false,
                    "description": "",
                    "line": 93
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IChipList",
            "id": "interface-IChipList-1cd180bb7464163a171c89275b39598a5676a63d32b18b5499ecb49d912c96a77dbc7137dd5529e83150c8dee5897eddbc084a6570bdc0966977dfed8f533124",
            "file": "src/app/core/interface/widgets/IChipList.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ILink } from './ILink';\n\nexport interface IChipList extends ILink {\n  label: string;\n  color?: string;\n  selected?: boolean;\n}\n",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "ILink"
        },
        {
            "name": "IChipList",
            "id": "interface-IChipList-8df87975257b2ffea9eee3fb54985c45bd4c73b4707013705001fa801680bf4d9144945dbe3becc663002bc827044043d0534d46f7878821202ea1ede4546be0-1",
            "file": "src/app/uiux/combs/node/job/IJob.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IChipList {\n  label: string;\n  color: string;\n}\n\nexport interface IJob {\n  title: string;\n  locality: string;\n  deadline: string;\n  number: number;\n  salary: {\n    from: number,\n    to: number\n  };\n  relate: any;\n}\n",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "IChipList-1"
        },
        {
            "name": "ICommentConfig",
            "id": "interface-ICommentConfig-aecaca9f04241adba4e4dcdaa6c15701a3c360bfb6be39bd44169b53d3159ace2c85d1d4dc399c1df2beade066afb6ece978f5f9e34b99856579c3b99146522d",
            "file": "src/app/core/interface/node/INode.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IImg } from '@core/interface/widgets/IImg';\nimport { QuillModule } from 'ngx-quill';\nexport interface IBaseNode {\n  title: string;\n  body: string;\n  banner?: any;\n  meta?: any[];\n  params: {\n    pay?: {\n      money: number;\n    };\n    require_rule?: string[];\n    comment: ICommentParams;\n  };\n  editor?: {\n    title: any;\n    height: string;\n    modules: QuillModule;\n    placeholder: string;\n    action: any;\n    succes: any;\n  };\n  comment?: ICommentConfig;\n  actions: any[];\n  bottom: any[];\n  sidebar?: any[];\n}\n\nexport interface ICommentParams {\n  type: string;\n  id?: string;\n  attributes: {\n    entity_type?: string;\n    field_name?: string;\n    comment_body: {\n      value: any;\n      format: 'full_html' | 'plain_text';\n    };\n  };\n  relationships: {\n    comment_type?: {\n      data: {\n        type: string;\n        id: string;\n      };\n    };\n    entity_id?: {\n      data: {\n        type: string;\n        id: string;\n      };\n    };\n    uid?: {\n      data: {\n        type: string;\n        id: string;\n      };\n    };\n  };\n}\n\nexport interface ICommentContent {\n  author: {\n    img: IImg;\n    id: string;\n    title: string;\n    subTitle: string | null;\n    align: string;\n  };\n  time: string;\n  id: string;\n  content: string;\n  child: ICommentContent[] | [];\n  level: number;\n}\n\nexport interface ICommentConfig {\n  actions: string[];\n  title: boolean;\n}\n\nexport interface IQuestion extends IBaseNode {\n  topic: any[];\n}\n\nexport interface ICase extends IBaseNode {\n  date: any[];\n  block: any[];\n  form: any[];\n}\n\nexport interface ICasePrams {\n  transaction_level: 'general' | 'important' | 'exigence';\n  case_procedure: string;\n}\n",
            "properties": [
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 79
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ICommentContent",
            "id": "interface-ICommentContent-aecaca9f04241adba4e4dcdaa6c15701a3c360bfb6be39bd44169b53d3159ace2c85d1d4dc399c1df2beade066afb6ece978f5f9e34b99856579c3b99146522d",
            "file": "src/app/core/interface/node/INode.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IImg } from '@core/interface/widgets/IImg';\nimport { QuillModule } from 'ngx-quill';\nexport interface IBaseNode {\n  title: string;\n  body: string;\n  banner?: any;\n  meta?: any[];\n  params: {\n    pay?: {\n      money: number;\n    };\n    require_rule?: string[];\n    comment: ICommentParams;\n  };\n  editor?: {\n    title: any;\n    height: string;\n    modules: QuillModule;\n    placeholder: string;\n    action: any;\n    succes: any;\n  };\n  comment?: ICommentConfig;\n  actions: any[];\n  bottom: any[];\n  sidebar?: any[];\n}\n\nexport interface ICommentParams {\n  type: string;\n  id?: string;\n  attributes: {\n    entity_type?: string;\n    field_name?: string;\n    comment_body: {\n      value: any;\n      format: 'full_html' | 'plain_text';\n    };\n  };\n  relationships: {\n    comment_type?: {\n      data: {\n        type: string;\n        id: string;\n      };\n    };\n    entity_id?: {\n      data: {\n        type: string;\n        id: string;\n      };\n    };\n    uid?: {\n      data: {\n        type: string;\n        id: string;\n      };\n    };\n  };\n}\n\nexport interface ICommentContent {\n  author: {\n    img: IImg;\n    id: string;\n    title: string;\n    subTitle: string | null;\n    align: string;\n  };\n  time: string;\n  id: string;\n  content: string;\n  child: ICommentContent[] | [];\n  level: number;\n}\n\nexport interface ICommentConfig {\n  actions: string[];\n  title: boolean;\n}\n\nexport interface IQuestion extends IBaseNode {\n  topic: any[];\n}\n\nexport interface ICase extends IBaseNode {\n  date: any[];\n  block: any[];\n  form: any[];\n}\n\nexport interface ICasePrams {\n  transaction_level: 'general' | 'important' | 'exigence';\n  case_procedure: string;\n}\n",
            "properties": [
                {
                    "name": "author",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "child",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICommentContent[] | ",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "level",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "time",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 70
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ICommentParams",
            "id": "interface-ICommentParams-aecaca9f04241adba4e4dcdaa6c15701a3c360bfb6be39bd44169b53d3159ace2c85d1d4dc399c1df2beade066afb6ece978f5f9e34b99856579c3b99146522d",
            "file": "src/app/core/interface/node/INode.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IImg } from '@core/interface/widgets/IImg';\nimport { QuillModule } from 'ngx-quill';\nexport interface IBaseNode {\n  title: string;\n  body: string;\n  banner?: any;\n  meta?: any[];\n  params: {\n    pay?: {\n      money: number;\n    };\n    require_rule?: string[];\n    comment: ICommentParams;\n  };\n  editor?: {\n    title: any;\n    height: string;\n    modules: QuillModule;\n    placeholder: string;\n    action: any;\n    succes: any;\n  };\n  comment?: ICommentConfig;\n  actions: any[];\n  bottom: any[];\n  sidebar?: any[];\n}\n\nexport interface ICommentParams {\n  type: string;\n  id?: string;\n  attributes: {\n    entity_type?: string;\n    field_name?: string;\n    comment_body: {\n      value: any;\n      format: 'full_html' | 'plain_text';\n    };\n  };\n  relationships: {\n    comment_type?: {\n      data: {\n        type: string;\n        id: string;\n      };\n    };\n    entity_id?: {\n      data: {\n        type: string;\n        id: string;\n      };\n    };\n    uid?: {\n      data: {\n        type: string;\n        id: string;\n      };\n    };\n  };\n}\n\nexport interface ICommentContent {\n  author: {\n    img: IImg;\n    id: string;\n    title: string;\n    subTitle: string | null;\n    align: string;\n  };\n  time: string;\n  id: string;\n  content: string;\n  child: ICommentContent[] | [];\n  level: number;\n}\n\nexport interface ICommentConfig {\n  actions: string[];\n  title: boolean;\n}\n\nexport interface IQuestion extends IBaseNode {\n  topic: any[];\n}\n\nexport interface ICase extends IBaseNode {\n  date: any[];\n  block: any[];\n  form: any[];\n}\n\nexport interface ICasePrams {\n  transaction_level: 'general' | 'important' | 'exigence';\n  case_procedure: string;\n}\n",
            "properties": [
                {
                    "name": "attributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "relationships",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ICommerce",
            "id": "interface-ICommerce-c82f202a5a68c4f13467fc5c27f54faab6b210ed140ec058c8e5821fb72690d098a086d2b6a071c0a089a378b7c31ba3f7a26e2c785d3b0180786fd33b1debca",
            "file": "src/app/core/mobx/IAppConfig.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IText } from '../interface/widgets/IText';\nimport { IAmap } from '../interface/IAmap';\nexport interface IAppConfig {\n  defTheme: string;\n  config?: ICoreConfig | null;\n  page: IPage;\n}\nexport interface ICoreConfig {\n  defaultTheme: string;\n  theme: ITheme[];\n  login: ILogin;\n  defaultLogo: string;\n  defaultAvatar: string;\n  defaultThumb: string;\n  amap: IAmap;\n  apiUrl: IApiUrl;\n  loading: boolean;\n  article: IArticle;\n  editor: IEditor;\n  actions: IActions;\n  dialog: IDialog;\n  user: User;\n  commerce: Commerce;\n  googleAnalytics: GoogleAnalytics;\n  guard: Guard;\n  access: {\n    check: true;\n  };\n  qidian: {\n    id: string;\n    key: string;\n  };\n}\nexport interface ITheme {\n  name: string;\n  style: string;\n  icon?: string;\n  svgIcon?: string;\n}\n\nexport interface PhoneLogin {\n  enable: boolean;\n  tabLabel: string;\n  leftTime: number;\n  submitLabel: string;\n  error: string;\n}\n\nexport interface PswLogin {\n  enable: boolean;\n  tabLabel: string;\n  submitLabel: string;\n}\n\nexport interface ILogin {\n  loginRedirect: string;\n  left: any;\n  phoneLogin: PhoneLogin;\n  pswLogin: PswLogin;\n}\n\nexport interface Github {\n  repos: string;\n  api: string;\n}\n\nexport interface IApiUrl {\n  loginPath: string;\n  logoutPath: string;\n  userIdGetPath: string;\n  nodeGetPath: string;\n  commentGetPath: string;\n  paymentPath: string;\n  taxonomyGetPath: string;\n  flaggingGetPath: string;\n  userGetPath: string;\n  yushan: string;\n  search: any;\n  github: Github;\n}\n\nexport interface Form {\n  label: string;\n  key: string;\n  value: number;\n  type: string;\n  placeholder: string;\n  controlType: string;\n  appearance: string;\n  errorMes: string;\n  tooltip: string;\n  matTooltipPosition: string;\n  suffix: string;\n}\n\nexport interface FontSize {\n  enable: boolean;\n  form: Form[];\n}\n\nexport interface Comment {\n  enable: boolean;\n}\n\nexport interface IArticle {\n  fontSize: FontSize;\n  comment: Comment;\n}\n\nexport interface Modules {\n  toolbar: any[][];\n}\n\nexport interface IEditor {\n  modules: Modules;\n}\n\nexport interface Icon {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Flag {\n  icon: Icon;\n  enable: boolean;\n}\n\nexport interface Button {\n  icon: string;\n  label: string;\n}\n\nexport interface Share {\n  button: Button;\n  enable: boolean;\n}\n\nexport interface Icon2 {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Download {\n  label: string;\n  icon: Icon2;\n  enable: boolean;\n}\n\nexport interface IActions {\n  flag: Flag;\n  share: Share;\n  download: Download;\n}\n\nexport interface Params {\n  width: string;\n  path: string;\n  first: boolean;\n}\n\nexport interface Title {\n  label: string;\n  style: string;\n}\n\nexport interface Action {\n  type: string;\n  label: string;\n  color: string;\n  href: string;\n}\n\nexport interface Text {\n  title: Title;\n  spacer: string;\n  body: string;\n  actions: Action[];\n  actionsAlign: string;\n}\n\nexport interface ForceDialog {\n  params: Params;\n  text: Text;\n}\n\nexport interface IDialog {\n  forceDialog: ForceDialog;\n}\n\nexport interface User {\n  banner: string;\n}\nexport interface Action2 {\n  type: string;\n  label: string;\n  href: string;\n  color: string;\n}\n\nexport interface Commerce {\n  vip: string;\n  payNode: string;\n  dialog: {\n    spacer: string;\n    title: {\n      label: string;\n      style: string;\n    };\n    body: string;\n    actionsAlign: string;\n    actions: Action2[];\n  };\n}\n\nexport interface GoogleAnalytics {\n  id: string;\n}\n\nexport interface Guard {\n  authGuard: boolean;\n}\n\nexport interface IPage {\n  meta?: any[];\n  config?: any;\n  title: string;\n  body: any[];\n}\n\nexport interface ICommerce {\n  vip: string;\n  payNode: string;\n  dialog: IText;\n}\n",
            "properties": [
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IText",
                    "optional": false,
                    "description": "",
                    "line": 233
                },
                {
                    "name": "payNode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 232
                },
                {
                    "name": "vip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 231
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Icon",
            "id": "interface-Icon-c82f202a5a68c4f13467fc5c27f54faab6b210ed140ec058c8e5821fb72690d098a086d2b6a071c0a089a378b7c31ba3f7a26e2c785d3b0180786fd33b1debca",
            "file": "src/app/core/mobx/IAppConfig.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IText } from '../interface/widgets/IText';\nimport { IAmap } from '../interface/IAmap';\nexport interface IAppConfig {\n  defTheme: string;\n  config?: ICoreConfig | null;\n  page: IPage;\n}\nexport interface ICoreConfig {\n  defaultTheme: string;\n  theme: ITheme[];\n  login: ILogin;\n  defaultLogo: string;\n  defaultAvatar: string;\n  defaultThumb: string;\n  amap: IAmap;\n  apiUrl: IApiUrl;\n  loading: boolean;\n  article: IArticle;\n  editor: IEditor;\n  actions: IActions;\n  dialog: IDialog;\n  user: User;\n  commerce: Commerce;\n  googleAnalytics: GoogleAnalytics;\n  guard: Guard;\n  access: {\n    check: true;\n  };\n  qidian: {\n    id: string;\n    key: string;\n  };\n}\nexport interface ITheme {\n  name: string;\n  style: string;\n  icon?: string;\n  svgIcon?: string;\n}\n\nexport interface PhoneLogin {\n  enable: boolean;\n  tabLabel: string;\n  leftTime: number;\n  submitLabel: string;\n  error: string;\n}\n\nexport interface PswLogin {\n  enable: boolean;\n  tabLabel: string;\n  submitLabel: string;\n}\n\nexport interface ILogin {\n  loginRedirect: string;\n  left: any;\n  phoneLogin: PhoneLogin;\n  pswLogin: PswLogin;\n}\n\nexport interface Github {\n  repos: string;\n  api: string;\n}\n\nexport interface IApiUrl {\n  loginPath: string;\n  logoutPath: string;\n  userIdGetPath: string;\n  nodeGetPath: string;\n  commentGetPath: string;\n  paymentPath: string;\n  taxonomyGetPath: string;\n  flaggingGetPath: string;\n  userGetPath: string;\n  yushan: string;\n  search: any;\n  github: Github;\n}\n\nexport interface Form {\n  label: string;\n  key: string;\n  value: number;\n  type: string;\n  placeholder: string;\n  controlType: string;\n  appearance: string;\n  errorMes: string;\n  tooltip: string;\n  matTooltipPosition: string;\n  suffix: string;\n}\n\nexport interface FontSize {\n  enable: boolean;\n  form: Form[];\n}\n\nexport interface Comment {\n  enable: boolean;\n}\n\nexport interface IArticle {\n  fontSize: FontSize;\n  comment: Comment;\n}\n\nexport interface Modules {\n  toolbar: any[][];\n}\n\nexport interface IEditor {\n  modules: Modules;\n}\n\nexport interface Icon {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Flag {\n  icon: Icon;\n  enable: boolean;\n}\n\nexport interface Button {\n  icon: string;\n  label: string;\n}\n\nexport interface Share {\n  button: Button;\n  enable: boolean;\n}\n\nexport interface Icon2 {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Download {\n  label: string;\n  icon: Icon2;\n  enable: boolean;\n}\n\nexport interface IActions {\n  flag: Flag;\n  share: Share;\n  download: Download;\n}\n\nexport interface Params {\n  width: string;\n  path: string;\n  first: boolean;\n}\n\nexport interface Title {\n  label: string;\n  style: string;\n}\n\nexport interface Action {\n  type: string;\n  label: string;\n  color: string;\n  href: string;\n}\n\nexport interface Text {\n  title: Title;\n  spacer: string;\n  body: string;\n  actions: Action[];\n  actionsAlign: string;\n}\n\nexport interface ForceDialog {\n  params: Params;\n  text: Text;\n}\n\nexport interface IDialog {\n  forceDialog: ForceDialog;\n}\n\nexport interface User {\n  banner: string;\n}\nexport interface Action2 {\n  type: string;\n  label: string;\n  href: string;\n  color: string;\n}\n\nexport interface Commerce {\n  vip: string;\n  payNode: string;\n  dialog: {\n    spacer: string;\n    title: {\n      label: string;\n      style: string;\n    };\n    body: string;\n    actionsAlign: string;\n    actions: Action2[];\n  };\n}\n\nexport interface GoogleAnalytics {\n  id: string;\n}\n\nexport interface Guard {\n  authGuard: boolean;\n}\n\nexport interface IPage {\n  meta?: any[];\n  config?: any;\n  title: string;\n  body: any[];\n}\n\nexport interface ICommerce {\n  vip: string;\n  payNode: string;\n  dialog: IText;\n}\n",
            "properties": [
                {
                    "name": "inline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 120
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 119
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Icon2",
            "id": "interface-Icon2-c82f202a5a68c4f13467fc5c27f54faab6b210ed140ec058c8e5821fb72690d098a086d2b6a071c0a089a378b7c31ba3f7a26e2c785d3b0180786fd33b1debca",
            "file": "src/app/core/mobx/IAppConfig.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IText } from '../interface/widgets/IText';\nimport { IAmap } from '../interface/IAmap';\nexport interface IAppConfig {\n  defTheme: string;\n  config?: ICoreConfig | null;\n  page: IPage;\n}\nexport interface ICoreConfig {\n  defaultTheme: string;\n  theme: ITheme[];\n  login: ILogin;\n  defaultLogo: string;\n  defaultAvatar: string;\n  defaultThumb: string;\n  amap: IAmap;\n  apiUrl: IApiUrl;\n  loading: boolean;\n  article: IArticle;\n  editor: IEditor;\n  actions: IActions;\n  dialog: IDialog;\n  user: User;\n  commerce: Commerce;\n  googleAnalytics: GoogleAnalytics;\n  guard: Guard;\n  access: {\n    check: true;\n  };\n  qidian: {\n    id: string;\n    key: string;\n  };\n}\nexport interface ITheme {\n  name: string;\n  style: string;\n  icon?: string;\n  svgIcon?: string;\n}\n\nexport interface PhoneLogin {\n  enable: boolean;\n  tabLabel: string;\n  leftTime: number;\n  submitLabel: string;\n  error: string;\n}\n\nexport interface PswLogin {\n  enable: boolean;\n  tabLabel: string;\n  submitLabel: string;\n}\n\nexport interface ILogin {\n  loginRedirect: string;\n  left: any;\n  phoneLogin: PhoneLogin;\n  pswLogin: PswLogin;\n}\n\nexport interface Github {\n  repos: string;\n  api: string;\n}\n\nexport interface IApiUrl {\n  loginPath: string;\n  logoutPath: string;\n  userIdGetPath: string;\n  nodeGetPath: string;\n  commentGetPath: string;\n  paymentPath: string;\n  taxonomyGetPath: string;\n  flaggingGetPath: string;\n  userGetPath: string;\n  yushan: string;\n  search: any;\n  github: Github;\n}\n\nexport interface Form {\n  label: string;\n  key: string;\n  value: number;\n  type: string;\n  placeholder: string;\n  controlType: string;\n  appearance: string;\n  errorMes: string;\n  tooltip: string;\n  matTooltipPosition: string;\n  suffix: string;\n}\n\nexport interface FontSize {\n  enable: boolean;\n  form: Form[];\n}\n\nexport interface Comment {\n  enable: boolean;\n}\n\nexport interface IArticle {\n  fontSize: FontSize;\n  comment: Comment;\n}\n\nexport interface Modules {\n  toolbar: any[][];\n}\n\nexport interface IEditor {\n  modules: Modules;\n}\n\nexport interface Icon {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Flag {\n  icon: Icon;\n  enable: boolean;\n}\n\nexport interface Button {\n  icon: string;\n  label: string;\n}\n\nexport interface Share {\n  button: Button;\n  enable: boolean;\n}\n\nexport interface Icon2 {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Download {\n  label: string;\n  icon: Icon2;\n  enable: boolean;\n}\n\nexport interface IActions {\n  flag: Flag;\n  share: Share;\n  download: Download;\n}\n\nexport interface Params {\n  width: string;\n  path: string;\n  first: boolean;\n}\n\nexport interface Title {\n  label: string;\n  style: string;\n}\n\nexport interface Action {\n  type: string;\n  label: string;\n  color: string;\n  href: string;\n}\n\nexport interface Text {\n  title: Title;\n  spacer: string;\n  body: string;\n  actions: Action[];\n  actionsAlign: string;\n}\n\nexport interface ForceDialog {\n  params: Params;\n  text: Text;\n}\n\nexport interface IDialog {\n  forceDialog: ForceDialog;\n}\n\nexport interface User {\n  banner: string;\n}\nexport interface Action2 {\n  type: string;\n  label: string;\n  href: string;\n  color: string;\n}\n\nexport interface Commerce {\n  vip: string;\n  payNode: string;\n  dialog: {\n    spacer: string;\n    title: {\n      label: string;\n      style: string;\n    };\n    body: string;\n    actionsAlign: string;\n    actions: Action2[];\n  };\n}\n\nexport interface GoogleAnalytics {\n  id: string;\n}\n\nexport interface Guard {\n  authGuard: boolean;\n}\n\nexport interface IPage {\n  meta?: any[];\n  config?: any;\n  title: string;\n  body: any[];\n}\n\nexport interface ICommerce {\n  vip: string;\n  payNode: string;\n  dialog: IText;\n}\n",
            "properties": [
                {
                    "name": "inline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 140
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 139
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IControl",
            "id": "interface-IControl-90265dc1889479b70718f912d84a5b9a2f6637fc696e7ae3154090ecf5de7e1d039fd4352347ad08a8bbb3890eda73246a37a5ed910233dddda6f916d2dacc13",
            "file": "src/app/core/interface/widgets/IControl.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { MatFormFieldAppearance } from '@angular/material/form-field';\nimport { TooltipPosition } from '@angular/material/tooltip';\n\nexport interface IControl {\n  type: string;\n  key: string;\n  label: string;\n  value: any;\n  params?: any;\n  icon?: string;\n  multiple?: boolean;\n  placeholder?: string;\n  order?: number;\n  controlType?: string;\n  options?: { value: string; label: string }[];\n  errorMes?: string;\n  appearance?: MatFormFieldAppearance;\n  tooltip?: string;\n  suffix?: string;\n  matTooltipPosition?: TooltipPosition;\n  clear?: boolean;\n  rows?: number;\n  mode?: string;\n  api?: string;\n  search?: boolean;\n  noFound?: string;\n  none?: {\n    label: string;\n  };\n}\n",
            "properties": [
                {
                    "name": "api",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "appearance",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatFormFieldAppearance",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "clear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "controlType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "errorMes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "matTooltipPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TooltipPosition",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "mode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "multiple",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "noFound",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "none",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "params",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "rows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "search",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "suffix",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ICoreConfig",
            "id": "interface-ICoreConfig-c82f202a5a68c4f13467fc5c27f54faab6b210ed140ec058c8e5821fb72690d098a086d2b6a071c0a089a378b7c31ba3f7a26e2c785d3b0180786fd33b1debca",
            "file": "src/app/core/mobx/IAppConfig.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IText } from '../interface/widgets/IText';\nimport { IAmap } from '../interface/IAmap';\nexport interface IAppConfig {\n  defTheme: string;\n  config?: ICoreConfig | null;\n  page: IPage;\n}\nexport interface ICoreConfig {\n  defaultTheme: string;\n  theme: ITheme[];\n  login: ILogin;\n  defaultLogo: string;\n  defaultAvatar: string;\n  defaultThumb: string;\n  amap: IAmap;\n  apiUrl: IApiUrl;\n  loading: boolean;\n  article: IArticle;\n  editor: IEditor;\n  actions: IActions;\n  dialog: IDialog;\n  user: User;\n  commerce: Commerce;\n  googleAnalytics: GoogleAnalytics;\n  guard: Guard;\n  access: {\n    check: true;\n  };\n  qidian: {\n    id: string;\n    key: string;\n  };\n}\nexport interface ITheme {\n  name: string;\n  style: string;\n  icon?: string;\n  svgIcon?: string;\n}\n\nexport interface PhoneLogin {\n  enable: boolean;\n  tabLabel: string;\n  leftTime: number;\n  submitLabel: string;\n  error: string;\n}\n\nexport interface PswLogin {\n  enable: boolean;\n  tabLabel: string;\n  submitLabel: string;\n}\n\nexport interface ILogin {\n  loginRedirect: string;\n  left: any;\n  phoneLogin: PhoneLogin;\n  pswLogin: PswLogin;\n}\n\nexport interface Github {\n  repos: string;\n  api: string;\n}\n\nexport interface IApiUrl {\n  loginPath: string;\n  logoutPath: string;\n  userIdGetPath: string;\n  nodeGetPath: string;\n  commentGetPath: string;\n  paymentPath: string;\n  taxonomyGetPath: string;\n  flaggingGetPath: string;\n  userGetPath: string;\n  yushan: string;\n  search: any;\n  github: Github;\n}\n\nexport interface Form {\n  label: string;\n  key: string;\n  value: number;\n  type: string;\n  placeholder: string;\n  controlType: string;\n  appearance: string;\n  errorMes: string;\n  tooltip: string;\n  matTooltipPosition: string;\n  suffix: string;\n}\n\nexport interface FontSize {\n  enable: boolean;\n  form: Form[];\n}\n\nexport interface Comment {\n  enable: boolean;\n}\n\nexport interface IArticle {\n  fontSize: FontSize;\n  comment: Comment;\n}\n\nexport interface Modules {\n  toolbar: any[][];\n}\n\nexport interface IEditor {\n  modules: Modules;\n}\n\nexport interface Icon {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Flag {\n  icon: Icon;\n  enable: boolean;\n}\n\nexport interface Button {\n  icon: string;\n  label: string;\n}\n\nexport interface Share {\n  button: Button;\n  enable: boolean;\n}\n\nexport interface Icon2 {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Download {\n  label: string;\n  icon: Icon2;\n  enable: boolean;\n}\n\nexport interface IActions {\n  flag: Flag;\n  share: Share;\n  download: Download;\n}\n\nexport interface Params {\n  width: string;\n  path: string;\n  first: boolean;\n}\n\nexport interface Title {\n  label: string;\n  style: string;\n}\n\nexport interface Action {\n  type: string;\n  label: string;\n  color: string;\n  href: string;\n}\n\nexport interface Text {\n  title: Title;\n  spacer: string;\n  body: string;\n  actions: Action[];\n  actionsAlign: string;\n}\n\nexport interface ForceDialog {\n  params: Params;\n  text: Text;\n}\n\nexport interface IDialog {\n  forceDialog: ForceDialog;\n}\n\nexport interface User {\n  banner: string;\n}\nexport interface Action2 {\n  type: string;\n  label: string;\n  href: string;\n  color: string;\n}\n\nexport interface Commerce {\n  vip: string;\n  payNode: string;\n  dialog: {\n    spacer: string;\n    title: {\n      label: string;\n      style: string;\n    };\n    body: string;\n    actionsAlign: string;\n    actions: Action2[];\n  };\n}\n\nexport interface GoogleAnalytics {\n  id: string;\n}\n\nexport interface Guard {\n  authGuard: boolean;\n}\n\nexport interface IPage {\n  meta?: any[];\n  config?: any;\n  title: string;\n  body: any[];\n}\n\nexport interface ICommerce {\n  vip: string;\n  payNode: string;\n  dialog: IText;\n}\n",
            "properties": [
                {
                    "name": "access",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IActions",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "amap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAmap",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "apiUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IApiUrl",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "article",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IArticle",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "commerce",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Commerce",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "defaultAvatar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "defaultLogo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "defaultTheme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "defaultThumb",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDialog",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "editor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IEditor",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "googleAnalytics",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GoogleAnalytics",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "guard",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Guard",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "login",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILogin",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "qidian",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "theme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ITheme[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IDialog",
            "id": "interface-IDialog-c48e64e3331863f12256015a22430b16a9ca459d96b2c192f6c007edab8ce418344f2649761d21d5a66ef4e2fbfdaf6b3d8a9a68822b85419e05eeae6ef102d6",
            "file": "src/app/core/interface/IDialog.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IDialog {\n  disableCloseButton?: boolean;\n  title?: string;\n  inputData: any;\n  renderInputComponent: any;\n}\n",
            "properties": [
                {
                    "name": "disableCloseButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "inputData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "renderInputComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IDialog",
            "id": "interface-IDialog-c82f202a5a68c4f13467fc5c27f54faab6b210ed140ec058c8e5821fb72690d098a086d2b6a071c0a089a378b7c31ba3f7a26e2c785d3b0180786fd33b1debca-1",
            "file": "src/app/core/mobx/IAppConfig.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IText } from '../interface/widgets/IText';\nimport { IAmap } from '../interface/IAmap';\nexport interface IAppConfig {\n  defTheme: string;\n  config?: ICoreConfig | null;\n  page: IPage;\n}\nexport interface ICoreConfig {\n  defaultTheme: string;\n  theme: ITheme[];\n  login: ILogin;\n  defaultLogo: string;\n  defaultAvatar: string;\n  defaultThumb: string;\n  amap: IAmap;\n  apiUrl: IApiUrl;\n  loading: boolean;\n  article: IArticle;\n  editor: IEditor;\n  actions: IActions;\n  dialog: IDialog;\n  user: User;\n  commerce: Commerce;\n  googleAnalytics: GoogleAnalytics;\n  guard: Guard;\n  access: {\n    check: true;\n  };\n  qidian: {\n    id: string;\n    key: string;\n  };\n}\nexport interface ITheme {\n  name: string;\n  style: string;\n  icon?: string;\n  svgIcon?: string;\n}\n\nexport interface PhoneLogin {\n  enable: boolean;\n  tabLabel: string;\n  leftTime: number;\n  submitLabel: string;\n  error: string;\n}\n\nexport interface PswLogin {\n  enable: boolean;\n  tabLabel: string;\n  submitLabel: string;\n}\n\nexport interface ILogin {\n  loginRedirect: string;\n  left: any;\n  phoneLogin: PhoneLogin;\n  pswLogin: PswLogin;\n}\n\nexport interface Github {\n  repos: string;\n  api: string;\n}\n\nexport interface IApiUrl {\n  loginPath: string;\n  logoutPath: string;\n  userIdGetPath: string;\n  nodeGetPath: string;\n  commentGetPath: string;\n  paymentPath: string;\n  taxonomyGetPath: string;\n  flaggingGetPath: string;\n  userGetPath: string;\n  yushan: string;\n  search: any;\n  github: Github;\n}\n\nexport interface Form {\n  label: string;\n  key: string;\n  value: number;\n  type: string;\n  placeholder: string;\n  controlType: string;\n  appearance: string;\n  errorMes: string;\n  tooltip: string;\n  matTooltipPosition: string;\n  suffix: string;\n}\n\nexport interface FontSize {\n  enable: boolean;\n  form: Form[];\n}\n\nexport interface Comment {\n  enable: boolean;\n}\n\nexport interface IArticle {\n  fontSize: FontSize;\n  comment: Comment;\n}\n\nexport interface Modules {\n  toolbar: any[][];\n}\n\nexport interface IEditor {\n  modules: Modules;\n}\n\nexport interface Icon {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Flag {\n  icon: Icon;\n  enable: boolean;\n}\n\nexport interface Button {\n  icon: string;\n  label: string;\n}\n\nexport interface Share {\n  button: Button;\n  enable: boolean;\n}\n\nexport interface Icon2 {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Download {\n  label: string;\n  icon: Icon2;\n  enable: boolean;\n}\n\nexport interface IActions {\n  flag: Flag;\n  share: Share;\n  download: Download;\n}\n\nexport interface Params {\n  width: string;\n  path: string;\n  first: boolean;\n}\n\nexport interface Title {\n  label: string;\n  style: string;\n}\n\nexport interface Action {\n  type: string;\n  label: string;\n  color: string;\n  href: string;\n}\n\nexport interface Text {\n  title: Title;\n  spacer: string;\n  body: string;\n  actions: Action[];\n  actionsAlign: string;\n}\n\nexport interface ForceDialog {\n  params: Params;\n  text: Text;\n}\n\nexport interface IDialog {\n  forceDialog: ForceDialog;\n}\n\nexport interface User {\n  banner: string;\n}\nexport interface Action2 {\n  type: string;\n  label: string;\n  href: string;\n  color: string;\n}\n\nexport interface Commerce {\n  vip: string;\n  payNode: string;\n  dialog: {\n    spacer: string;\n    title: {\n      label: string;\n      style: string;\n    };\n    body: string;\n    actionsAlign: string;\n    actions: Action2[];\n  };\n}\n\nexport interface GoogleAnalytics {\n  id: string;\n}\n\nexport interface Guard {\n  authGuard: boolean;\n}\n\nexport interface IPage {\n  meta?: any[];\n  config?: any;\n  title: string;\n  body: any[];\n}\n\nexport interface ICommerce {\n  vip: string;\n  payNode: string;\n  dialog: IText;\n}\n",
            "properties": [
                {
                    "name": "forceDialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ForceDialog",
                    "optional": false,
                    "description": "",
                    "line": 187
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "IDialog-1"
        },
        {
            "name": "IDownload",
            "id": "interface-IDownload-4688834f66b5295e08357d013a733acf54a6f5d2bf23ff6284155e665bac0114a6e8ea5369fd987647d4790290e3ac55870b46ea43baef4f109c4641732e15f7",
            "file": "src/app/core/interface/widgets/IDownload.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IIcon } from './IIcon';\n\nexport interface IDownloadItem {\n  type: string;\n  label: string;\n  icon: IIcon;\n  href: string;\n}\n\nexport interface IDownload {\n  type: string;\n  label: string;\n  icon: IIcon;\n  elements: IDownloadItem[];\n}\n",
            "properties": [
                {
                    "name": "elements",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDownloadItem[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIcon",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IDownloadItem",
            "id": "interface-IDownloadItem-4688834f66b5295e08357d013a733acf54a6f5d2bf23ff6284155e665bac0114a6e8ea5369fd987647d4790290e3ac55870b46ea43baef4f109c4641732e15f7",
            "file": "src/app/core/interface/widgets/IDownload.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IIcon } from './IIcon';\n\nexport interface IDownloadItem {\n  type: string;\n  label: string;\n  icon: IIcon;\n  href: string;\n}\n\nexport interface IDownload {\n  type: string;\n  label: string;\n  icon: IIcon;\n  elements: IDownloadItem[];\n}\n",
            "properties": [
                {
                    "name": "href",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIcon",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IDropdownMenu",
            "id": "interface-IDropdownMenu-9b8e59931bf73a47c676446f5459d4d6aaf4f198a89f43460f38c3ee72ed2bcbad5324c5a81b3f2dec8e078f3f52812ac198ba32de8902bc5bc33ae9b0b97c6a",
            "file": "src/app/core/interface/widgets/IDropdownMenu.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ILink } from './ILink';\n\nexport interface IDropdownMenu extends ILink {\n  child?: ILink[];\n}\n",
            "properties": [
                {
                    "name": "child",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILink[]",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "ILink"
        },
        {
            "name": "IDynamicTable",
            "id": "interface-IDynamicTable-614684f48da88bdc2a6129f6143a4625743cd4b703d0c82aec1cc9c61fbb37358df7908de458bbc66dc7333f81c76a52d65fae2072bee467b43f42cc254f5a90",
            "file": "src/app/uiux/widgets/IWidgets.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IImg } from '@core/interface/widgets/IImg';\nimport { ILink } from '@core/interface/widgets/ILink';\nimport { IIcon } from '../../core/interface/widgets/IIcon';\n\nexport interface ICard {\n  title?: string;\n  subTitle?: string;\n  avatar?: IImg;\n  body?: any;\n  classes?: any;\n  img?: {\n    src: string;\n    alt?: string;\n    hostClasses?: any;\n    classes?: any;\n  };\n  header: {\n    avatar: IImg;\n    title: string;\n    subTitle: string;\n    icon: IIcon;\n    meta: IMeta[];\n  };\n  footer: {\n    meta: IMeta[];\n  };\n  carousel?: any;\n  feature?: any;\n  overlay?: any[];\n  link: ILink;\n  actions?: any;\n  progressBar: {\n    mode: 'determinate' | 'indeterminate' | 'buffer' | 'query';\n    value: number;\n  };\n}\n\nexport interface IMeta {\n  label: string;\n  value: string;\n}\n\nexport interface IInlineLightbox {\n  label: string[];\n  elements: ILightboxElement[];\n}\n\nexport interface ILightboxElement {\n  src: string;\n  caption: string;\n  thumb: string;\n}\n\nexport interface IDynamicTable {\n  header: {\n    label: string;\n    key: string;\n    classes?: string;\n    style?: object;\n    dialog?: {\n      shorten: number;\n      label: string;\n    };\n  }[];\n  elements: any[];\n}\n",
            "properties": [
                {
                    "name": "elements",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 55
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IEditor",
            "id": "interface-IEditor-c82f202a5a68c4f13467fc5c27f54faab6b210ed140ec058c8e5821fb72690d098a086d2b6a071c0a089a378b7c31ba3f7a26e2c785d3b0180786fd33b1debca",
            "file": "src/app/core/mobx/IAppConfig.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IText } from '../interface/widgets/IText';\nimport { IAmap } from '../interface/IAmap';\nexport interface IAppConfig {\n  defTheme: string;\n  config?: ICoreConfig | null;\n  page: IPage;\n}\nexport interface ICoreConfig {\n  defaultTheme: string;\n  theme: ITheme[];\n  login: ILogin;\n  defaultLogo: string;\n  defaultAvatar: string;\n  defaultThumb: string;\n  amap: IAmap;\n  apiUrl: IApiUrl;\n  loading: boolean;\n  article: IArticle;\n  editor: IEditor;\n  actions: IActions;\n  dialog: IDialog;\n  user: User;\n  commerce: Commerce;\n  googleAnalytics: GoogleAnalytics;\n  guard: Guard;\n  access: {\n    check: true;\n  };\n  qidian: {\n    id: string;\n    key: string;\n  };\n}\nexport interface ITheme {\n  name: string;\n  style: string;\n  icon?: string;\n  svgIcon?: string;\n}\n\nexport interface PhoneLogin {\n  enable: boolean;\n  tabLabel: string;\n  leftTime: number;\n  submitLabel: string;\n  error: string;\n}\n\nexport interface PswLogin {\n  enable: boolean;\n  tabLabel: string;\n  submitLabel: string;\n}\n\nexport interface ILogin {\n  loginRedirect: string;\n  left: any;\n  phoneLogin: PhoneLogin;\n  pswLogin: PswLogin;\n}\n\nexport interface Github {\n  repos: string;\n  api: string;\n}\n\nexport interface IApiUrl {\n  loginPath: string;\n  logoutPath: string;\n  userIdGetPath: string;\n  nodeGetPath: string;\n  commentGetPath: string;\n  paymentPath: string;\n  taxonomyGetPath: string;\n  flaggingGetPath: string;\n  userGetPath: string;\n  yushan: string;\n  search: any;\n  github: Github;\n}\n\nexport interface Form {\n  label: string;\n  key: string;\n  value: number;\n  type: string;\n  placeholder: string;\n  controlType: string;\n  appearance: string;\n  errorMes: string;\n  tooltip: string;\n  matTooltipPosition: string;\n  suffix: string;\n}\n\nexport interface FontSize {\n  enable: boolean;\n  form: Form[];\n}\n\nexport interface Comment {\n  enable: boolean;\n}\n\nexport interface IArticle {\n  fontSize: FontSize;\n  comment: Comment;\n}\n\nexport interface Modules {\n  toolbar: any[][];\n}\n\nexport interface IEditor {\n  modules: Modules;\n}\n\nexport interface Icon {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Flag {\n  icon: Icon;\n  enable: boolean;\n}\n\nexport interface Button {\n  icon: string;\n  label: string;\n}\n\nexport interface Share {\n  button: Button;\n  enable: boolean;\n}\n\nexport interface Icon2 {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Download {\n  label: string;\n  icon: Icon2;\n  enable: boolean;\n}\n\nexport interface IActions {\n  flag: Flag;\n  share: Share;\n  download: Download;\n}\n\nexport interface Params {\n  width: string;\n  path: string;\n  first: boolean;\n}\n\nexport interface Title {\n  label: string;\n  style: string;\n}\n\nexport interface Action {\n  type: string;\n  label: string;\n  color: string;\n  href: string;\n}\n\nexport interface Text {\n  title: Title;\n  spacer: string;\n  body: string;\n  actions: Action[];\n  actionsAlign: string;\n}\n\nexport interface ForceDialog {\n  params: Params;\n  text: Text;\n}\n\nexport interface IDialog {\n  forceDialog: ForceDialog;\n}\n\nexport interface User {\n  banner: string;\n}\nexport interface Action2 {\n  type: string;\n  label: string;\n  href: string;\n  color: string;\n}\n\nexport interface Commerce {\n  vip: string;\n  payNode: string;\n  dialog: {\n    spacer: string;\n    title: {\n      label: string;\n      style: string;\n    };\n    body: string;\n    actionsAlign: string;\n    actions: Action2[];\n  };\n}\n\nexport interface GoogleAnalytics {\n  id: string;\n}\n\nexport interface Guard {\n  authGuard: boolean;\n}\n\nexport interface IPage {\n  meta?: any[];\n  config?: any;\n  title: string;\n  body: any[];\n}\n\nexport interface ICommerce {\n  vip: string;\n  payNode: string;\n  dialog: IText;\n}\n",
            "properties": [
                {
                    "name": "modules",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Modules",
                    "optional": false,
                    "description": "",
                    "line": 115
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IElement",
            "id": "interface-IElement-2eb9e7ba47e823c9c88c8f2d249deedf893976c4d56946d0ec27471ec878d05a341e03c0a7e08a111dcd871f38a4cf6d460283799257be64f63f0842d176730c",
            "file": "src/app/core/interface/widgets/IMediaList.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IImg } from './IImg';\nimport { ILink } from './ILink';\n\nexport interface IMediaList {\n  title: string;\n  elements: IElement[];\n}\n\ninterface IElement {\n  img: IImg;\n  link: ILink;\n  changed: HTMLElement;\n}\n",
            "properties": [
                {
                    "name": "changed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "img",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IImg",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILink",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IEnvironment",
            "id": "interface-IEnvironment-6cee0f6445f5e3462da004d76c59b5406b875d46b44d0b3b7cbdc633c4252e89c1b47388f16356aac3aa059a78c803761660be766d25a19360537abd90564cf0",
            "file": "src/app/core/interface/IEnvironment.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IEnvironment {\n  apiUrl: string;\n  production: boolean;\n  site: string;\n  port: number;\n  cache: boolean;\n  ssr: boolean;\n  drupalProxy?: boolean;\n}\n",
            "properties": [
                {
                    "name": "apiUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "cache",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "drupalProxy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "port",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "production",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "site",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "ssr",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IFeatureBox",
            "id": "interface-IFeatureBox-f52488aa0c817ce06ae977d73516fcb3df93c1a43786a4bd38573f1ed1f7d5f0159970bc7aeeb2588a32d42958d4dec971bce2ac7cb581d468efd22d3aa25c6a",
            "file": "src/app/core/interface/widgets/IFeatureBox.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IImg } from './IImg';\nimport { ILink } from './ILink';\n\nexport interface IFeatureBox {\n  hoverIcon?: boolean;\n  fullIcon?: string;\n  openIcon?: string;\n  ratios?: string;\n  img: IImg;\n  link: ILink;\n}\n",
            "properties": [
                {
                    "name": "fullIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "hoverIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "img",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IImg",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILink",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "openIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "ratios",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IFlag",
            "id": "interface-IFlag-e2ec04e987aefccfa55dcbb8561fb28f207b35ffedb84f61df0e12956eb8879383c9e3eb2b53cf5f4370454fb36b91cdaa23edd75e5714675403cc62ff3f45ae",
            "file": "src/app/core/interface/widgets/IFlag.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IIcon } from './IIcon';\n\nexport interface IFlag {\n  type: string;\n  label: string;\n  icon: IIcon;\n  params: Params;\n}\n\nexport interface Params {\n  type: string;\n  entity_type: string;\n  entity_id: string;\n  relationships: Relationships;\n}\n\nexport interface Relationships {\n  flagged_entity: FlaggedEntity;\n}\n\nexport interface FlaggedEntity {\n  type: string;\n  id: string;\n}\n",
            "properties": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIcon",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "params",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Params",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IIcon",
            "id": "interface-IIcon-351bc556c0d92ac8dabc17fbd6166a52d8537e652f385a2e7761b91434322c70c75142343b6c45b22e8ae1d3551b11b0583617cad50f6f0d4f863c231de6f30d",
            "file": "src/app/core/interface/widgets/IIcon.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IIcon {\n  color?: string;\n  name?: string;\n  svg?: string;\n  inline?: boolean;\n}\n",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "inline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "svg",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IImg",
            "id": "interface-IImg-8af940ba297ec18fd5842abdae57206fc9c3be61d5ae72e9434ff12d142a93a7b4f2296cf81c1793e42f5af1e85a407fa3911cddf135b4c7de8f4999a27d2f26",
            "file": "src/app/core/interface/widgets/IImg.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IImg {\n  src: string;\n  target?: string;\n  href?: string;\n  style?: any;\n  classes?: any;\n  mobile?: string;\n  alt?: string;\n  hostClasses?: string;\n}\n",
            "properties": [
                {
                    "name": "alt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "hostClasses",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "href",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "mobile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "src",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IInlineLightbox",
            "id": "interface-IInlineLightbox-614684f48da88bdc2a6129f6143a4625743cd4b703d0c82aec1cc9c61fbb37358df7908de458bbc66dc7333f81c76a52d65fae2072bee467b43f42cc254f5a90",
            "file": "src/app/uiux/widgets/IWidgets.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IImg } from '@core/interface/widgets/IImg';\nimport { ILink } from '@core/interface/widgets/ILink';\nimport { IIcon } from '../../core/interface/widgets/IIcon';\n\nexport interface ICard {\n  title?: string;\n  subTitle?: string;\n  avatar?: IImg;\n  body?: any;\n  classes?: any;\n  img?: {\n    src: string;\n    alt?: string;\n    hostClasses?: any;\n    classes?: any;\n  };\n  header: {\n    avatar: IImg;\n    title: string;\n    subTitle: string;\n    icon: IIcon;\n    meta: IMeta[];\n  };\n  footer: {\n    meta: IMeta[];\n  };\n  carousel?: any;\n  feature?: any;\n  overlay?: any[];\n  link: ILink;\n  actions?: any;\n  progressBar: {\n    mode: 'determinate' | 'indeterminate' | 'buffer' | 'query';\n    value: number;\n  };\n}\n\nexport interface IMeta {\n  label: string;\n  value: string;\n}\n\nexport interface IInlineLightbox {\n  label: string[];\n  elements: ILightboxElement[];\n}\n\nexport interface ILightboxElement {\n  src: string;\n  caption: string;\n  thumb: string;\n}\n\nexport interface IDynamicTable {\n  header: {\n    label: string;\n    key: string;\n    classes?: string;\n    style?: object;\n    dialog?: {\n      shorten: number;\n      label: string;\n    };\n  }[];\n  elements: any[];\n}\n",
            "properties": [
                {
                    "name": "elements",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILightboxElement[]",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IJob",
            "id": "interface-IJob-8df87975257b2ffea9eee3fb54985c45bd4c73b4707013705001fa801680bf4d9144945dbe3becc663002bc827044043d0534d46f7878821202ea1ede4546be0",
            "file": "src/app/uiux/combs/node/job/IJob.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IChipList {\n  label: string;\n  color: string;\n}\n\nexport interface IJob {\n  title: string;\n  locality: string;\n  deadline: string;\n  number: number;\n  salary: {\n    from: number,\n    to: number\n  };\n  relate: any;\n}\n",
            "properties": [
                {
                    "name": "deadline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "locality",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "relate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "salary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ILabel",
            "id": "interface-ILabel-cb1e9edde4477871c905fac0d4c72504929a57b62f80f84810c0fa98f39c2ababaab74f2c84227253d10300e5be6e19120c7399053c41236becebeb391238251",
            "file": "src/app/uiux/widgets/sidebar/search-sidebar/search-sidebar.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { isEmpty, pick, values } from 'lodash';\n\nexport interface ILabel {\n  clear: string;\n  filter: string;\n}\n@Component({\n  selector: 'app-search-sidebar',\n  templateUrl: './search-sidebar.component.html',\n  styleUrls: ['./search-sidebar.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchSidebarComponent implements OnInit {\n  @Input() content: any;\n  @Input() label: ILabel;\n  @Input() form: FormGroup;\n  @Input() searchEntry: any;\n\n  panelOpenState = true;\n  constructor(private cd: ChangeDetectorRef) {}\n\n  ngOnInit(): void {}\n\n  get isEmpty(): boolean {\n    return isEmpty(this.searchEntry);\n  }\n\n  get values(): string[] {\n    return values(pick(this.searchEntry, ['keys', 'title']));\n  }\n\n  clear(): void {\n    this.searchEntry = {};\n    this.form.reset();\n    this.cd.detectChanges();\n  }\n}\n",
            "properties": [
                {
                    "name": "clear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "filter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ILightboxElement",
            "id": "interface-ILightboxElement-614684f48da88bdc2a6129f6143a4625743cd4b703d0c82aec1cc9c61fbb37358df7908de458bbc66dc7333f81c76a52d65fae2072bee467b43f42cc254f5a90",
            "file": "src/app/uiux/widgets/IWidgets.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IImg } from '@core/interface/widgets/IImg';\nimport { ILink } from '@core/interface/widgets/ILink';\nimport { IIcon } from '../../core/interface/widgets/IIcon';\n\nexport interface ICard {\n  title?: string;\n  subTitle?: string;\n  avatar?: IImg;\n  body?: any;\n  classes?: any;\n  img?: {\n    src: string;\n    alt?: string;\n    hostClasses?: any;\n    classes?: any;\n  };\n  header: {\n    avatar: IImg;\n    title: string;\n    subTitle: string;\n    icon: IIcon;\n    meta: IMeta[];\n  };\n  footer: {\n    meta: IMeta[];\n  };\n  carousel?: any;\n  feature?: any;\n  overlay?: any[];\n  link: ILink;\n  actions?: any;\n  progressBar: {\n    mode: 'determinate' | 'indeterminate' | 'buffer' | 'query';\n    value: number;\n  };\n}\n\nexport interface IMeta {\n  label: string;\n  value: string;\n}\n\nexport interface IInlineLightbox {\n  label: string[];\n  elements: ILightboxElement[];\n}\n\nexport interface ILightboxElement {\n  src: string;\n  caption: string;\n  thumb: string;\n}\n\nexport interface IDynamicTable {\n  header: {\n    label: string;\n    key: string;\n    classes?: string;\n    style?: object;\n    dialog?: {\n      shorten: number;\n      label: string;\n    };\n  }[];\n  elements: any[];\n}\n",
            "properties": [
                {
                    "name": "caption",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "src",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "thumb",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ILineYear",
            "id": "interface-ILineYear-3e10902dcf2fc8d38b17d2126a1ae9bca347fff6548b8c33e10aafbb4acb82356ddfb4ae170a41cc573f58d7bcd1b7bc40dff8066010dd52f36a5bd59b8fd992",
            "file": "src/app/core/interface/widgets/ILineYear.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ILineYear {\n  title: string;\n  body: HTMLElement;\n}\n",
            "properties": [
                {
                    "name": "body",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ILink",
            "id": "interface-ILink-53fee21e2cd3951fd8f8e84b671df264e6e4264121b273ffd6f59884643597cbd3ea3bc92c3595888a92df4dec305f39175d01378c25ad2dca609039a3f9debb",
            "file": "src/app/core/interface/widgets/ILink.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Params } from '@angular/router';\n\nexport interface ILink {\n  href: string;\n  classes?: any;\n  target?: string;\n  label: any;\n  queryParams?: Params | null;\n  fragment?: string;\n}\n",
            "properties": [
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "fragment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "href",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "queryParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Params | null",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ILogin",
            "id": "interface-ILogin-c82f202a5a68c4f13467fc5c27f54faab6b210ed140ec058c8e5821fb72690d098a086d2b6a071c0a089a378b7c31ba3f7a26e2c785d3b0180786fd33b1debca",
            "file": "src/app/core/mobx/IAppConfig.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IText } from '../interface/widgets/IText';\nimport { IAmap } from '../interface/IAmap';\nexport interface IAppConfig {\n  defTheme: string;\n  config?: ICoreConfig | null;\n  page: IPage;\n}\nexport interface ICoreConfig {\n  defaultTheme: string;\n  theme: ITheme[];\n  login: ILogin;\n  defaultLogo: string;\n  defaultAvatar: string;\n  defaultThumb: string;\n  amap: IAmap;\n  apiUrl: IApiUrl;\n  loading: boolean;\n  article: IArticle;\n  editor: IEditor;\n  actions: IActions;\n  dialog: IDialog;\n  user: User;\n  commerce: Commerce;\n  googleAnalytics: GoogleAnalytics;\n  guard: Guard;\n  access: {\n    check: true;\n  };\n  qidian: {\n    id: string;\n    key: string;\n  };\n}\nexport interface ITheme {\n  name: string;\n  style: string;\n  icon?: string;\n  svgIcon?: string;\n}\n\nexport interface PhoneLogin {\n  enable: boolean;\n  tabLabel: string;\n  leftTime: number;\n  submitLabel: string;\n  error: string;\n}\n\nexport interface PswLogin {\n  enable: boolean;\n  tabLabel: string;\n  submitLabel: string;\n}\n\nexport interface ILogin {\n  loginRedirect: string;\n  left: any;\n  phoneLogin: PhoneLogin;\n  pswLogin: PswLogin;\n}\n\nexport interface Github {\n  repos: string;\n  api: string;\n}\n\nexport interface IApiUrl {\n  loginPath: string;\n  logoutPath: string;\n  userIdGetPath: string;\n  nodeGetPath: string;\n  commentGetPath: string;\n  paymentPath: string;\n  taxonomyGetPath: string;\n  flaggingGetPath: string;\n  userGetPath: string;\n  yushan: string;\n  search: any;\n  github: Github;\n}\n\nexport interface Form {\n  label: string;\n  key: string;\n  value: number;\n  type: string;\n  placeholder: string;\n  controlType: string;\n  appearance: string;\n  errorMes: string;\n  tooltip: string;\n  matTooltipPosition: string;\n  suffix: string;\n}\n\nexport interface FontSize {\n  enable: boolean;\n  form: Form[];\n}\n\nexport interface Comment {\n  enable: boolean;\n}\n\nexport interface IArticle {\n  fontSize: FontSize;\n  comment: Comment;\n}\n\nexport interface Modules {\n  toolbar: any[][];\n}\n\nexport interface IEditor {\n  modules: Modules;\n}\n\nexport interface Icon {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Flag {\n  icon: Icon;\n  enable: boolean;\n}\n\nexport interface Button {\n  icon: string;\n  label: string;\n}\n\nexport interface Share {\n  button: Button;\n  enable: boolean;\n}\n\nexport interface Icon2 {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Download {\n  label: string;\n  icon: Icon2;\n  enable: boolean;\n}\n\nexport interface IActions {\n  flag: Flag;\n  share: Share;\n  download: Download;\n}\n\nexport interface Params {\n  width: string;\n  path: string;\n  first: boolean;\n}\n\nexport interface Title {\n  label: string;\n  style: string;\n}\n\nexport interface Action {\n  type: string;\n  label: string;\n  color: string;\n  href: string;\n}\n\nexport interface Text {\n  title: Title;\n  spacer: string;\n  body: string;\n  actions: Action[];\n  actionsAlign: string;\n}\n\nexport interface ForceDialog {\n  params: Params;\n  text: Text;\n}\n\nexport interface IDialog {\n  forceDialog: ForceDialog;\n}\n\nexport interface User {\n  banner: string;\n}\nexport interface Action2 {\n  type: string;\n  label: string;\n  href: string;\n  color: string;\n}\n\nexport interface Commerce {\n  vip: string;\n  payNode: string;\n  dialog: {\n    spacer: string;\n    title: {\n      label: string;\n      style: string;\n    };\n    body: string;\n    actionsAlign: string;\n    actions: Action2[];\n  };\n}\n\nexport interface GoogleAnalytics {\n  id: string;\n}\n\nexport interface Guard {\n  authGuard: boolean;\n}\n\nexport interface IPage {\n  meta?: any[];\n  config?: any;\n  title: string;\n  body: any[];\n}\n\nexport interface ICommerce {\n  vip: string;\n  payNode: string;\n  dialog: IText;\n}\n",
            "properties": [
                {
                    "name": "left",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "loginRedirect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "phoneLogin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PhoneLogin",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "pswLogin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PswLogin",
                    "optional": false,
                    "description": "",
                    "line": 59
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IMark",
            "id": "interface-IMark-b96de4de903935d4d02e06292b50c76e1fd26013b1f2dc648fe64bc539f36f997665cb116100bbd41761f8c067443a3bcd19c6c8670c87a57a6daab37174233e",
            "file": "src/app/core/interface/IAmap.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IAmap {\n  key: string;\n  version: string;\n  plugins: string[];\n  city: string;\n  zoom: number;\n  center: number[];\n  mapStyle: {\n    [key: string]: string;\n  };\n  features: string[];\n}\n\nexport interface IMark {\n  index: number;\n  marker: string;\n  item?: any;\n}\n",
            "properties": [
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "marker",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IMediaList",
            "id": "interface-IMediaList-2eb9e7ba47e823c9c88c8f2d249deedf893976c4d56946d0ec27471ec878d05a341e03c0a7e08a111dcd871f38a4cf6d460283799257be64f63f0842d176730c",
            "file": "src/app/core/interface/widgets/IMediaList.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IImg } from './IImg';\nimport { ILink } from './ILink';\n\nexport interface IMediaList {\n  title: string;\n  elements: IElement[];\n}\n\ninterface IElement {\n  img: IImg;\n  link: ILink;\n  changed: HTMLElement;\n}\n",
            "properties": [
                {
                    "name": "elements",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IElement[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IMediaMeta",
            "id": "interface-IMediaMeta-bc9834e5f873ff65c33a3d037ad3c82ecda8bad242bc791c06cc9cde57f43256e157fd0fa992c472b31cd96467ce1f24168250dba475b732b792c3618f6c3626",
            "file": "src/app/core/interface/widgets/IMediaMeta.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ILink } from './ILink';\n\nexport interface IMediaMeta {\n  date: Date;\n  more: ILink;\n  link: ILink;\n  body: string;\n}\n",
            "properties": [
                {
                    "name": "body",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILink",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "more",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILink",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IMediaObject",
            "id": "interface-IMediaObject-1b57d7979f89ddec1305838cb9ab5f870e3d126918292b45d34c6281690eb9bdf89932ebacea1d92da437b022f2762fe3cc7279aba4f9833f49f6905bb2e75b9",
            "file": "src/app/core/interface/widgets/IMediaObject.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IImg } from './IImg';\nimport { ILink } from './ILink';\nimport { IIcon } from './IIcon';\nexport interface IMediaObject {\n  css3?: boolean;\n  img: IImg;\n  icon?: IIcon;\n  meta?: HTMLElement;\n  title?: string;\n  subTitle?: string | null;\n  link?: ILink;\n  content?: HTMLElement;\n  align: string;\n}\n",
            "properties": [
                {
                    "name": "align",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "css3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIcon",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "img",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IImg",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILink",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "meta",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "subTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IMenuList",
            "id": "interface-IMenuList-fef2ac702f37fd569155f22637ef4b68ad9d412e4f15cb15fd142a6692456d3e826843bf1a5fc15a553335fd7977531689f5a34ce1bb7440e568a90dab964771",
            "file": "src/app/core/interface/widgets/IMenuList.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMenuList {\n  title: string;\n  elements: any[];\n}\n",
            "properties": [
                {
                    "name": "elements",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IMeta",
            "id": "interface-IMeta-614684f48da88bdc2a6129f6143a4625743cd4b703d0c82aec1cc9c61fbb37358df7908de458bbc66dc7333f81c76a52d65fae2072bee467b43f42cc254f5a90",
            "file": "src/app/uiux/widgets/IWidgets.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IImg } from '@core/interface/widgets/IImg';\nimport { ILink } from '@core/interface/widgets/ILink';\nimport { IIcon } from '../../core/interface/widgets/IIcon';\n\nexport interface ICard {\n  title?: string;\n  subTitle?: string;\n  avatar?: IImg;\n  body?: any;\n  classes?: any;\n  img?: {\n    src: string;\n    alt?: string;\n    hostClasses?: any;\n    classes?: any;\n  };\n  header: {\n    avatar: IImg;\n    title: string;\n    subTitle: string;\n    icon: IIcon;\n    meta: IMeta[];\n  };\n  footer: {\n    meta: IMeta[];\n  };\n  carousel?: any;\n  feature?: any;\n  overlay?: any[];\n  link: ILink;\n  actions?: any;\n  progressBar: {\n    mode: 'determinate' | 'indeterminate' | 'buffer' | 'query';\n    value: number;\n  };\n}\n\nexport interface IMeta {\n  label: string;\n  value: string;\n}\n\nexport interface IInlineLightbox {\n  label: string[];\n  elements: ILightboxElement[];\n}\n\nexport interface ILightboxElement {\n  src: string;\n  caption: string;\n  thumb: string;\n}\n\nexport interface IDynamicTable {\n  header: {\n    label: string;\n    key: string;\n    classes?: string;\n    style?: object;\n    dialog?: {\n      shorten: number;\n      label: string;\n    };\n  }[];\n  elements: any[];\n}\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "INumberAnimate",
            "id": "interface-INumberAnimate-3607cffe065fafea8618a62f6be84877960ad2ded5f5322b65f15af3e1dcfe192bd8512f9d8c858b9a1c8ec737a8bb6c2404f296786972a4d4808420771b4c64",
            "file": "src/app/core/interface/widgets/INumberAnimate.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface INumberAnimate {\n  value: number;\n  label: string;\n}\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IPage",
            "id": "interface-IPage-c82f202a5a68c4f13467fc5c27f54faab6b210ed140ec058c8e5821fb72690d098a086d2b6a071c0a089a378b7c31ba3f7a26e2c785d3b0180786fd33b1debca",
            "file": "src/app/core/mobx/IAppConfig.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IText } from '../interface/widgets/IText';\nimport { IAmap } from '../interface/IAmap';\nexport interface IAppConfig {\n  defTheme: string;\n  config?: ICoreConfig | null;\n  page: IPage;\n}\nexport interface ICoreConfig {\n  defaultTheme: string;\n  theme: ITheme[];\n  login: ILogin;\n  defaultLogo: string;\n  defaultAvatar: string;\n  defaultThumb: string;\n  amap: IAmap;\n  apiUrl: IApiUrl;\n  loading: boolean;\n  article: IArticle;\n  editor: IEditor;\n  actions: IActions;\n  dialog: IDialog;\n  user: User;\n  commerce: Commerce;\n  googleAnalytics: GoogleAnalytics;\n  guard: Guard;\n  access: {\n    check: true;\n  };\n  qidian: {\n    id: string;\n    key: string;\n  };\n}\nexport interface ITheme {\n  name: string;\n  style: string;\n  icon?: string;\n  svgIcon?: string;\n}\n\nexport interface PhoneLogin {\n  enable: boolean;\n  tabLabel: string;\n  leftTime: number;\n  submitLabel: string;\n  error: string;\n}\n\nexport interface PswLogin {\n  enable: boolean;\n  tabLabel: string;\n  submitLabel: string;\n}\n\nexport interface ILogin {\n  loginRedirect: string;\n  left: any;\n  phoneLogin: PhoneLogin;\n  pswLogin: PswLogin;\n}\n\nexport interface Github {\n  repos: string;\n  api: string;\n}\n\nexport interface IApiUrl {\n  loginPath: string;\n  logoutPath: string;\n  userIdGetPath: string;\n  nodeGetPath: string;\n  commentGetPath: string;\n  paymentPath: string;\n  taxonomyGetPath: string;\n  flaggingGetPath: string;\n  userGetPath: string;\n  yushan: string;\n  search: any;\n  github: Github;\n}\n\nexport interface Form {\n  label: string;\n  key: string;\n  value: number;\n  type: string;\n  placeholder: string;\n  controlType: string;\n  appearance: string;\n  errorMes: string;\n  tooltip: string;\n  matTooltipPosition: string;\n  suffix: string;\n}\n\nexport interface FontSize {\n  enable: boolean;\n  form: Form[];\n}\n\nexport interface Comment {\n  enable: boolean;\n}\n\nexport interface IArticle {\n  fontSize: FontSize;\n  comment: Comment;\n}\n\nexport interface Modules {\n  toolbar: any[][];\n}\n\nexport interface IEditor {\n  modules: Modules;\n}\n\nexport interface Icon {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Flag {\n  icon: Icon;\n  enable: boolean;\n}\n\nexport interface Button {\n  icon: string;\n  label: string;\n}\n\nexport interface Share {\n  button: Button;\n  enable: boolean;\n}\n\nexport interface Icon2 {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Download {\n  label: string;\n  icon: Icon2;\n  enable: boolean;\n}\n\nexport interface IActions {\n  flag: Flag;\n  share: Share;\n  download: Download;\n}\n\nexport interface Params {\n  width: string;\n  path: string;\n  first: boolean;\n}\n\nexport interface Title {\n  label: string;\n  style: string;\n}\n\nexport interface Action {\n  type: string;\n  label: string;\n  color: string;\n  href: string;\n}\n\nexport interface Text {\n  title: Title;\n  spacer: string;\n  body: string;\n  actions: Action[];\n  actionsAlign: string;\n}\n\nexport interface ForceDialog {\n  params: Params;\n  text: Text;\n}\n\nexport interface IDialog {\n  forceDialog: ForceDialog;\n}\n\nexport interface User {\n  banner: string;\n}\nexport interface Action2 {\n  type: string;\n  label: string;\n  href: string;\n  color: string;\n}\n\nexport interface Commerce {\n  vip: string;\n  payNode: string;\n  dialog: {\n    spacer: string;\n    title: {\n      label: string;\n      style: string;\n    };\n    body: string;\n    actionsAlign: string;\n    actions: Action2[];\n  };\n}\n\nexport interface GoogleAnalytics {\n  id: string;\n}\n\nexport interface Guard {\n  authGuard: boolean;\n}\n\nexport interface IPage {\n  meta?: any[];\n  config?: any;\n  title: string;\n  body: any[];\n}\n\nexport interface ICommerce {\n  vip: string;\n  payNode: string;\n  dialog: IText;\n}\n",
            "properties": [
                {
                    "name": "body",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 227
                },
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 225
                },
                {
                    "name": "meta",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": true,
                    "description": "",
                    "line": 224
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 226
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IPaginationSimple",
            "id": "interface-IPaginationSimple-6fbe4e27f19008767bbb236c23823ddf085059f95c3d4d4f58e9e7a4f51d3cc271e0587bbe3fca97e6c6185cf5f4e611ac156cf4b790648eb3c2c17994f8fca4",
            "file": "src/app/core/interface/widgets/IPaginationSimple.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IPaginationSimple {\n  prev: {\n    href: string;\n  };\n  next: {\n    href: string;\n  };\n}\n",
            "properties": [
                {
                    "name": "next",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "prev",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IQuestion",
            "id": "interface-IQuestion-aecaca9f04241adba4e4dcdaa6c15701a3c360bfb6be39bd44169b53d3159ace2c85d1d4dc399c1df2beade066afb6ece978f5f9e34b99856579c3b99146522d",
            "file": "src/app/core/interface/node/INode.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IImg } from '@core/interface/widgets/IImg';\nimport { QuillModule } from 'ngx-quill';\nexport interface IBaseNode {\n  title: string;\n  body: string;\n  banner?: any;\n  meta?: any[];\n  params: {\n    pay?: {\n      money: number;\n    };\n    require_rule?: string[];\n    comment: ICommentParams;\n  };\n  editor?: {\n    title: any;\n    height: string;\n    modules: QuillModule;\n    placeholder: string;\n    action: any;\n    succes: any;\n  };\n  comment?: ICommentConfig;\n  actions: any[];\n  bottom: any[];\n  sidebar?: any[];\n}\n\nexport interface ICommentParams {\n  type: string;\n  id?: string;\n  attributes: {\n    entity_type?: string;\n    field_name?: string;\n    comment_body: {\n      value: any;\n      format: 'full_html' | 'plain_text';\n    };\n  };\n  relationships: {\n    comment_type?: {\n      data: {\n        type: string;\n        id: string;\n      };\n    };\n    entity_id?: {\n      data: {\n        type: string;\n        id: string;\n      };\n    };\n    uid?: {\n      data: {\n        type: string;\n        id: string;\n      };\n    };\n  };\n}\n\nexport interface ICommentContent {\n  author: {\n    img: IImg;\n    id: string;\n    title: string;\n    subTitle: string | null;\n    align: string;\n  };\n  time: string;\n  id: string;\n  content: string;\n  child: ICommentContent[] | [];\n  level: number;\n}\n\nexport interface ICommentConfig {\n  actions: string[];\n  title: boolean;\n}\n\nexport interface IQuestion extends IBaseNode {\n  topic: any[];\n}\n\nexport interface ICase extends IBaseNode {\n  date: any[];\n  block: any[];\n  form: any[];\n}\n\nexport interface ICasePrams {\n  transaction_level: 'general' | 'important' | 'exigence';\n  case_procedure: string;\n}\n",
            "properties": [
                {
                    "name": "topic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 83
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IBaseNode"
        },
        {
            "name": "ISearchAction",
            "id": "interface-ISearchAction-a49846076de153ae6ab9d4c5aa4c9901fb5c49e15623d51cb8db920fdc0030d41c567f98c59bfa2cfaadd4b2816ae19c4fd4a15a8233eadc55aab8d8718f798c",
            "file": "src/app/core/interface/widgets/IActions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IControl } from './IControl';\n\nexport interface ISearchAction {\n  type: string;\n  button: Button;\n  form: IControl[];\n}\n\nexport interface Button {\n  label: string;\n  color: string;\n}\n\nexport interface IShare {\n  type: string;\n  button: Button;\n  params: {\n    url: string;\n  };\n}\n",
            "properties": [
                {
                    "name": "button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IControl[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IShare",
            "id": "interface-IShare-a49846076de153ae6ab9d4c5aa4c9901fb5c49e15623d51cb8db920fdc0030d41c567f98c59bfa2cfaadd4b2816ae19c4fd4a15a8233eadc55aab8d8718f798c",
            "file": "src/app/core/interface/widgets/IActions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IControl } from './IControl';\n\nexport interface ISearchAction {\n  type: string;\n  button: Button;\n  form: IControl[];\n}\n\nexport interface Button {\n  label: string;\n  color: string;\n}\n\nexport interface IShare {\n  type: string;\n  button: Button;\n  params: {\n    url: string;\n  };\n}\n",
            "properties": [
                {
                    "name": "button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "params",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IShowcase2v1",
            "id": "interface-IShowcase2v1-c855c063e9601d8bd3ff82ed0c35be557b416e0abaf7f52119fa840ae130cbe505494495307bac0347bac6a375c8ed68270c9f3d6f128f5341d03a741d0bc821",
            "file": "src/app/uiux/combs/ICombs.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ICard } from '../widgets/IWidgets';\n\nexport interface IShowcase2v1 {\n  text?: any;\n  elements: ICard[];\n}\n",
            "properties": [
                {
                    "name": "elements",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICard[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IText",
            "id": "interface-IText-de6323cd493340b99337cfb8d2c78bff33db1224d1dd8b18f01ac0e770c5f52b5fd8d4489da3a10341e27c10a3a1e48570d9e88544a3c062431ce53e219d9312",
            "file": "src/app/core/interface/widgets/IText.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IBgImg } from './IBgImg';\nimport { ITitle } from './ITitle';\nimport { ILink } from '@core/interface/widgets/ILink';\n\nexport interface IText {\n  id?: string;\n  spacer?: string;\n  bg?: IBgImg;\n  classes?: string;\n  style?: any;\n  title?: ITitle;\n  body?: HTMLElement;\n  actionsAlign?: string;\n  lists?: {\n    params: {\n      icon: boolean;\n    };\n    elements: ILink[];\n  };\n  actions?: any[];\n}\n",
            "properties": [
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "actionsAlign",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "bg",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IBgImg",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "body",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "lists",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "spacer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ITitle",
                    "optional": true,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ITheme",
            "id": "interface-ITheme-c82f202a5a68c4f13467fc5c27f54faab6b210ed140ec058c8e5821fb72690d098a086d2b6a071c0a089a378b7c31ba3f7a26e2c785d3b0180786fd33b1debca",
            "file": "src/app/core/mobx/IAppConfig.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IText } from '../interface/widgets/IText';\nimport { IAmap } from '../interface/IAmap';\nexport interface IAppConfig {\n  defTheme: string;\n  config?: ICoreConfig | null;\n  page: IPage;\n}\nexport interface ICoreConfig {\n  defaultTheme: string;\n  theme: ITheme[];\n  login: ILogin;\n  defaultLogo: string;\n  defaultAvatar: string;\n  defaultThumb: string;\n  amap: IAmap;\n  apiUrl: IApiUrl;\n  loading: boolean;\n  article: IArticle;\n  editor: IEditor;\n  actions: IActions;\n  dialog: IDialog;\n  user: User;\n  commerce: Commerce;\n  googleAnalytics: GoogleAnalytics;\n  guard: Guard;\n  access: {\n    check: true;\n  };\n  qidian: {\n    id: string;\n    key: string;\n  };\n}\nexport interface ITheme {\n  name: string;\n  style: string;\n  icon?: string;\n  svgIcon?: string;\n}\n\nexport interface PhoneLogin {\n  enable: boolean;\n  tabLabel: string;\n  leftTime: number;\n  submitLabel: string;\n  error: string;\n}\n\nexport interface PswLogin {\n  enable: boolean;\n  tabLabel: string;\n  submitLabel: string;\n}\n\nexport interface ILogin {\n  loginRedirect: string;\n  left: any;\n  phoneLogin: PhoneLogin;\n  pswLogin: PswLogin;\n}\n\nexport interface Github {\n  repos: string;\n  api: string;\n}\n\nexport interface IApiUrl {\n  loginPath: string;\n  logoutPath: string;\n  userIdGetPath: string;\n  nodeGetPath: string;\n  commentGetPath: string;\n  paymentPath: string;\n  taxonomyGetPath: string;\n  flaggingGetPath: string;\n  userGetPath: string;\n  yushan: string;\n  search: any;\n  github: Github;\n}\n\nexport interface Form {\n  label: string;\n  key: string;\n  value: number;\n  type: string;\n  placeholder: string;\n  controlType: string;\n  appearance: string;\n  errorMes: string;\n  tooltip: string;\n  matTooltipPosition: string;\n  suffix: string;\n}\n\nexport interface FontSize {\n  enable: boolean;\n  form: Form[];\n}\n\nexport interface Comment {\n  enable: boolean;\n}\n\nexport interface IArticle {\n  fontSize: FontSize;\n  comment: Comment;\n}\n\nexport interface Modules {\n  toolbar: any[][];\n}\n\nexport interface IEditor {\n  modules: Modules;\n}\n\nexport interface Icon {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Flag {\n  icon: Icon;\n  enable: boolean;\n}\n\nexport interface Button {\n  icon: string;\n  label: string;\n}\n\nexport interface Share {\n  button: Button;\n  enable: boolean;\n}\n\nexport interface Icon2 {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Download {\n  label: string;\n  icon: Icon2;\n  enable: boolean;\n}\n\nexport interface IActions {\n  flag: Flag;\n  share: Share;\n  download: Download;\n}\n\nexport interface Params {\n  width: string;\n  path: string;\n  first: boolean;\n}\n\nexport interface Title {\n  label: string;\n  style: string;\n}\n\nexport interface Action {\n  type: string;\n  label: string;\n  color: string;\n  href: string;\n}\n\nexport interface Text {\n  title: Title;\n  spacer: string;\n  body: string;\n  actions: Action[];\n  actionsAlign: string;\n}\n\nexport interface ForceDialog {\n  params: Params;\n  text: Text;\n}\n\nexport interface IDialog {\n  forceDialog: ForceDialog;\n}\n\nexport interface User {\n  banner: string;\n}\nexport interface Action2 {\n  type: string;\n  label: string;\n  href: string;\n  color: string;\n}\n\nexport interface Commerce {\n  vip: string;\n  payNode: string;\n  dialog: {\n    spacer: string;\n    title: {\n      label: string;\n      style: string;\n    };\n    body: string;\n    actionsAlign: string;\n    actions: Action2[];\n  };\n}\n\nexport interface GoogleAnalytics {\n  id: string;\n}\n\nexport interface Guard {\n  authGuard: boolean;\n}\n\nexport interface IPage {\n  meta?: any[];\n  config?: any;\n  title: string;\n  body: any[];\n}\n\nexport interface ICommerce {\n  vip: string;\n  payNode: string;\n  dialog: IText;\n}\n",
            "properties": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "svgIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 38
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ITitle",
            "id": "interface-ITitle-0a1e7cac3c3e77063b70a5bbac47b08e4c4e6ff388e61419348302228681af16fdf01e1cde61cc070283323b6c04a7e4d0333091920828115ece434c4f2d13b6",
            "file": "src/app/core/interface/widgets/ITitle.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ITitle {\n  style: string;\n  classes?: string;\n  label: string;\n  icon?: string;\n}\n",
            "properties": [
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ITree",
            "id": "interface-ITree-9447059472c1a70bd36747a67613ae848ec0bbaea0ad1366706dd5e95418ad723f20365985302cf353c49d19c0a1e7ffd429dc7d9ae3d87a2d37360f08491e0d",
            "file": "src/app/core/interface/widgets/ITree.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ITree {\n  label: string;\n  nodes: any[];\n  options: any;\n  expandAll: boolean;\n  key: string;\n}\n",
            "properties": [
                {
                    "name": "expandAll",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "nodes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IUser",
            "id": "interface-IUser-36c5149e38de7d349acb785c2d10603b120291fb4bc06980bf60b318481cf2c9644db10f0e4e4cce272df86324d359d1072ccba209c1fa59287a9a55c7b39285",
            "file": "src/app/core/mobx/user/IUser.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IUser extends TokenUser {\n  id: string;\n  display_name?: string;\n  user_fullname?: string;\n  mail?: string;\n  name?: string;\n  status?: boolean;\n  authenticated: boolean;\n  picture?: string;\n}\n\nexport interface TokenUser {\n  csrf_token: string;\n  current_user: CurrentUser;\n  logout_token: string;\n}\n\nexport interface CurrentUser {\n  uid: string;\n  name: string;\n  roles: string[];\n}\n",
            "properties": [
                {
                    "name": "authenticated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "display_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "mail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "picture",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "user_fullname",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "TokenUser"
        },
        {
            "name": "Modules",
            "id": "interface-Modules-c82f202a5a68c4f13467fc5c27f54faab6b210ed140ec058c8e5821fb72690d098a086d2b6a071c0a089a378b7c31ba3f7a26e2c785d3b0180786fd33b1debca",
            "file": "src/app/core/mobx/IAppConfig.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IText } from '../interface/widgets/IText';\nimport { IAmap } from '../interface/IAmap';\nexport interface IAppConfig {\n  defTheme: string;\n  config?: ICoreConfig | null;\n  page: IPage;\n}\nexport interface ICoreConfig {\n  defaultTheme: string;\n  theme: ITheme[];\n  login: ILogin;\n  defaultLogo: string;\n  defaultAvatar: string;\n  defaultThumb: string;\n  amap: IAmap;\n  apiUrl: IApiUrl;\n  loading: boolean;\n  article: IArticle;\n  editor: IEditor;\n  actions: IActions;\n  dialog: IDialog;\n  user: User;\n  commerce: Commerce;\n  googleAnalytics: GoogleAnalytics;\n  guard: Guard;\n  access: {\n    check: true;\n  };\n  qidian: {\n    id: string;\n    key: string;\n  };\n}\nexport interface ITheme {\n  name: string;\n  style: string;\n  icon?: string;\n  svgIcon?: string;\n}\n\nexport interface PhoneLogin {\n  enable: boolean;\n  tabLabel: string;\n  leftTime: number;\n  submitLabel: string;\n  error: string;\n}\n\nexport interface PswLogin {\n  enable: boolean;\n  tabLabel: string;\n  submitLabel: string;\n}\n\nexport interface ILogin {\n  loginRedirect: string;\n  left: any;\n  phoneLogin: PhoneLogin;\n  pswLogin: PswLogin;\n}\n\nexport interface Github {\n  repos: string;\n  api: string;\n}\n\nexport interface IApiUrl {\n  loginPath: string;\n  logoutPath: string;\n  userIdGetPath: string;\n  nodeGetPath: string;\n  commentGetPath: string;\n  paymentPath: string;\n  taxonomyGetPath: string;\n  flaggingGetPath: string;\n  userGetPath: string;\n  yushan: string;\n  search: any;\n  github: Github;\n}\n\nexport interface Form {\n  label: string;\n  key: string;\n  value: number;\n  type: string;\n  placeholder: string;\n  controlType: string;\n  appearance: string;\n  errorMes: string;\n  tooltip: string;\n  matTooltipPosition: string;\n  suffix: string;\n}\n\nexport interface FontSize {\n  enable: boolean;\n  form: Form[];\n}\n\nexport interface Comment {\n  enable: boolean;\n}\n\nexport interface IArticle {\n  fontSize: FontSize;\n  comment: Comment;\n}\n\nexport interface Modules {\n  toolbar: any[][];\n}\n\nexport interface IEditor {\n  modules: Modules;\n}\n\nexport interface Icon {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Flag {\n  icon: Icon;\n  enable: boolean;\n}\n\nexport interface Button {\n  icon: string;\n  label: string;\n}\n\nexport interface Share {\n  button: Button;\n  enable: boolean;\n}\n\nexport interface Icon2 {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Download {\n  label: string;\n  icon: Icon2;\n  enable: boolean;\n}\n\nexport interface IActions {\n  flag: Flag;\n  share: Share;\n  download: Download;\n}\n\nexport interface Params {\n  width: string;\n  path: string;\n  first: boolean;\n}\n\nexport interface Title {\n  label: string;\n  style: string;\n}\n\nexport interface Action {\n  type: string;\n  label: string;\n  color: string;\n  href: string;\n}\n\nexport interface Text {\n  title: Title;\n  spacer: string;\n  body: string;\n  actions: Action[];\n  actionsAlign: string;\n}\n\nexport interface ForceDialog {\n  params: Params;\n  text: Text;\n}\n\nexport interface IDialog {\n  forceDialog: ForceDialog;\n}\n\nexport interface User {\n  banner: string;\n}\nexport interface Action2 {\n  type: string;\n  label: string;\n  href: string;\n  color: string;\n}\n\nexport interface Commerce {\n  vip: string;\n  payNode: string;\n  dialog: {\n    spacer: string;\n    title: {\n      label: string;\n      style: string;\n    };\n    body: string;\n    actionsAlign: string;\n    actions: Action2[];\n  };\n}\n\nexport interface GoogleAnalytics {\n  id: string;\n}\n\nexport interface Guard {\n  authGuard: boolean;\n}\n\nexport interface IPage {\n  meta?: any[];\n  config?: any;\n  title: string;\n  body: any[];\n}\n\nexport interface ICommerce {\n  vip: string;\n  payNode: string;\n  dialog: IText;\n}\n",
            "properties": [
                {
                    "name": "toolbar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[][]",
                    "optional": false,
                    "description": "",
                    "line": 111
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Params",
            "id": "interface-Params-c82f202a5a68c4f13467fc5c27f54faab6b210ed140ec058c8e5821fb72690d098a086d2b6a071c0a089a378b7c31ba3f7a26e2c785d3b0180786fd33b1debca",
            "file": "src/app/core/mobx/IAppConfig.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IText } from '../interface/widgets/IText';\nimport { IAmap } from '../interface/IAmap';\nexport interface IAppConfig {\n  defTheme: string;\n  config?: ICoreConfig | null;\n  page: IPage;\n}\nexport interface ICoreConfig {\n  defaultTheme: string;\n  theme: ITheme[];\n  login: ILogin;\n  defaultLogo: string;\n  defaultAvatar: string;\n  defaultThumb: string;\n  amap: IAmap;\n  apiUrl: IApiUrl;\n  loading: boolean;\n  article: IArticle;\n  editor: IEditor;\n  actions: IActions;\n  dialog: IDialog;\n  user: User;\n  commerce: Commerce;\n  googleAnalytics: GoogleAnalytics;\n  guard: Guard;\n  access: {\n    check: true;\n  };\n  qidian: {\n    id: string;\n    key: string;\n  };\n}\nexport interface ITheme {\n  name: string;\n  style: string;\n  icon?: string;\n  svgIcon?: string;\n}\n\nexport interface PhoneLogin {\n  enable: boolean;\n  tabLabel: string;\n  leftTime: number;\n  submitLabel: string;\n  error: string;\n}\n\nexport interface PswLogin {\n  enable: boolean;\n  tabLabel: string;\n  submitLabel: string;\n}\n\nexport interface ILogin {\n  loginRedirect: string;\n  left: any;\n  phoneLogin: PhoneLogin;\n  pswLogin: PswLogin;\n}\n\nexport interface Github {\n  repos: string;\n  api: string;\n}\n\nexport interface IApiUrl {\n  loginPath: string;\n  logoutPath: string;\n  userIdGetPath: string;\n  nodeGetPath: string;\n  commentGetPath: string;\n  paymentPath: string;\n  taxonomyGetPath: string;\n  flaggingGetPath: string;\n  userGetPath: string;\n  yushan: string;\n  search: any;\n  github: Github;\n}\n\nexport interface Form {\n  label: string;\n  key: string;\n  value: number;\n  type: string;\n  placeholder: string;\n  controlType: string;\n  appearance: string;\n  errorMes: string;\n  tooltip: string;\n  matTooltipPosition: string;\n  suffix: string;\n}\n\nexport interface FontSize {\n  enable: boolean;\n  form: Form[];\n}\n\nexport interface Comment {\n  enable: boolean;\n}\n\nexport interface IArticle {\n  fontSize: FontSize;\n  comment: Comment;\n}\n\nexport interface Modules {\n  toolbar: any[][];\n}\n\nexport interface IEditor {\n  modules: Modules;\n}\n\nexport interface Icon {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Flag {\n  icon: Icon;\n  enable: boolean;\n}\n\nexport interface Button {\n  icon: string;\n  label: string;\n}\n\nexport interface Share {\n  button: Button;\n  enable: boolean;\n}\n\nexport interface Icon2 {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Download {\n  label: string;\n  icon: Icon2;\n  enable: boolean;\n}\n\nexport interface IActions {\n  flag: Flag;\n  share: Share;\n  download: Download;\n}\n\nexport interface Params {\n  width: string;\n  path: string;\n  first: boolean;\n}\n\nexport interface Title {\n  label: string;\n  style: string;\n}\n\nexport interface Action {\n  type: string;\n  label: string;\n  color: string;\n  href: string;\n}\n\nexport interface Text {\n  title: Title;\n  spacer: string;\n  body: string;\n  actions: Action[];\n  actionsAlign: string;\n}\n\nexport interface ForceDialog {\n  params: Params;\n  text: Text;\n}\n\nexport interface IDialog {\n  forceDialog: ForceDialog;\n}\n\nexport interface User {\n  banner: string;\n}\nexport interface Action2 {\n  type: string;\n  label: string;\n  href: string;\n  color: string;\n}\n\nexport interface Commerce {\n  vip: string;\n  payNode: string;\n  dialog: {\n    spacer: string;\n    title: {\n      label: string;\n      style: string;\n    };\n    body: string;\n    actionsAlign: string;\n    actions: Action2[];\n  };\n}\n\nexport interface GoogleAnalytics {\n  id: string;\n}\n\nexport interface Guard {\n  authGuard: boolean;\n}\n\nexport interface IPage {\n  meta?: any[];\n  config?: any;\n  title: string;\n  body: any[];\n}\n\nexport interface ICommerce {\n  vip: string;\n  payNode: string;\n  dialog: IText;\n}\n",
            "properties": [
                {
                    "name": "first",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 158
                },
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 157
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 156
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Params",
            "id": "interface-Params-e2ec04e987aefccfa55dcbb8561fb28f207b35ffedb84f61df0e12956eb8879383c9e3eb2b53cf5f4370454fb36b91cdaa23edd75e5714675403cc62ff3f45ae-1",
            "file": "src/app/core/interface/widgets/IFlag.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IIcon } from './IIcon';\n\nexport interface IFlag {\n  type: string;\n  label: string;\n  icon: IIcon;\n  params: Params;\n}\n\nexport interface Params {\n  type: string;\n  entity_type: string;\n  entity_id: string;\n  relationships: Relationships;\n}\n\nexport interface Relationships {\n  flagged_entity: FlaggedEntity;\n}\n\nexport interface FlaggedEntity {\n  type: string;\n  id: string;\n}\n",
            "properties": [
                {
                    "name": "entity_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "entity_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "relationships",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Relationships",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Params-1"
        },
        {
            "name": "PhoneLogin",
            "id": "interface-PhoneLogin-c82f202a5a68c4f13467fc5c27f54faab6b210ed140ec058c8e5821fb72690d098a086d2b6a071c0a089a378b7c31ba3f7a26e2c785d3b0180786fd33b1debca",
            "file": "src/app/core/mobx/IAppConfig.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IText } from '../interface/widgets/IText';\nimport { IAmap } from '../interface/IAmap';\nexport interface IAppConfig {\n  defTheme: string;\n  config?: ICoreConfig | null;\n  page: IPage;\n}\nexport interface ICoreConfig {\n  defaultTheme: string;\n  theme: ITheme[];\n  login: ILogin;\n  defaultLogo: string;\n  defaultAvatar: string;\n  defaultThumb: string;\n  amap: IAmap;\n  apiUrl: IApiUrl;\n  loading: boolean;\n  article: IArticle;\n  editor: IEditor;\n  actions: IActions;\n  dialog: IDialog;\n  user: User;\n  commerce: Commerce;\n  googleAnalytics: GoogleAnalytics;\n  guard: Guard;\n  access: {\n    check: true;\n  };\n  qidian: {\n    id: string;\n    key: string;\n  };\n}\nexport interface ITheme {\n  name: string;\n  style: string;\n  icon?: string;\n  svgIcon?: string;\n}\n\nexport interface PhoneLogin {\n  enable: boolean;\n  tabLabel: string;\n  leftTime: number;\n  submitLabel: string;\n  error: string;\n}\n\nexport interface PswLogin {\n  enable: boolean;\n  tabLabel: string;\n  submitLabel: string;\n}\n\nexport interface ILogin {\n  loginRedirect: string;\n  left: any;\n  phoneLogin: PhoneLogin;\n  pswLogin: PswLogin;\n}\n\nexport interface Github {\n  repos: string;\n  api: string;\n}\n\nexport interface IApiUrl {\n  loginPath: string;\n  logoutPath: string;\n  userIdGetPath: string;\n  nodeGetPath: string;\n  commentGetPath: string;\n  paymentPath: string;\n  taxonomyGetPath: string;\n  flaggingGetPath: string;\n  userGetPath: string;\n  yushan: string;\n  search: any;\n  github: Github;\n}\n\nexport interface Form {\n  label: string;\n  key: string;\n  value: number;\n  type: string;\n  placeholder: string;\n  controlType: string;\n  appearance: string;\n  errorMes: string;\n  tooltip: string;\n  matTooltipPosition: string;\n  suffix: string;\n}\n\nexport interface FontSize {\n  enable: boolean;\n  form: Form[];\n}\n\nexport interface Comment {\n  enable: boolean;\n}\n\nexport interface IArticle {\n  fontSize: FontSize;\n  comment: Comment;\n}\n\nexport interface Modules {\n  toolbar: any[][];\n}\n\nexport interface IEditor {\n  modules: Modules;\n}\n\nexport interface Icon {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Flag {\n  icon: Icon;\n  enable: boolean;\n}\n\nexport interface Button {\n  icon: string;\n  label: string;\n}\n\nexport interface Share {\n  button: Button;\n  enable: boolean;\n}\n\nexport interface Icon2 {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Download {\n  label: string;\n  icon: Icon2;\n  enable: boolean;\n}\n\nexport interface IActions {\n  flag: Flag;\n  share: Share;\n  download: Download;\n}\n\nexport interface Params {\n  width: string;\n  path: string;\n  first: boolean;\n}\n\nexport interface Title {\n  label: string;\n  style: string;\n}\n\nexport interface Action {\n  type: string;\n  label: string;\n  color: string;\n  href: string;\n}\n\nexport interface Text {\n  title: Title;\n  spacer: string;\n  body: string;\n  actions: Action[];\n  actionsAlign: string;\n}\n\nexport interface ForceDialog {\n  params: Params;\n  text: Text;\n}\n\nexport interface IDialog {\n  forceDialog: ForceDialog;\n}\n\nexport interface User {\n  banner: string;\n}\nexport interface Action2 {\n  type: string;\n  label: string;\n  href: string;\n  color: string;\n}\n\nexport interface Commerce {\n  vip: string;\n  payNode: string;\n  dialog: {\n    spacer: string;\n    title: {\n      label: string;\n      style: string;\n    };\n    body: string;\n    actionsAlign: string;\n    actions: Action2[];\n  };\n}\n\nexport interface GoogleAnalytics {\n  id: string;\n}\n\nexport interface Guard {\n  authGuard: boolean;\n}\n\nexport interface IPage {\n  meta?: any[];\n  config?: any;\n  title: string;\n  body: any[];\n}\n\nexport interface ICommerce {\n  vip: string;\n  payNode: string;\n  dialog: IText;\n}\n",
            "properties": [
                {
                    "name": "enable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "leftTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "submitLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "tabLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "PswLogin",
            "id": "interface-PswLogin-c82f202a5a68c4f13467fc5c27f54faab6b210ed140ec058c8e5821fb72690d098a086d2b6a071c0a089a378b7c31ba3f7a26e2c785d3b0180786fd33b1debca",
            "file": "src/app/core/mobx/IAppConfig.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IText } from '../interface/widgets/IText';\nimport { IAmap } from '../interface/IAmap';\nexport interface IAppConfig {\n  defTheme: string;\n  config?: ICoreConfig | null;\n  page: IPage;\n}\nexport interface ICoreConfig {\n  defaultTheme: string;\n  theme: ITheme[];\n  login: ILogin;\n  defaultLogo: string;\n  defaultAvatar: string;\n  defaultThumb: string;\n  amap: IAmap;\n  apiUrl: IApiUrl;\n  loading: boolean;\n  article: IArticle;\n  editor: IEditor;\n  actions: IActions;\n  dialog: IDialog;\n  user: User;\n  commerce: Commerce;\n  googleAnalytics: GoogleAnalytics;\n  guard: Guard;\n  access: {\n    check: true;\n  };\n  qidian: {\n    id: string;\n    key: string;\n  };\n}\nexport interface ITheme {\n  name: string;\n  style: string;\n  icon?: string;\n  svgIcon?: string;\n}\n\nexport interface PhoneLogin {\n  enable: boolean;\n  tabLabel: string;\n  leftTime: number;\n  submitLabel: string;\n  error: string;\n}\n\nexport interface PswLogin {\n  enable: boolean;\n  tabLabel: string;\n  submitLabel: string;\n}\n\nexport interface ILogin {\n  loginRedirect: string;\n  left: any;\n  phoneLogin: PhoneLogin;\n  pswLogin: PswLogin;\n}\n\nexport interface Github {\n  repos: string;\n  api: string;\n}\n\nexport interface IApiUrl {\n  loginPath: string;\n  logoutPath: string;\n  userIdGetPath: string;\n  nodeGetPath: string;\n  commentGetPath: string;\n  paymentPath: string;\n  taxonomyGetPath: string;\n  flaggingGetPath: string;\n  userGetPath: string;\n  yushan: string;\n  search: any;\n  github: Github;\n}\n\nexport interface Form {\n  label: string;\n  key: string;\n  value: number;\n  type: string;\n  placeholder: string;\n  controlType: string;\n  appearance: string;\n  errorMes: string;\n  tooltip: string;\n  matTooltipPosition: string;\n  suffix: string;\n}\n\nexport interface FontSize {\n  enable: boolean;\n  form: Form[];\n}\n\nexport interface Comment {\n  enable: boolean;\n}\n\nexport interface IArticle {\n  fontSize: FontSize;\n  comment: Comment;\n}\n\nexport interface Modules {\n  toolbar: any[][];\n}\n\nexport interface IEditor {\n  modules: Modules;\n}\n\nexport interface Icon {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Flag {\n  icon: Icon;\n  enable: boolean;\n}\n\nexport interface Button {\n  icon: string;\n  label: string;\n}\n\nexport interface Share {\n  button: Button;\n  enable: boolean;\n}\n\nexport interface Icon2 {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Download {\n  label: string;\n  icon: Icon2;\n  enable: boolean;\n}\n\nexport interface IActions {\n  flag: Flag;\n  share: Share;\n  download: Download;\n}\n\nexport interface Params {\n  width: string;\n  path: string;\n  first: boolean;\n}\n\nexport interface Title {\n  label: string;\n  style: string;\n}\n\nexport interface Action {\n  type: string;\n  label: string;\n  color: string;\n  href: string;\n}\n\nexport interface Text {\n  title: Title;\n  spacer: string;\n  body: string;\n  actions: Action[];\n  actionsAlign: string;\n}\n\nexport interface ForceDialog {\n  params: Params;\n  text: Text;\n}\n\nexport interface IDialog {\n  forceDialog: ForceDialog;\n}\n\nexport interface User {\n  banner: string;\n}\nexport interface Action2 {\n  type: string;\n  label: string;\n  href: string;\n  color: string;\n}\n\nexport interface Commerce {\n  vip: string;\n  payNode: string;\n  dialog: {\n    spacer: string;\n    title: {\n      label: string;\n      style: string;\n    };\n    body: string;\n    actionsAlign: string;\n    actions: Action2[];\n  };\n}\n\nexport interface GoogleAnalytics {\n  id: string;\n}\n\nexport interface Guard {\n  authGuard: boolean;\n}\n\nexport interface IPage {\n  meta?: any[];\n  config?: any;\n  title: string;\n  body: any[];\n}\n\nexport interface ICommerce {\n  vip: string;\n  payNode: string;\n  dialog: IText;\n}\n",
            "properties": [
                {
                    "name": "enable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "submitLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "tabLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Relationships",
            "id": "interface-Relationships-e2ec04e987aefccfa55dcbb8561fb28f207b35ffedb84f61df0e12956eb8879383c9e3eb2b53cf5f4370454fb36b91cdaa23edd75e5714675403cc62ff3f45ae",
            "file": "src/app/core/interface/widgets/IFlag.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IIcon } from './IIcon';\n\nexport interface IFlag {\n  type: string;\n  label: string;\n  icon: IIcon;\n  params: Params;\n}\n\nexport interface Params {\n  type: string;\n  entity_type: string;\n  entity_id: string;\n  relationships: Relationships;\n}\n\nexport interface Relationships {\n  flagged_entity: FlaggedEntity;\n}\n\nexport interface FlaggedEntity {\n  type: string;\n  id: string;\n}\n",
            "properties": [
                {
                    "name": "flagged_entity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FlaggedEntity",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Share",
            "id": "interface-Share-c82f202a5a68c4f13467fc5c27f54faab6b210ed140ec058c8e5821fb72690d098a086d2b6a071c0a089a378b7c31ba3f7a26e2c785d3b0180786fd33b1debca",
            "file": "src/app/core/mobx/IAppConfig.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IText } from '../interface/widgets/IText';\nimport { IAmap } from '../interface/IAmap';\nexport interface IAppConfig {\n  defTheme: string;\n  config?: ICoreConfig | null;\n  page: IPage;\n}\nexport interface ICoreConfig {\n  defaultTheme: string;\n  theme: ITheme[];\n  login: ILogin;\n  defaultLogo: string;\n  defaultAvatar: string;\n  defaultThumb: string;\n  amap: IAmap;\n  apiUrl: IApiUrl;\n  loading: boolean;\n  article: IArticle;\n  editor: IEditor;\n  actions: IActions;\n  dialog: IDialog;\n  user: User;\n  commerce: Commerce;\n  googleAnalytics: GoogleAnalytics;\n  guard: Guard;\n  access: {\n    check: true;\n  };\n  qidian: {\n    id: string;\n    key: string;\n  };\n}\nexport interface ITheme {\n  name: string;\n  style: string;\n  icon?: string;\n  svgIcon?: string;\n}\n\nexport interface PhoneLogin {\n  enable: boolean;\n  tabLabel: string;\n  leftTime: number;\n  submitLabel: string;\n  error: string;\n}\n\nexport interface PswLogin {\n  enable: boolean;\n  tabLabel: string;\n  submitLabel: string;\n}\n\nexport interface ILogin {\n  loginRedirect: string;\n  left: any;\n  phoneLogin: PhoneLogin;\n  pswLogin: PswLogin;\n}\n\nexport interface Github {\n  repos: string;\n  api: string;\n}\n\nexport interface IApiUrl {\n  loginPath: string;\n  logoutPath: string;\n  userIdGetPath: string;\n  nodeGetPath: string;\n  commentGetPath: string;\n  paymentPath: string;\n  taxonomyGetPath: string;\n  flaggingGetPath: string;\n  userGetPath: string;\n  yushan: string;\n  search: any;\n  github: Github;\n}\n\nexport interface Form {\n  label: string;\n  key: string;\n  value: number;\n  type: string;\n  placeholder: string;\n  controlType: string;\n  appearance: string;\n  errorMes: string;\n  tooltip: string;\n  matTooltipPosition: string;\n  suffix: string;\n}\n\nexport interface FontSize {\n  enable: boolean;\n  form: Form[];\n}\n\nexport interface Comment {\n  enable: boolean;\n}\n\nexport interface IArticle {\n  fontSize: FontSize;\n  comment: Comment;\n}\n\nexport interface Modules {\n  toolbar: any[][];\n}\n\nexport interface IEditor {\n  modules: Modules;\n}\n\nexport interface Icon {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Flag {\n  icon: Icon;\n  enable: boolean;\n}\n\nexport interface Button {\n  icon: string;\n  label: string;\n}\n\nexport interface Share {\n  button: Button;\n  enable: boolean;\n}\n\nexport interface Icon2 {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Download {\n  label: string;\n  icon: Icon2;\n  enable: boolean;\n}\n\nexport interface IActions {\n  flag: Flag;\n  share: Share;\n  download: Download;\n}\n\nexport interface Params {\n  width: string;\n  path: string;\n  first: boolean;\n}\n\nexport interface Title {\n  label: string;\n  style: string;\n}\n\nexport interface Action {\n  type: string;\n  label: string;\n  color: string;\n  href: string;\n}\n\nexport interface Text {\n  title: Title;\n  spacer: string;\n  body: string;\n  actions: Action[];\n  actionsAlign: string;\n}\n\nexport interface ForceDialog {\n  params: Params;\n  text: Text;\n}\n\nexport interface IDialog {\n  forceDialog: ForceDialog;\n}\n\nexport interface User {\n  banner: string;\n}\nexport interface Action2 {\n  type: string;\n  label: string;\n  href: string;\n  color: string;\n}\n\nexport interface Commerce {\n  vip: string;\n  payNode: string;\n  dialog: {\n    spacer: string;\n    title: {\n      label: string;\n      style: string;\n    };\n    body: string;\n    actionsAlign: string;\n    actions: Action2[];\n  };\n}\n\nexport interface GoogleAnalytics {\n  id: string;\n}\n\nexport interface Guard {\n  authGuard: boolean;\n}\n\nexport interface IPage {\n  meta?: any[];\n  config?: any;\n  title: string;\n  body: any[];\n}\n\nexport interface ICommerce {\n  vip: string;\n  payNode: string;\n  dialog: IText;\n}\n",
            "properties": [
                {
                    "name": "button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 134
                },
                {
                    "name": "enable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 135
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Text",
            "id": "interface-Text-c82f202a5a68c4f13467fc5c27f54faab6b210ed140ec058c8e5821fb72690d098a086d2b6a071c0a089a378b7c31ba3f7a26e2c785d3b0180786fd33b1debca",
            "file": "src/app/core/mobx/IAppConfig.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IText } from '../interface/widgets/IText';\nimport { IAmap } from '../interface/IAmap';\nexport interface IAppConfig {\n  defTheme: string;\n  config?: ICoreConfig | null;\n  page: IPage;\n}\nexport interface ICoreConfig {\n  defaultTheme: string;\n  theme: ITheme[];\n  login: ILogin;\n  defaultLogo: string;\n  defaultAvatar: string;\n  defaultThumb: string;\n  amap: IAmap;\n  apiUrl: IApiUrl;\n  loading: boolean;\n  article: IArticle;\n  editor: IEditor;\n  actions: IActions;\n  dialog: IDialog;\n  user: User;\n  commerce: Commerce;\n  googleAnalytics: GoogleAnalytics;\n  guard: Guard;\n  access: {\n    check: true;\n  };\n  qidian: {\n    id: string;\n    key: string;\n  };\n}\nexport interface ITheme {\n  name: string;\n  style: string;\n  icon?: string;\n  svgIcon?: string;\n}\n\nexport interface PhoneLogin {\n  enable: boolean;\n  tabLabel: string;\n  leftTime: number;\n  submitLabel: string;\n  error: string;\n}\n\nexport interface PswLogin {\n  enable: boolean;\n  tabLabel: string;\n  submitLabel: string;\n}\n\nexport interface ILogin {\n  loginRedirect: string;\n  left: any;\n  phoneLogin: PhoneLogin;\n  pswLogin: PswLogin;\n}\n\nexport interface Github {\n  repos: string;\n  api: string;\n}\n\nexport interface IApiUrl {\n  loginPath: string;\n  logoutPath: string;\n  userIdGetPath: string;\n  nodeGetPath: string;\n  commentGetPath: string;\n  paymentPath: string;\n  taxonomyGetPath: string;\n  flaggingGetPath: string;\n  userGetPath: string;\n  yushan: string;\n  search: any;\n  github: Github;\n}\n\nexport interface Form {\n  label: string;\n  key: string;\n  value: number;\n  type: string;\n  placeholder: string;\n  controlType: string;\n  appearance: string;\n  errorMes: string;\n  tooltip: string;\n  matTooltipPosition: string;\n  suffix: string;\n}\n\nexport interface FontSize {\n  enable: boolean;\n  form: Form[];\n}\n\nexport interface Comment {\n  enable: boolean;\n}\n\nexport interface IArticle {\n  fontSize: FontSize;\n  comment: Comment;\n}\n\nexport interface Modules {\n  toolbar: any[][];\n}\n\nexport interface IEditor {\n  modules: Modules;\n}\n\nexport interface Icon {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Flag {\n  icon: Icon;\n  enable: boolean;\n}\n\nexport interface Button {\n  icon: string;\n  label: string;\n}\n\nexport interface Share {\n  button: Button;\n  enable: boolean;\n}\n\nexport interface Icon2 {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Download {\n  label: string;\n  icon: Icon2;\n  enable: boolean;\n}\n\nexport interface IActions {\n  flag: Flag;\n  share: Share;\n  download: Download;\n}\n\nexport interface Params {\n  width: string;\n  path: string;\n  first: boolean;\n}\n\nexport interface Title {\n  label: string;\n  style: string;\n}\n\nexport interface Action {\n  type: string;\n  label: string;\n  color: string;\n  href: string;\n}\n\nexport interface Text {\n  title: Title;\n  spacer: string;\n  body: string;\n  actions: Action[];\n  actionsAlign: string;\n}\n\nexport interface ForceDialog {\n  params: Params;\n  text: Text;\n}\n\nexport interface IDialog {\n  forceDialog: ForceDialog;\n}\n\nexport interface User {\n  banner: string;\n}\nexport interface Action2 {\n  type: string;\n  label: string;\n  href: string;\n  color: string;\n}\n\nexport interface Commerce {\n  vip: string;\n  payNode: string;\n  dialog: {\n    spacer: string;\n    title: {\n      label: string;\n      style: string;\n    };\n    body: string;\n    actionsAlign: string;\n    actions: Action2[];\n  };\n}\n\nexport interface GoogleAnalytics {\n  id: string;\n}\n\nexport interface Guard {\n  authGuard: boolean;\n}\n\nexport interface IPage {\n  meta?: any[];\n  config?: any;\n  title: string;\n  body: any[];\n}\n\nexport interface ICommerce {\n  vip: string;\n  payNode: string;\n  dialog: IText;\n}\n",
            "properties": [
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Action[]",
                    "optional": false,
                    "description": "",
                    "line": 177
                },
                {
                    "name": "actionsAlign",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 178
                },
                {
                    "name": "body",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 176
                },
                {
                    "name": "spacer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 175
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Title",
                    "optional": false,
                    "description": "",
                    "line": 174
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Title",
            "id": "interface-Title-c82f202a5a68c4f13467fc5c27f54faab6b210ed140ec058c8e5821fb72690d098a086d2b6a071c0a089a378b7c31ba3f7a26e2c785d3b0180786fd33b1debca",
            "file": "src/app/core/mobx/IAppConfig.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IText } from '../interface/widgets/IText';\nimport { IAmap } from '../interface/IAmap';\nexport interface IAppConfig {\n  defTheme: string;\n  config?: ICoreConfig | null;\n  page: IPage;\n}\nexport interface ICoreConfig {\n  defaultTheme: string;\n  theme: ITheme[];\n  login: ILogin;\n  defaultLogo: string;\n  defaultAvatar: string;\n  defaultThumb: string;\n  amap: IAmap;\n  apiUrl: IApiUrl;\n  loading: boolean;\n  article: IArticle;\n  editor: IEditor;\n  actions: IActions;\n  dialog: IDialog;\n  user: User;\n  commerce: Commerce;\n  googleAnalytics: GoogleAnalytics;\n  guard: Guard;\n  access: {\n    check: true;\n  };\n  qidian: {\n    id: string;\n    key: string;\n  };\n}\nexport interface ITheme {\n  name: string;\n  style: string;\n  icon?: string;\n  svgIcon?: string;\n}\n\nexport interface PhoneLogin {\n  enable: boolean;\n  tabLabel: string;\n  leftTime: number;\n  submitLabel: string;\n  error: string;\n}\n\nexport interface PswLogin {\n  enable: boolean;\n  tabLabel: string;\n  submitLabel: string;\n}\n\nexport interface ILogin {\n  loginRedirect: string;\n  left: any;\n  phoneLogin: PhoneLogin;\n  pswLogin: PswLogin;\n}\n\nexport interface Github {\n  repos: string;\n  api: string;\n}\n\nexport interface IApiUrl {\n  loginPath: string;\n  logoutPath: string;\n  userIdGetPath: string;\n  nodeGetPath: string;\n  commentGetPath: string;\n  paymentPath: string;\n  taxonomyGetPath: string;\n  flaggingGetPath: string;\n  userGetPath: string;\n  yushan: string;\n  search: any;\n  github: Github;\n}\n\nexport interface Form {\n  label: string;\n  key: string;\n  value: number;\n  type: string;\n  placeholder: string;\n  controlType: string;\n  appearance: string;\n  errorMes: string;\n  tooltip: string;\n  matTooltipPosition: string;\n  suffix: string;\n}\n\nexport interface FontSize {\n  enable: boolean;\n  form: Form[];\n}\n\nexport interface Comment {\n  enable: boolean;\n}\n\nexport interface IArticle {\n  fontSize: FontSize;\n  comment: Comment;\n}\n\nexport interface Modules {\n  toolbar: any[][];\n}\n\nexport interface IEditor {\n  modules: Modules;\n}\n\nexport interface Icon {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Flag {\n  icon: Icon;\n  enable: boolean;\n}\n\nexport interface Button {\n  icon: string;\n  label: string;\n}\n\nexport interface Share {\n  button: Button;\n  enable: boolean;\n}\n\nexport interface Icon2 {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Download {\n  label: string;\n  icon: Icon2;\n  enable: boolean;\n}\n\nexport interface IActions {\n  flag: Flag;\n  share: Share;\n  download: Download;\n}\n\nexport interface Params {\n  width: string;\n  path: string;\n  first: boolean;\n}\n\nexport interface Title {\n  label: string;\n  style: string;\n}\n\nexport interface Action {\n  type: string;\n  label: string;\n  color: string;\n  href: string;\n}\n\nexport interface Text {\n  title: Title;\n  spacer: string;\n  body: string;\n  actions: Action[];\n  actionsAlign: string;\n}\n\nexport interface ForceDialog {\n  params: Params;\n  text: Text;\n}\n\nexport interface IDialog {\n  forceDialog: ForceDialog;\n}\n\nexport interface User {\n  banner: string;\n}\nexport interface Action2 {\n  type: string;\n  label: string;\n  href: string;\n  color: string;\n}\n\nexport interface Commerce {\n  vip: string;\n  payNode: string;\n  dialog: {\n    spacer: string;\n    title: {\n      label: string;\n      style: string;\n    };\n    body: string;\n    actionsAlign: string;\n    actions: Action2[];\n  };\n}\n\nexport interface GoogleAnalytics {\n  id: string;\n}\n\nexport interface Guard {\n  authGuard: boolean;\n}\n\nexport interface IPage {\n  meta?: any[];\n  config?: any;\n  title: string;\n  body: any[];\n}\n\nexport interface ICommerce {\n  vip: string;\n  payNode: string;\n  dialog: IText;\n}\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 162
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 163
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TokenUser",
            "id": "interface-TokenUser-36c5149e38de7d349acb785c2d10603b120291fb4bc06980bf60b318481cf2c9644db10f0e4e4cce272df86324d359d1072ccba209c1fa59287a9a55c7b39285",
            "file": "src/app/core/mobx/user/IUser.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IUser extends TokenUser {\n  id: string;\n  display_name?: string;\n  user_fullname?: string;\n  mail?: string;\n  name?: string;\n  status?: boolean;\n  authenticated: boolean;\n  picture?: string;\n}\n\nexport interface TokenUser {\n  csrf_token: string;\n  current_user: CurrentUser;\n  logout_token: string;\n}\n\nexport interface CurrentUser {\n  uid: string;\n  name: string;\n  roles: string[];\n}\n",
            "properties": [
                {
                    "name": "csrf_token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "current_user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CurrentUser",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "logout_token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-c82f202a5a68c4f13467fc5c27f54faab6b210ed140ec058c8e5821fb72690d098a086d2b6a071c0a089a378b7c31ba3f7a26e2c785d3b0180786fd33b1debca-1",
            "file": "src/app/core/mobx/IAppConfig.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IText } from '../interface/widgets/IText';\nimport { IAmap } from '../interface/IAmap';\nexport interface IAppConfig {\n  defTheme: string;\n  config?: ICoreConfig | null;\n  page: IPage;\n}\nexport interface ICoreConfig {\n  defaultTheme: string;\n  theme: ITheme[];\n  login: ILogin;\n  defaultLogo: string;\n  defaultAvatar: string;\n  defaultThumb: string;\n  amap: IAmap;\n  apiUrl: IApiUrl;\n  loading: boolean;\n  article: IArticle;\n  editor: IEditor;\n  actions: IActions;\n  dialog: IDialog;\n  user: User;\n  commerce: Commerce;\n  googleAnalytics: GoogleAnalytics;\n  guard: Guard;\n  access: {\n    check: true;\n  };\n  qidian: {\n    id: string;\n    key: string;\n  };\n}\nexport interface ITheme {\n  name: string;\n  style: string;\n  icon?: string;\n  svgIcon?: string;\n}\n\nexport interface PhoneLogin {\n  enable: boolean;\n  tabLabel: string;\n  leftTime: number;\n  submitLabel: string;\n  error: string;\n}\n\nexport interface PswLogin {\n  enable: boolean;\n  tabLabel: string;\n  submitLabel: string;\n}\n\nexport interface ILogin {\n  loginRedirect: string;\n  left: any;\n  phoneLogin: PhoneLogin;\n  pswLogin: PswLogin;\n}\n\nexport interface Github {\n  repos: string;\n  api: string;\n}\n\nexport interface IApiUrl {\n  loginPath: string;\n  logoutPath: string;\n  userIdGetPath: string;\n  nodeGetPath: string;\n  commentGetPath: string;\n  paymentPath: string;\n  taxonomyGetPath: string;\n  flaggingGetPath: string;\n  userGetPath: string;\n  yushan: string;\n  search: any;\n  github: Github;\n}\n\nexport interface Form {\n  label: string;\n  key: string;\n  value: number;\n  type: string;\n  placeholder: string;\n  controlType: string;\n  appearance: string;\n  errorMes: string;\n  tooltip: string;\n  matTooltipPosition: string;\n  suffix: string;\n}\n\nexport interface FontSize {\n  enable: boolean;\n  form: Form[];\n}\n\nexport interface Comment {\n  enable: boolean;\n}\n\nexport interface IArticle {\n  fontSize: FontSize;\n  comment: Comment;\n}\n\nexport interface Modules {\n  toolbar: any[][];\n}\n\nexport interface IEditor {\n  modules: Modules;\n}\n\nexport interface Icon {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Flag {\n  icon: Icon;\n  enable: boolean;\n}\n\nexport interface Button {\n  icon: string;\n  label: string;\n}\n\nexport interface Share {\n  button: Button;\n  enable: boolean;\n}\n\nexport interface Icon2 {\n  name: string;\n  inline: boolean;\n}\n\nexport interface Download {\n  label: string;\n  icon: Icon2;\n  enable: boolean;\n}\n\nexport interface IActions {\n  flag: Flag;\n  share: Share;\n  download: Download;\n}\n\nexport interface Params {\n  width: string;\n  path: string;\n  first: boolean;\n}\n\nexport interface Title {\n  label: string;\n  style: string;\n}\n\nexport interface Action {\n  type: string;\n  label: string;\n  color: string;\n  href: string;\n}\n\nexport interface Text {\n  title: Title;\n  spacer: string;\n  body: string;\n  actions: Action[];\n  actionsAlign: string;\n}\n\nexport interface ForceDialog {\n  params: Params;\n  text: Text;\n}\n\nexport interface IDialog {\n  forceDialog: ForceDialog;\n}\n\nexport interface User {\n  banner: string;\n}\nexport interface Action2 {\n  type: string;\n  label: string;\n  href: string;\n  color: string;\n}\n\nexport interface Commerce {\n  vip: string;\n  payNode: string;\n  dialog: {\n    spacer: string;\n    title: {\n      label: string;\n      style: string;\n    };\n    body: string;\n    actionsAlign: string;\n    actions: Action2[];\n  };\n}\n\nexport interface GoogleAnalytics {\n  id: string;\n}\n\nexport interface Guard {\n  authGuard: boolean;\n}\n\nexport interface IPage {\n  meta?: any[];\n  config?: any;\n  title: string;\n  body: any[];\n}\n\nexport interface ICommerce {\n  vip: string;\n  payNode: string;\n  dialog: IText;\n}\n",
            "properties": [
                {
                    "name": "banner",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 191
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "User-1"
        }
    ],
    "injectables": [
        {
            "name": "AmapService",
            "id": "injectable-AmapService-91fe887fdc9a67fc2b6f14f3bb890f6782b03400c736bd52b69aae61e3bd6a104a758fa2950ce8b24d8e551a8256635bcb3a031c57002de569629b98ff4ebf56",
            "file": "src/app/core/service/amap.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "load",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\nimport * as AMapLoader from '@amap/amap-jsapi-loader';\nimport { Observable, from } from 'rxjs';\nimport { IAmap } from '../interface/IAmap';\nimport { CORE_CONFIG } from '@core/token/core.config';\nimport { ICoreConfig } from '@core/mobx/IAppConfig';\n\n// https://lbs.amap.com/demo-center/js-api\n// https://lbs.amap.com/api/jsapi-v2/summary\n// https://lbs.amap.com/api/javascript-api/guide/layers/official-layers#default\n// https://lbs.amap.com/console/show/picker\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AmapService {\n  constructor(@Inject(CORE_CONFIG) private coreConfig: ICoreConfig) {}\n\n  load(): Observable<any> {\n    const amapConfig: IAmap = this.coreConfig?.amap;\n    return from(\n      AMapLoader.load({\n        key: amapConfig.key,\n        version: amapConfig.version,\n        plugins: amapConfig.plugins, // 需要使用的的插件列表，如比例尺'AMap.Scale'等\n        AMapUI: {\n          // 是否加载 AMapUI，缺省不加载\n          version: '1.1', // AMapUI 缺省 1.1\n          plugins: [], // 需要加载的 AMapUI ui插件\n        },\n        Loca: {\n          // 是否加载 Loca， 缺省不加载\n          version: '2.0', // Loca 版本，缺省 1.3.2\n        },\n      })\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "coreConfig",
                        "type": "ICoreConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "coreConfig",
                        "type": "ICoreConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AMapState",
            "id": "injectable-AMapState-d2f5cd007c522ad92306c1e2064961da0eb024d65ea7c7b363a0d1e6088cfdaccb4a1ebec62c74a232bedab2a98a08907427b8ac10508ab2d61b1132208456ce",
            "file": "src/app/core/mobx/amap/AMapState.ts",
            "properties": [
                {
                    "name": "markers$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<IMark>",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "position$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\nimport { IMark } from '@core/interface/IAmap';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AMapState {\n  position$ = new Subject();\n  markers$: Subject<IMark> = new Subject();\n  constructor() {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "type": "injectable"
        },
        {
            "name": "ApiService",
            "id": "injectable-ApiService-59f6ea8ec90d12ccb2df75e12ddbab7cc261fe4c43e78c295d3640724d2ba914f24b6427ea400897001b3e57e4b14d2f1b41f8fdd3e5988e00fcb0e7e6b85204",
            "file": "src/app/core/service/api.service.ts",
            "properties": [
                {
                    "name": "configLoadDone$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "localUserKey",
                    "defaultValue": "camelCase(environment.apiUrl.split('//')[1])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "getDeepValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getParams",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "optionsWithCookieAndToken",
                    "args": [
                        {
                            "name": "csrfToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "csrfToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { camelCase, result } from 'lodash-es';\nimport { Subject } from 'rxjs';\nimport { environment } from '../../../environments/environment';\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiService {\n  localUserKey = camelCase(environment.apiUrl.split('//')[1]);\n  public configLoadDone$ = new Subject();\n\n  constructor() {}\n\n  get apiUrl(): string {\n    return environment.apiUrl;\n  }\n\n  get httpOptionsOfCommon(): any {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      }),\n    };\n    return httpOptions;\n  }\n\n  optionsWithCookieAndToken(csrfToken: string): any {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        Accept: 'application/vnd.api+json',\n        'Content-Type': 'application/vnd.api+json',\n        'X-CSRF-Token': csrfToken,\n      }),\n      withCredentials: true,\n    };\n    return httpOptions;\n  }\n\n  getParams(obj: any, key: string): any {\n    return obj.params && obj.params[key];\n  }\n\n  getDeepValue(obj: any, path: string): any {\n    return result(obj, path);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "accessors": {
                "apiUrl": {
                    "name": "apiUrl",
                    "getSignature": {
                        "name": "apiUrl",
                        "type": "string",
                        "returnType": "string",
                        "line": 15
                    }
                },
                "httpOptionsOfCommon": {
                    "name": "httpOptionsOfCommon",
                    "getSignature": {
                        "name": "httpOptionsOfCommon",
                        "type": "any",
                        "returnType": "any",
                        "line": 19
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "AppState",
            "id": "injectable-AppState-ecf05b64c35d6e92d3d67b136ad1a6448c31fa760cc8c9b768d49cf1bbc39b5fb2cb9181659b1094daf39c529f786e3d2fcc55b193adda1c500bdc73b40fcb34",
            "file": "src/app/core/mobx/AppState.ts",
            "properties": [
                {
                    "name": "apiService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApiService",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "MODE",
                    "defaultValue": "'themeMode'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "state",
                    "defaultValue": "{\n    defTheme: 'light-theme',\n    config: null,\n    page: initPage,\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAppConfig",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "observable"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "switchChange$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "initTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "action"
                        }
                    ]
                },
                {
                    "name": "loadConfig",
                    "args": [
                        {
                            "name": "coreConfig",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "action"
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "coreConfig",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setBodyClasses",
                    "args": [
                        {
                            "name": "theme",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setPageContent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "action"
                        }
                    ]
                },
                {
                    "name": "setPageNotFound",
                    "args": [
                        {
                            "name": "notFound",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "notFound",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "switchTheme",
                    "args": [
                        {
                            "name": "theme",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePage",
                    "args": [
                        {
                            "name": "pageValue",
                            "type": "IPage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pageValue",
                            "type": "IPage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { action, observable, computed } from 'mobx-angular';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport { LocalStorageService } from 'ngx-webstorage';\nimport { IAppConfig, ICoreConfig, IPage } from './IAppConfig';\nimport { of, Subject } from 'rxjs';\nimport { TagsService } from '@core/service/tags.service';\nimport { version } from '../../../../package.json';\nimport { isArray } from 'lodash-es';\nimport { ApiService } from '@core/service/api.service';\nimport { ScreenState } from '@core/mobx/screen/ScreenState';\nimport { tap } from 'rxjs/operators';\n\nconst initPage = {\n  title: '',\n  body: [],\n};\n@Injectable({\n  providedIn: 'root',\n})\nexport class AppState {\n  private readonly MODE = 'themeMode';\n  @observable private state: IAppConfig = {\n    defTheme: 'light-theme',\n    config: null,\n    page: initPage,\n  };\n\n  public switchChange$ = new Subject();\n  constructor(\n    @Inject(DOCUMENT) private document: Document,\n    private http: HttpClient,\n    private storage: LocalStorageService,\n    private tagsService: TagsService,\n    public apiService: ApiService,\n    private screenState: ScreenState\n  ) {}\n\n  @computed get config(): any {\n    return this.state && this.state.config;\n  }\n\n  @computed get theme(): any {\n    return this.state && this.state.defTheme;\n  }\n\n  @computed get meta(): any {\n    return this.state.page && this.state.page.meta;\n  }\n\n  @computed get pageConfig(): any {\n    return this.state.page && this.state.page.config;\n  }\n\n  @computed get title(): any {\n    return this.state.page && this.state.page.title;\n  }\n\n  @computed get content(): any[] {\n    return this.state.page && this.state.page.body;\n  }\n\n  get version(): string {\n    return version;\n  }\n\n  get defaultThumb(): string {\n    return (\n      (this.state.config && this.state.config?.defaultThumb) ||\n      '/assets/images/default.png'\n    );\n  }\n\n  setBodyClasses(theme: string): void {\n    const body = this.document.getElementsByTagName('body')[0];\n    body.classList.add(theme);\n  }\n\n  updatePage(pageValue: IPage): void {\n    if (isArray(pageValue)) {\n      return;\n    }\n    this.state.page = pageValue;\n    this.tagsService.updateTages(pageValue);\n    this.screenState.scroll$.next();\n  }\n\n  setPageNotFound(notFound: string): void {\n    this.tagsService.setTitle('404 not found!');\n    this.http.get<any>(notFound).subscribe((pageValue: IPage) => {\n      this.updatePage(pageValue);\n    });\n  }\n\n  get apiPath(): string {\n    const location = this.document.location;\n    const path = location.pathname;\n    const search = location.search;\n    const allowKey = ['version', 'origin', 'category', 'preview'];\n    if (\n      allowKey.some((key) => {\n        return search.indexOf(key) > 0;\n      })\n    ) {\n      const params = search.split('?')[1];\n      return `${path}&${params}`;\n    } else {\n      return path;\n    }\n  }\n\n  @action\n  switchTheme(theme: string): void {\n    const body = this.document.getElementsByTagName('body')[0];\n    body.removeAttribute('class');\n    body.classList.add(theme);\n    this.switchChange$.next(theme);\n    this.state.defTheme = theme;\n    this.storage.store(this.MODE, theme);\n  }\n\n  @action\n  public loadConfig(coreConfig: object): any {\n    if (environment.production) {\n      return this.http\n        .get(`${environment.apiUrl}/api/v1/config?content=/core/base`)\n        .pipe(\n          tap((config: any) => {\n            Object.assign(coreConfig, config);\n          })\n        )\n        .toPromise()\n        .then(\n          (config: ICoreConfig) => {\n            this.state.config = config;\n            this.apiService.configLoadDone$.next(true);\n            this.initTheme();\n          },\n          (error) => {\n            console.log(error);\n            console.log('base json not found!');\n          }\n        );\n    } else {\n      return this.http\n        .get(`${environment.apiUrl}/assets/app/core/base.json`)\n        .pipe(\n          tap((config: any) => {\n            Object.assign(coreConfig, config);\n          })\n        )\n        .toPromise()\n        .then(\n          (config: ICoreConfig) => {\n            this.state.config = config;\n            this.apiService.configLoadDone$.next(true);\n            this.initTheme();\n          },\n          () => {\n            console.log('base json not found!');\n          }\n        );\n    }\n  }\n\n  @action\n  initTheme(): void {\n    if (this.storage.retrieve(this.MODE)) {\n      this.state.defTheme = this.storage.retrieve(this.MODE);\n      this.setBodyClasses(this.state.defTheme);\n    } else {\n      this.state.defTheme = this.config.defaultTheme || 'light-theme';\n      this.setBodyClasses(this.state.defTheme);\n    }\n  }\n\n  @action\n  setPageContent(): void {\n    if (environment.production) {\n      const landingPath = '/api/v1/landingPage?content=';\n      this.http\n        .get<any>(`${environment.apiUrl}${landingPath}${this.apiPath}`)\n        .subscribe(\n          (pageValue: IPage) => {\n            this.updatePage(pageValue);\n          },\n          (error) => {\n            this.setPageNotFound(`${environment.apiUrl}${landingPath}404`);\n          }\n        );\n    } else {\n      this.http\n        .get<any>(`${environment.apiUrl}/assets/app${this.apiPath}.json`)\n        .subscribe(\n          (pageValue: IPage) => {\n            this.updatePage(pageValue);\n          },\n          (error) => {\n            this.setPageNotFound(`${environment.apiUrl}/assets/app/404.json`);\n          }\n        );\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "storage",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tagsService",
                        "type": "TagsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screenState",
                        "type": "ScreenState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storage",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tagsService",
                        "type": "TagsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screenState",
                        "type": "ScreenState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "config": {
                    "name": "config",
                    "getSignature": {
                        "name": "config",
                        "type": "any",
                        "returnType": "any",
                        "line": 41
                    }
                },
                "theme": {
                    "name": "theme",
                    "getSignature": {
                        "name": "theme",
                        "type": "any",
                        "returnType": "any",
                        "line": 45
                    }
                },
                "meta": {
                    "name": "meta",
                    "getSignature": {
                        "name": "meta",
                        "type": "any",
                        "returnType": "any",
                        "line": 49
                    }
                },
                "pageConfig": {
                    "name": "pageConfig",
                    "getSignature": {
                        "name": "pageConfig",
                        "type": "any",
                        "returnType": "any",
                        "line": 53
                    }
                },
                "title": {
                    "name": "title",
                    "getSignature": {
                        "name": "title",
                        "type": "any",
                        "returnType": "any",
                        "line": 57
                    }
                },
                "content": {
                    "name": "content",
                    "getSignature": {
                        "name": "content",
                        "type": "[]",
                        "returnType": "any[]",
                        "line": 61
                    }
                },
                "version": {
                    "name": "version",
                    "getSignature": {
                        "name": "version",
                        "type": "string",
                        "returnType": "string",
                        "line": 65
                    }
                },
                "defaultThumb": {
                    "name": "defaultThumb",
                    "getSignature": {
                        "name": "defaultThumb",
                        "type": "string",
                        "returnType": "string",
                        "line": 69
                    }
                },
                "apiPath": {
                    "name": "apiPath",
                    "getSignature": {
                        "name": "apiPath",
                        "type": "string",
                        "returnType": "string",
                        "line": 97
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "BaseComponent",
            "id": "injectable-BaseComponent-29a6661b77203c6524fda959ec41beecd34e44b17d3eeccfcc6d6e8f93d85b9e642c84c705f572a97e37c3400c2e40d1311dfc40e2f904755788d0abbd805033",
            "file": "src/app/uiux/base/base.widget.ts",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getApiParams",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDeepValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFormParams",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Params",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getParams",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getParamsState",
                    "args": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUrlQuery",
                    "args": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handlerPager",
                    "args": [
                        {
                            "name": "pager",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pager",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initFormValueWithUrlQuery",
                    "args": [
                        {
                            "name": "query",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "controls",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "controls",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "row",
                    "args": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "padding",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'4rem'"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "padding",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'4rem'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Params } from '@angular/router';\nimport { isArray, remove, result } from 'lodash-es';\n@Injectable()\nexport abstract class BaseComponent {\n  abstract content: any;\n\n  constructor() {}\n\n  getParams(obj: any, key: string): any {\n    return obj.params && obj.params[key];\n  }\n\n  getValue(obj: any, path: string, key: string): any {\n    return obj[path] && obj[path][key];\n  }\n\n  getDeepValue(obj: any, path: string): any {\n    return result(obj, path);\n  }\n\n  row(content: any, padding = '4rem'): string {\n    return `0 0 calc(100% / ${content.row || 3} - ${padding})`;\n  }\n\n  initFormValueWithUrlQuery(query: any, controls: any[]): any {\n    return controls.map((control) => {\n      if (control.key in query) {\n        control.value = query[control.key];\n        return control;\n      } else {\n        return control;\n      }\n    });\n  }\n\n  // For drupal view json api\n  getApiParams(state: any): any {\n    const params: string[] = [];\n    if (state) {\n      Object.keys(state).forEach((key) => {\n        const val = state[key];\n        if (val) {\n          if (isArray(val)) {\n            const final = remove(val, (item) => item !== undefined);\n            if (final.length > 0) {\n              params.push(`${key}=${final.join('+')}`);\n            } else {\n              return;\n            }\n          } else {\n            params.push(`${key}=${val}`);\n          }\n        }\n      });\n    }\n    return params.join('&');\n  }\n\n  getFormParams(state: any): Params {\n    const formParams: any = {};\n    if (state) {\n      Object.keys(state).forEach((key) => {\n        const val = state[key];\n        if (val !== '') {\n          if (isArray(val)) {\n            if (val.length > 0) {\n              formParams[key] = val.join('+');\n            } else {\n              delete formParams[key];\n            }\n          } else {\n            formParams[key] = val;\n          }\n        } else {\n          delete formParams[key];\n        }\n      });\n    }\n    return formParams;\n  }\n\n  getParamsState(formValues: any, options: any): any {\n    return Object.assign({}, formValues, options);\n  }\n\n  getUrlQuery(formValues: any, options: any = {}): any {\n    const state = this.getParamsState(formValues, options);\n    const query: Params = this.getFormParams(state);\n    return query;\n  }\n\n  handlerPager(pager: any): any {\n    if (pager.current_page === null && pager.total_pages === 0) {\n      return {\n        itemsPerPage: pager.total_items,\n        currentPage: 0,\n        totalItems: pager.total_items,\n      };\n    } else {\n      return {\n        itemsPerPage: pager.items_per_page,\n        currentPage: (pager.current_page || 0) + 1,\n        totalItems: pager.total_items,\n      };\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        },
        {
            "name": "BrandingState",
            "id": "injectable-BrandingState-4caac7edaa9a13b40debd7172c5a1282326b25b613f541546f5526db6c77ba31aa70b6380096cbf950eda32f159a5c887bdf2a672022f15ee0edd5c039d7efe5",
            "file": "src/app/core/mobx/BrandingState.ts",
            "properties": [
                {
                    "name": "_READDY",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "decorators": [
                        {
                            "name": "observable"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "initBranding",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "action"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { action, observable, computed } from 'mobx-angular';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\n@Injectable()\nexport class BrandingState {\n  @observable private content: any;\n  private _READDY = true;\n  constructor(private http: HttpClient) {\n    this.initBranding();\n  }\n\n  @computed get ready(): any {\n    return this._READDY && this.content;\n  }\n\n  @computed get header(): any {\n    return this.content && this.content.header;\n  }\n\n  @computed get footer(): any {\n    return this.content && this.content.footer;\n  }\n\n  @computed get isInverse(): boolean {\n    return this.header && this.header.params?.inverse;\n  }\n\n  @action\n  initBranding(): any {\n    if (environment.production) {\n      this.http\n        .get(`${environment.apiUrl}/api/v1/config?content=/core/branding`)\n        .subscribe((branding) => {\n          this.content = branding;\n        });\n    } else {\n      this.http\n        .get(`${environment.apiUrl}/assets/app/core/branding.json`)\n        .subscribe((branding) => {\n          this.content = branding;\n        });\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "ready": {
                    "name": "ready",
                    "getSignature": {
                        "name": "ready",
                        "type": "any",
                        "returnType": "any",
                        "line": 13
                    }
                },
                "header": {
                    "name": "header",
                    "getSignature": {
                        "name": "header",
                        "type": "any",
                        "returnType": "any",
                        "line": 17
                    }
                },
                "footer": {
                    "name": "footer",
                    "getSignature": {
                        "name": "footer",
                        "type": "any",
                        "returnType": "any",
                        "line": 21
                    }
                },
                "isInverse": {
                    "name": "isInverse",
                    "getSignature": {
                        "name": "isInverse",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 25
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "BtService",
            "id": "injectable-BtService-2cef6b6ff928a08fc4aa1ea7902fbcfaed3f7ce089c1de9fc8d8b2528b94d3a6f4a0718bd41248c88178565630d60b93610998ace3755f8f6cd5a5276ea1b473",
            "file": "src/app/core/service/bt.service.ts",
            "properties": [
                {
                    "name": "BT_KEY",
                    "defaultValue": "'Qbfmbk63JqC1j1HsOHlOdFmrLsnRLlIC'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "BT_PANEL",
                    "defaultValue": "'http://sits.zhaobg.com:9999/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getKeyData",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Md5 } from 'ts-md5/dist/md5';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n@Injectable({\n  providedIn: 'root',\n})\nexport class BtService {\n  private BT_KEY = 'Qbfmbk63JqC1j1HsOHlOdFmrLsnRLlIC';\n  private BT_PANEL = 'http://sits.zhaobg.com:9999/';\n  constructor(private http: HttpClient) {}\n\n  getKeyData(): Observable<any> {\n    const nowTime = Date.now();\n    const key = Md5.hashStr(this.BT_KEY);\n    const token = Md5.hashStr(`${nowTime.toString()}${key}`);\n    console.log(token);\n    const headers = new HttpHeaders({\n      'Content-type': 'application/json',\n    });\n    return this.http.post(\n      `${this.BT_PANEL}data?action=getData`,\n      {\n        request_time: Date.now(),\n        request_token: token,\n      },\n      {\n        headers,\n        withCredentials: true,\n      }\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CalendarState",
            "id": "injectable-CalendarState-388501003798be11db8bed1de0dd8dd400e65d0f6fe41d58c32d619e5b8036f4a34a80730e42c00ddd8e4e683bdecc8219103a3354be6e7d38861f84da815bba",
            "file": "src/app/core/mobx/CalendarState.ts",
            "properties": [
                {
                    "name": "calendarChange$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "default",
                    "defaultValue": "{\n    initialView: 'dayGridMonth',\n    locale: 'zh-cn',\n    handleWindowResize: true,\n    weekends: true,\n    editable: true,\n    selectable: true,\n    selectMirror: true,\n    dayMaxEvents: true,\n    firstDay: 1,\n    allDayText: '全天',\n    // select: this.handleDateSelect.bind(this),\n    // eventClick: this.handleEventClick.bind(this),\n    // eventsSet: this.handleEvents.bind(this),\n    headerToolbar: {\n      start: 'prev today next',\n      center: 'title',\n      end: 'dayGridMonth timeGridWeek timeGridDay listWeek',\n    },\n    buttonText: {\n      today: '今天',\n      month: '月份',\n      week: '星期',\n      day: '日',\n      list: '列表',\n    },\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CalendarOptions",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "getPreviousDay",
                    "args": [
                        {
                            "name": "date",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "new Date()"
                        }
                    ],
                    "optional": false,
                    "returnType": "Date",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "new Date()",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { CalendarOptions } from '@fullcalendar/angular';\nimport { Subject } from 'rxjs';\n@Injectable({\n  providedIn: 'root',\n})\nexport class CalendarState {\n  public calendarChange$ = new Subject();\n  default: CalendarOptions = {\n    initialView: 'dayGridMonth',\n    locale: 'zh-cn',\n    handleWindowResize: true,\n    weekends: true,\n    editable: true,\n    selectable: true,\n    selectMirror: true,\n    dayMaxEvents: true,\n    firstDay: 1,\n    allDayText: '全天',\n    // select: this.handleDateSelect.bind(this),\n    // eventClick: this.handleEventClick.bind(this),\n    // eventsSet: this.handleEvents.bind(this),\n    headerToolbar: {\n      start: 'prev today next',\n      center: 'title',\n      end: 'dayGridMonth timeGridWeek timeGridDay listWeek',\n    },\n    buttonText: {\n      today: '今天',\n      month: '月份',\n      week: '星期',\n      day: '日',\n      list: '列表',\n    },\n  };\n  constructor() {}\n\n  getPreviousDay(date = new Date()): Date {\n    const previous = new Date(date.getTime());\n    previous.setDate(date.getDate() - 1);\n    return previous;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 35
            },
            "type": "injectable"
        },
        {
            "name": "ConfigService",
            "id": "injectable-ConfigService-7ac9964878eb1a978695e896ab4fe1d0012c4a8cf1483c9dc33a80c9f184c566bb5fda124d187ee29679ca1a80e5db27b86e899f576e96ce4e1ced63571e20a2",
            "file": "src/app/core/service/config.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "listenToLoading",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\nimport { AppState } from '@core/mobx/AppState';\nimport { DialogService } from './dialog.service';\nimport { GoogleAnalyticsService } from './ga.service';\nimport { LoadingService } from './loading.service';\nimport { QiDianService } from './qidian.service';\nimport { delay } from 'rxjs/operators';\nimport { ScreenService } from './screen.service';\nimport { CORE_CONFIG } from '@core/token/core.config';\nimport { ICoreConfig } from '@core/mobx/IAppConfig';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConfigService {\n  constructor(\n    private appState: AppState,\n    private googleAnalyticsService: GoogleAnalyticsService,\n    private qiDianService: QiDianService,\n    private dialogService: DialogService,\n    private loadingservice: LoadingService,\n    private screenService: ScreenService,\n    @Inject(CORE_CONFIG) private coreConfig: ICoreConfig\n  ) {}\n\n  init(): void {\n    if (this.screenService.isPlatformBrowser()) {\n      if (this.coreConfig) {\n        if (this.coreConfig?.googleAnalytics) {\n          const id = this.coreConfig.googleAnalytics.id;\n          this.googleAnalyticsService.loadGoogleAnalytics(id);\n        }\n        if (this.coreConfig?.qidian) {\n          const qdConfig = this.coreConfig.qidian;\n          this.qiDianService.loadQiDian(qdConfig);\n        }\n        if (this.coreConfig?.loading) {\n          if (!this.appState?.meta?.config?.loading) {\n            this.listenToLoading();\n          }\n        }\n        if (this.coreConfig?.dialog?.forceDialog) {\n          this.dialogService.forceDialog(this.coreConfig.dialog.forceDialog);\n        }\n      }\n    }\n  }\n\n  // will remove\n  listenToLoading(): void {\n    this.loadingservice.loadingSub.pipe(delay(0)).subscribe((loading) => {\n      // this.loading = loading;\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "appState",
                        "type": "AppState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "googleAnalyticsService",
                        "type": "GoogleAnalyticsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "qiDianService",
                        "type": "QiDianService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loadingservice",
                        "type": "LoadingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "coreConfig",
                        "type": "ICoreConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "appState",
                        "type": "AppState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "googleAnalyticsService",
                        "type": "GoogleAnalyticsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "qiDianService",
                        "type": "QiDianService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loadingservice",
                        "type": "LoadingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "coreConfig",
                        "type": "ICoreConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ContentState",
            "id": "injectable-ContentState-3b38cc4a6ca1652d94692a9b4e3fe9811231d695540c7fed9ab5a1eeaf11c8d3aadcd47161153b574c349f83794f3375c8b342440276bed0d660a7a2713698c3",
            "file": "src/app/core/mobx/ContentState.ts",
            "properties": [
                {
                    "name": "commentChange$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "commentQuote$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "decorators": [
                        {
                            "name": "observable"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { observable } from 'mobx-angular';\nimport { Subject } from 'rxjs';\n@Injectable({\n  providedIn: 'root',\n})\nexport class ContentState {\n  @observable private content: any;\n  public commentChange$ = new Subject();\n  public commentQuote$ = new Subject();\n  constructor() {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "type": "injectable"
        },
        {
            "name": "CryptoJSService",
            "id": "injectable-CryptoJSService-0829649aac7673cdec95f1e95c8157161f9d633c5b189ee95c187af37e330bddb6ca2502b38e2c3e631eed42563635ad0bbb56f8a925de1cfa0e9616ca5a18ef",
            "file": "src/app/core/service/crypto-js.service.ts",
            "properties": [
                {
                    "name": "secretKey",
                    "defaultValue": "'xinshi'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [
                {
                    "name": "decrypt",
                    "args": [
                        {
                            "name": "textToDecrypt",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "textToDecrypt",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "encrypt",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "randomString",
                    "args": [
                        {
                            "name": "len",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "len",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport * as CryptoJS from 'crypto-js';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CryptoJSService {\n  secretKey = 'xinshi';\n  constructor() {}\n\n  // Generate 32-bit random string\n  randomString(len: number): string {\n    len = len || 32;\n    const $chars = 'ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678';\n    const maxPos = $chars.length;\n    let pwd = '';\n    for (let i = 0; i < len; i++) {\n      pwd += $chars.charAt(Math.floor(Math.random() * maxPos));\n    }\n    return pwd;\n  }\n\n  encrypt(value: string): string {\n    return CryptoJS.AES.encrypt(value, this.secretKey.trim()).toString();\n  }\n\n  decrypt(textToDecrypt: string): string {\n    return CryptoJS.AES.decrypt(textToDecrypt, this.secretKey.trim()).toString(\n      CryptoJS.enc.Utf8\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "type": "injectable"
        },
        {
            "name": "DialogService",
            "id": "injectable-DialogService-4811152c6e51abe52b998ee443cac7cf23eee36367ef5379cbb0469db0fc92ffaba9823b198333561abf6c1a312d72a900778daf2b269830d44e1502ec4d1eae",
            "file": "src/app/core/service/dialog.service.ts",
            "properties": [
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "dialogState$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "closeDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "forceDialog",
                    "args": [
                        {
                            "name": "config",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openDialog",
                    "args": [
                        {
                            "name": "config",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { MatDialog } from '@angular/material/dialog';\nimport { DialogComponent } from '@uiux/widgets/dialog/dialog.component';\nimport { TextComponent } from '../../uiux/widgets/text/text.component';\nimport { DOCUMENT } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DialogService {\n  dialogState$ = new Subject();\n  dialogRef: any;\n  constructor(\n    private dialog: MatDialog,\n    @Inject(DOCUMENT) private doc: Document\n  ) {}\n\n  closeDialog(): void {\n    this.dialogState$.next(false);\n  }\n\n  forceDialog(config: any): void {\n    const first = this.doc.referrer;\n    const path = this.doc.location.pathname;\n    const params = config.params;\n    if (!config) {\n      return;\n    }\n\n    if (params.first && !first) {\n      if (params.path) {\n        if (path.includes(params.path)) {\n          this.openDialog(config);\n        }\n      } else {\n        this.openDialog(config);\n      }\n      return;\n    } else {\n      if (params.path) {\n        if (path.includes(params.path)) {\n          this.openDialog(config);\n        }\n        return;\n      }\n    }\n\n    this.openDialog(config);\n  }\n\n  openDialog(config: any): void {\n    this.dialogRef = this.dialog.open(DialogComponent, {\n      width: config.params.width,\n      disableClose: true,\n      data: {\n        renderInputComponent: TextComponent,\n        disableCloseButton: true,\n        inputData: {\n          content: config.text,\n        },\n      },\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "doc",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "doc",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "FeiyanService",
            "id": "injectable-FeiyanService-200c8b5acc1f0736434b23e1401bf91b155a7d0a5a038961446f070f9dab575189ea367330be3f35fd6d8433661fdda9d7d98ad70d77cf04043665d0e7646e40",
            "file": "src/app/core/service/feiyan.service.ts",
            "properties": [
                {
                    "name": "feiyanApi",
                    "defaultValue": "'http:localhost:4200'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "trackPerson",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FeiyanService {\n  feiyanApi = 'http:localhost:4200';\n  constructor(private http: HttpClient) {}\n\n  trackPerson(): Observable<any> {\n    return this.http.get(`${this.feiyanApi}`);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "FormService",
            "id": "injectable-FormService-dda9c201c89f3db16b496e7ca47c600157946fafa5e2c7a2319c0090c504078876c100c6c4fee931d9f5a8efa1861ce9ebeb5d9f3ae6b682cae917335f155a50",
            "file": "src/app/core/service/form.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getwebFormData",
                    "args": [
                        {
                            "name": "params",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "form",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "form",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleDatePicker",
                    "args": [
                        {
                            "name": "group",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "submitWebForm",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toFormGroup",
                    "args": [
                        {
                            "name": "items",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiService } from '@core/service/api.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FormService {\n  constructor(private http: HttpClient, private apiService: ApiService) {}\n\n  toFormGroup(items: any[]): any {\n    const group: any = {};\n    items.forEach((item: any) => {\n      switch (item.type) {\n        case 'datepicker':\n          if (item.range) {\n            group.start = item.params?.required\n              ? new FormControl(item.start || '', Validators.required)\n              : new FormControl(item.start || '');\n            group.end = item.params?.required\n              ? new FormControl(item.end || '', Validators.required)\n              : new FormControl(item.end || '');\n          }\n          if (!item.range && item.key) {\n            group[item.key] = item.params?.required\n              ? new FormControl(item.value || '', Validators.required)\n              : new FormControl(item.value || '');\n          }\n          break;\n        case 'select':\n          if (item.multiple) {\n            const value = item?.value?.split('+') || '';\n            group[item.key] = item.params?.required\n              ? new FormControl(value, Validators.required)\n              : new FormControl(value);\n          } else {\n            group[item.key] = item.params?.required\n              ? new FormControl(item.value || '', Validators.required)\n              : new FormControl(item.value || '');\n          }\n          break;\n        default:\n          if (item.key) {\n            group[item.key] = item.params?.required\n              ? new FormControl(item.value || '', Validators.required)\n              : new FormControl(item.value || '');\n          }\n      }\n    });\n    return new FormGroup(group);\n  }\n\n  handleDatePicker(group: any): any {\n    return {};\n  }\n\n  getwebFormData(params: any, form: any): any {\n    const id = {\n      webform_id: params.webform_id,\n    };\n    return Object.assign({}, id, form.value);\n  }\n\n  submitWebForm(data: any): Observable<any> {\n    return this.http.post(\n      `${this.apiService.apiUrl}/webform_rest/submit`,\n      data,\n      this.apiService.httpOptionsOfCommon\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "FormState",
            "id": "injectable-FormState-b9603e6bca224ae2b0bebb50e79fa49246be26b8051ae6fa781b180a3ac954461f2f2d5301e3319704701ca7f4f956edf8c8b2f357bacf9f9d319ffaaa103650",
            "file": "src/app/core/mobx/FormState.ts",
            "properties": [
                {
                    "name": "autoList$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<any[]>",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FormState {\n  autoList$: Subject<any[]> = new Subject();\n}\n",
            "type": "injectable"
        },
        {
            "name": "GoogleAnalyticsService",
            "id": "injectable-GoogleAnalyticsService-4bfb3dbbdffd27a706e4db13d3c3e6fcdad75e6702ac5f5b0b83c5a1b435bc759c4d178c0e83531e543b31fbbc2acb26a00f1800b16031b5acf8d9f424feb54f",
            "file": "src/app/core/service/ga.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "loadGoogleAnalytics",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Angulartics2GoogleGlobalSiteTag } from 'angulartics2/gst';\nimport { UtilitiesService } from '@core/service/utilities.service';\n\ndeclare var gtag: any;\ndeclare var window: any;\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GoogleAnalyticsService {\n  constructor(\n    private angulartics: Angulartics2GoogleGlobalSiteTag,\n    private utility: UtilitiesService\n  ) {}\n\n  loadGoogleAnalytics(id: string): void {\n    // injecting GA main script asynchronously\n    const src = `https://www.googletagmanager.com/gtag/js?id=${id}`;\n    this.utility.loadScript(src, null, false);\n\n    // preparing GA API to be usable even before the async script is loaded\n    window.dataLayer = window.dataLayer || [];\n    window.gtag = () => {\n      window.dataLayer.push(arguments);\n    };\n    gtag('js', new Date());\n\n    // tracking current url at app bootstrap\n    gtag('config', id);\n    this.angulartics.startTracking();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "angulartics",
                        "type": "Angulartics2GoogleGlobalSiteTag",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utility",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "angulartics",
                        "type": "Angulartics2GoogleGlobalSiteTag",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utility",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "IconService",
            "id": "injectable-IconService-07ecebf94082488effefd9511e2294e5cb4fc1b7d285e5864d4d1e5c8a724782e3053c3c30ff2f694d95a945ced6db6026e8edcaf3601f5ae8d4af9d27dbc4d8",
            "file": "src/app/core/service/icon.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "loadSvgResources",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { MatIconRegistry } from '@angular/material/icon';\nimport { ScreenService } from '@core/service/screen.service';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconService {\n  constructor(\n    private ds: DomSanitizer,\n    private ir: MatIconRegistry,\n    private screenService: ScreenService\n  ) {}\n\n  loadSvgResources(): void {\n    if (this.screenService.isPlatformServer()) {\n      this.ir.addSvgIconSetLiteral(\n        this.ds.bypassSecurityTrustHtml('<svg></svg>')\n      );\n    } else {\n      const svgPath = '/assets/icons/icons.svg';\n      const url = this.ds.bypassSecurityTrustResourceUrl(svgPath);\n      this.ir.addSvgIconSet(url);\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ds",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ir",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "ds",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ir",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LoadingService",
            "id": "injectable-LoadingService-017458c84533428ec7af35c540d81407b6dd3cf5cfe34da42e6dd0033f496f868fcab54752bf8370375eb20b96afb1a4a3fef3a3e39cda6cf067c0b9737766dd",
            "file": "src/app/core/service/loading.service.ts",
            "properties": [
                {
                    "name": "loadingMap",
                    "defaultValue": "new Map<string, boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | boolean>",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "loadingSub",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [
                {
                    "name": "setLoading",
                    "args": [
                        {
                            "name": "loading",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "loading",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LoadingService {\n  loadingSub: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n  loadingMap: Map<string, boolean> = new Map<string, boolean>();\n\n  constructor() {}\n\n  setLoading(loading: boolean, url: string): void {\n    if (!url) {\n      throw new Error(\n        'The request URL must be provided to the LoadingService.setLoading function'\n      );\n    }\n    if (loading === true) {\n      this.loadingMap.set(url, loading);\n      this.loadingSub.next(true);\n    } else if (loading === false && this.loadingMap.has(url)) {\n      this.loadingMap.delete(url);\n    }\n    if (this.loadingMap.size === 0) {\n      this.loadingSub.next(false);\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        },
        {
            "name": "ManageService",
            "id": "injectable-ManageService-fd982838c6d3f8c87dfc5b5ec52f154a35bb38854a80fcd43a4e28b0acda85d3c436f54e97801360a678c20125053f04eb26317198ba7f899ae808acb86cacf4",
            "file": "src/app/core/service/manage.service.ts",
            "properties": [
                {
                    "name": "http",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpClient",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "configLoadDone$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "ApiService"
                    }
                },
                {
                    "name": "localUserKey",
                    "defaultValue": "camelCase(environment.apiUrl.split('//')[1])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "ApiService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getBlock",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFiles",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDeepValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ApiService"
                    }
                },
                {
                    "name": "getParams",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ApiService"
                    }
                },
                {
                    "name": "optionsWithCookieAndToken",
                    "args": [
                        {
                            "name": "csrfToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "csrfToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ApiService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ApiService } from './api.service';\nimport { HttpClient } from '@angular/common/http';\nimport { UserState } from '@core/mobx/user/UserState';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ManageService extends ApiService {\n  constructor(public http: HttpClient, private userState: UserState) {\n    super();\n  }\n\n  getFiles(): Observable<any> {\n    return this.http.get(`${this.apiUrl}/api/v1/file/file`);\n  }\n\n  getBlock(): Observable<any> {\n    return this.http.get(\n      `${this.apiUrl}/api/v1/block_content_type/block_content_type`,\n      this.optionsWithCookieAndToken(this.userState.csrfToken)\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userState",
                        "type": "UserState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userState",
                        "type": "UserState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ApiService",
            "type": "injectable"
        },
        {
            "name": "MatPaginatorIntlCro",
            "id": "injectable-MatPaginatorIntlCro-2a861e149678766b7842db0a8d7f691a7c16c94841d57fb19f502e6a405db783855653d0c618ea5a19d9fc293fd60eaca40031115d8b35e74b117104cd6a9d39",
            "file": "src/app/core/service/paginator.service.ts",
            "properties": [
                {
                    "name": "getRangeLabel",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "itemsPerPageLabel",
                    "defaultValue": "'每页'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "nextPageLabel",
                    "defaultValue": "'下一页'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "previousPageLabel",
                    "defaultValue": "'上一页'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { MatPaginatorIntl } from '@angular/material/paginator';\n\n@Injectable()\nexport class MatPaginatorIntlCro extends MatPaginatorIntl {\n  itemsPerPageLabel = '每页';\n  nextPageLabel = '下一页';\n  previousPageLabel = '上一页';\n\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length === 0 || pageSize === 0) {\n      return '0 条 ' + length;\n    }\n    length = Math.max(length, 0);\n    const startIndex = page * pageSize;\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex =\n      startIndex < length\n        ? Math.min(startIndex + pageSize, length)\n        : startIndex + pageSize;\n    return startIndex + 1 + ' - ' + endIndex + ' 总共 ' + length + '条';\n  };\n}\n",
            "extends": "MatPaginatorIntl",
            "type": "injectable"
        },
        {
            "name": "NavigationService",
            "id": "injectable-NavigationService-2185f505d351b4e656bb7005d336982862fde168a7c3d3851697dffae450516711879c979f396a47ffcc666c8d8fb0ebbc0f52e3ee28159c999a8301a8690182",
            "file": "src/app/core/service/navigation.service.ts",
            "properties": [
                {
                    "name": "history",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getHistory",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getPreviousUrl",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "goBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "startSaveHistory",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Location } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  private history: string[] = [];\n  constructor(private router: Router, private location: Location) {}\n\n  public startSaveHistory(): void {\n    this.router.events.subscribe((event) => {\n      if (event instanceof NavigationEnd) {\n        this.history.push(event.urlAfterRedirects);\n      }\n    });\n  }\n\n  public getHistory(): string[] {\n    return this.history;\n  }\n\n  public goBack(): void {\n    this.history.pop();\n    if (this.history.length > 0) {\n      this.location.back();\n    } else {\n      this.router.navigateByUrl('/');\n    }\n  }\n\n  public getPreviousUrl(): string {\n    if (this.history.length > 0) {\n      return this.history[this.history.length - 2];\n    }\n    return '';\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "NodeComponent",
            "id": "injectable-NodeComponent-110d8b67d8b0a0d751ce22980578d36367e2aa037d14e0cb68c771dd09b5552a2a2f0fb554b8b14244c9011626a46a8c96e69e0df262bd55fee19fa19fceeb2a",
            "file": "src/app/uiux/base/node.widget.ts",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n@Injectable()\nexport abstract class NodeComponent {\n  abstract content: any;\n\n  constructor() {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 4
            },
            "type": "injectable"
        },
        {
            "name": "NodeService",
            "id": "injectable-NodeService-d2f825fa4176363edb1d82b9bb00caa1dd23a3d54c9c2b04add0fc8f219797c58460c3e436f33f73d91bc01930d293ac3e7738bbd4f12233f49a35f2d11dc3cc",
            "file": "src/app/core/service/node.service.ts",
            "properties": [
                {
                    "name": "http",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpClient",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "responseCache",
                    "defaultValue": "new Map()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "storage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LocalStorageService",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "configLoadDone$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "ApiService"
                    }
                },
                {
                    "name": "localUserKey",
                    "defaultValue": "camelCase(environment.apiUrl.split('//')[1])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "ApiService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "addComment",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entityData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entityData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addNode",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "attr",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "attr",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkCurrentUserPayed",
                    "args": [
                        {
                            "name": "uid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entityId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 354,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "uid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entityId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkNodeAccess",
                    "args": [
                        {
                            "name": "params",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IArticleAccess>",
                    "typeParameters": [],
                    "line": 378,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkReqRule",
                    "args": [
                        {
                            "name": "reqRules",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 339,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "reqRules",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteEntity",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteFlagging",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "items",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 328,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "items",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "flagging",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 320,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCommentRelEntityId",
                    "args": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 195,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCommentsParams",
                    "args": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "timeStamp",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 199,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "timeStamp",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCommentsPidParams",
                    "args": [
                        {
                            "name": "pid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "timeStamp",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 217,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "timeStamp",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCommentsWitchChild",
                    "args": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        },
                        {
                            "name": "timeStamp",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 260,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "timeStamp",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCommentType",
                    "args": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 191,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFlaging",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 313,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNodeByLink",
                    "args": [
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNodePath",
                    "args": [
                        {
                            "name": "attr",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "attr",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNodes",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPayUrl",
                    "args": [
                        {
                            "name": "entityId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 374,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entityId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleComment",
                    "args": [
                        {
                            "name": "comment",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "level",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ICommentContent",
                    "typeParameters": [],
                    "line": 230,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "comment",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "level",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "replyComment",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entityData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entityData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "search",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "searchByKey",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateComment",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entityData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "uuid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entityData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "uuid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateLawCase",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "uuid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "uuid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDeepValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ApiService"
                    }
                },
                {
                    "name": "getParams",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ApiService"
                    }
                },
                {
                    "name": "optionsWithCookieAndToken",
                    "args": [
                        {
                            "name": "csrfToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "csrfToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ApiService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiService } from './api.service';\nimport { LocalStorageService } from 'ngx-webstorage';\nimport { AppState } from '../mobx/AppState';\nimport { forkJoin } from 'rxjs';\nimport { Observable, of } from 'rxjs';\nimport { IApiUrl } from '../mobx/IAppConfig';\nimport { map, switchMap } from 'rxjs/operators';\nimport { isEmpty } from 'lodash-es';\nimport { UserState } from '@core/mobx/user/UserState';\nimport { IArticleAccess } from '@core/interface/node/IArticle';\nimport { ICommentContent } from '@core/interface/node/INode';\nimport { formatDate } from '@angular/common';\nimport { CORE_CONFIG } from '@core/token/core.config';\nimport { ICoreConfig } from '@core/mobx/IAppConfig';\nimport { environment } from '../../../environments/environment';\n@Injectable({\n  providedIn: 'root',\n})\nexport class NodeService extends ApiService {\n  public responseCache = new Map();\n\n  constructor(\n    private appState: AppState,\n    public http: HttpClient,\n    private userState: UserState,\n    public storage: LocalStorageService,\n    @Inject(CORE_CONFIG) private coreConfig: ICoreConfig\n  ) {\n    super();\n  }\n\n  get apiUrlConfig(): IApiUrl {\n    return this.coreConfig.apiUrl;\n  }\n\n  search(type: string, params: string, token?: string): Observable<any> {\n    const key = JSON.stringify({ api: this.apiUrl, type, params });\n    const searchFormCache = this.responseCache.get(key);\n    if (searchFormCache && environment.cache) {\n      return of(searchFormCache);\n    }\n    let apiParams = '';\n    if (type.startsWith('/api/v1/')) {\n      apiParams = `${this.apiUrl}${type}?${params}`;\n    } else {\n      apiParams = `${this.apiUrl}/api/v1/${type}?${params}`;\n    }\n    // search for role\n    const searchForRole = this.coreConfig?.apiUrl?.search;\n    if (searchForRole && apiParams.indexOf('/api/v1/content')) {\n      Object.keys(searchForRole).some((role) => {\n        if (this.userState.roles.includes(role)) {\n          apiParams = apiParams.replace('/api/v1/content', searchForRole[role]);\n          return true;\n        }\n        return false;\n      });\n    }\n\n    const response = this.http\n      .get<any>(\n        apiParams,\n        token ? this.optionsWithCookieAndToken(token) : this.httpOptionsOfCommon\n      )\n      .pipe(\n        switchMap((res) => {\n          this.responseCache.set(key, res);\n          return of(res);\n        })\n      );\n    return response;\n  }\n\n  getNodeByLink(link: string): Observable<any> {\n    return this.http.get<any>(`${link}`);\n  }\n\n  getNodes(\n    path: string,\n    type: string,\n    params: string = '',\n    token: string = ''\n  ): Observable<any> {\n    const cacheKey = JSON.stringify({ api: this.apiUrl, path, type, params });\n    const nodeCache = this.responseCache.get(cacheKey);\n    if (nodeCache && environment.cache) {\n      return of(nodeCache);\n    } else {\n      return this.http\n        .get<any>(\n          `${this.apiUrl}${path}/${type}?${params}`,\n          token\n            ? this.optionsWithCookieAndToken(token)\n            : this.httpOptionsOfCommon\n        )\n        .pipe(\n          switchMap((res) => {\n            this.responseCache.set(cacheKey, res);\n            return of(res);\n          })\n        );\n    }\n  }\n\n  deleteEntity(path: string, id: string, token: string): Observable<any> {\n    return this.http.delete<any>(\n      `${this.apiUrl}${path}/${id}`,\n      this.optionsWithCookieAndToken(token)\n    );\n  }\n\n  searchByKey(key: string): Observable<any> {\n    const params = [`keys=${key}`].join('&');\n    return this.http.get<any>(`${this.apiUrl}/api/v1/job?${params}`);\n  }\n\n  getNodePath(attr: any): string {\n    return attr?.path?.alias\n      ? attr.path.alias\n      : `/node/${attr.drupal_internal__nid}`;\n  }\n\n  addNode(type: string, attr: any, token: string): Observable<any> {\n    const data = {\n      data: {\n        type: `node--${type}`,\n        attributes: {\n          title: attr.title,\n          body: {\n            value: attr.body,\n            format: 'plain_text',\n          },\n        },\n      },\n    };\n    return this.http.post<any>(\n      `${this.apiUrl}${this.apiUrlConfig.nodeGetPath}/${type}`,\n      JSON.stringify(data),\n      this.optionsWithCookieAndToken(token)\n    );\n  }\n\n  addComment(type: string, entityData: any, token: string): Observable<any> {\n    const entity = {\n      data: entityData,\n    };\n    return this.http.post<any>(\n      `${this.apiUrl}${this.apiUrlConfig.commentGetPath}/${type}`,\n      JSON.stringify(entity),\n      this.optionsWithCookieAndToken(token)\n    );\n  }\n\n  updateComment(\n    type: string,\n    entityData: any,\n    uuid: string,\n    token: string\n  ): Observable<any> {\n    const entity = {\n      data: entityData,\n    };\n    return this.http.patch<any>(\n      `${this.apiUrl}${this.apiUrlConfig.commentGetPath}/${type}/${uuid}`,\n      JSON.stringify(entity),\n      this.optionsWithCookieAndToken(token)\n    );\n  }\n  // TODO: refact updateComment and this to patch\n  updateLawCase(data: any, uuid: string, token: string): Observable<any> {\n    return this.http.patch<any>(\n      `${this.apiUrl}/api/v1/node/case/${uuid}`,\n      JSON.stringify(data),\n      this.optionsWithCookieAndToken(token)\n    );\n  }\n\n  replyComment(type: string, entityData: any, token: string): Observable<any> {\n    const entity = {\n      data: entityData,\n    };\n    return this.http.post<any>(\n      `${this.apiUrl}${this.apiUrlConfig.commentGetPath}/${type}`,\n      JSON.stringify(entity),\n      this.optionsWithCookieAndToken(token)\n    );\n  }\n\n  getCommentType(content: any): string {\n    return content?.params?.comment?.attributes?.field_name || '';\n  }\n\n  getCommentRelEntityId(content: any): string {\n    return content?.params?.comment?.relationships?.entity_id?.data?.id || '';\n  }\n\n  getCommentsParams(content: any, timeStamp: number): any {\n    const type = this.getCommentType(content);\n    return {\n      path: this.apiUrlConfig.commentGetPath,\n      type,\n      params: [\n        `filter[entity_id.id]=${this.getCommentRelEntityId(content)}`,\n        `include=uid,uid.user_picture,pid`,\n        `fields[user--user]=name,user_picture`,\n        `fields[file--file]=uri,url`,\n        `sort=-created`,\n        'filter[status]=1',\n        `jsonapi_include=1`,\n        `timeStamp=${timeStamp}`,\n      ].join('&'),\n    };\n  }\n\n  getCommentsPidParams(pid: string, timeStamp: number): any {\n    return [\n      `filter[pid.id]=${pid}`,\n      `include=uid,uid.user_picture,pid`,\n      `fields[user--user]=name,user_picture`,\n      `fields[file--file]=uri,url`,\n      `sort=-created`,\n      'filter[status]=1',\n      `jsonapi_include=1`,\n      `timeStamp=${timeStamp}`,\n    ].join('&');\n  }\n\n  handleComment(comment: any, level: number): ICommentContent {\n    return {\n      author: {\n        img: {\n          src:\n            comment.uid?.user_picture?.uri?.url || this.userState.defaultAvatar,\n          style: {\n            width: '40px',\n            height: '40px',\n            borderRadius: '50%',\n          },\n          alt: comment.uid.name,\n        },\n        align: 'center start',\n        id: comment.uid.id,\n        title: comment.uid.name,\n        subTitle: formatDate(\n          comment.changed || comment.created,\n          'yyyy-MM-dd HH:mm:ss',\n          'en-US'\n        ),\n      },\n      time: comment.changed,\n      id: comment.id,\n      content: comment?.content?.processed || comment?.comment_body?.processed,\n      child: [],\n      level,\n    };\n  }\n\n  getCommentsWitchChild(\n    content: any,\n    token = '',\n    timeStamp = 1\n  ): Observable<any> {\n    const path = this.apiUrlConfig.commentGetPath;\n    const type = this.getCommentType(content);\n    const { params } = this.getCommentsParams(content, timeStamp);\n    return this.getNodes(path, type, params, token).pipe(\n      switchMap((data: any) => {\n        const lists = data.data\n          .filter((list: any) => {\n            // 过滤出父评论\n            if (list.pid.id) {\n              return false;\n            } else {\n              return true;\n            }\n          })\n          .map((comment: any) => {\n            return this.handleComment(comment, 1);\n          });\n        const obj: any = {};\n        lists.map((item: any) => {\n          // 获取每个评论下的回复\n          obj[item.id] = this.getNodes(\n            path,\n            type,\n            this.getCommentsPidParams(item.id, timeStamp),\n            token\n          ).pipe(\n            map((childs: any) => {\n              if (!childs.data) {\n                return [];\n              }\n              return childs.data.map((child: any) => {\n                return this.handleComment(child, 2);\n              });\n            })\n          );\n        });\n        return forkJoin(obj).pipe(\n          // 合并评论到其父评论\n          map((comments: any) => {\n            return lists.map((item: any) => {\n              return Object.assign(item, { child: comments[item.id] });\n            });\n          })\n        );\n      })\n    );\n  }\n\n  getFlaging(path: string, params: string, token: string): Observable<any> {\n    return this.http.get<any>(\n      `${this.apiUrl}${path}?${params}`,\n      this.optionsWithCookieAndToken(token)\n    );\n  }\n\n  flagging(path: string, data: any, token: string): Observable<any> {\n    return this.http.post<any>(\n      `${this.apiUrl}${path}`,\n      data,\n      this.optionsWithCookieAndToken(token)\n    );\n  }\n\n  deleteFlagging(path: string, items: any[], token: string): Observable<any> {\n    const obj: any = {};\n    items.forEach((item) => {\n      obj[item.id] = this.http.delete<any>(\n        `${this.apiUrl}${path}/${item.id}`,\n        this.optionsWithCookieAndToken(token)\n      );\n    });\n    return forkJoin(obj);\n  }\n\n  checkReqRule(reqRules: string[]): boolean {\n    if (!this.userState.authenticated) {\n      return false;\n    } else {\n      const currentUserRule = this.userState.roles;\n      if (currentUserRule.includes('administrator')) {\n        return true;\n      } else {\n        const isRule =\n          currentUserRule.filter((role) => reqRules.includes(role)).length > 0;\n        return isRule;\n      }\n    }\n  }\n\n  checkCurrentUserPayed(\n    uid: string,\n    entityId: string,\n    token: string\n  ): Observable<boolean> {\n    const params = [\n      `filter[uid.id]=${uid}`,\n      `filter[entity_id]=${entityId}`,\n    ].join('&');\n    return this.getFlaging(this.apiUrlConfig?.paymentPath, params, token).pipe(\n      map((res) => {\n        if (res.data.length > 0) {\n          return true;\n        }\n        console.log('用户没有购买！');\n        return false;\n      })\n    );\n  }\n\n  getPayUrl(entityId: string): string {\n    return `${this.apiUrl}${this.coreConfig?.commerce?.payNode}/${entityId}`;\n  }\n\n  checkNodeAccess(params: any): Observable<IArticleAccess> {\n    const reqPay = params?.pay;\n    const reqRule = params?.require_rule;\n    const reqMoney = reqPay?.money;\n    const entityId =\n      this.appState.pageConfig?.node?.entityId || params?.entityId;\n    if (!isEmpty(reqRule) || reqPay) {\n      // 非公开浏览\n      const isReqRule = this.checkReqRule(reqRule);\n      // 是否可授权访问角色\n      if (isReqRule) {\n        return of({\n          canAccess: true,\n          isReqRule: true,\n          isPayed: false,\n          reqMoney,\n          payUrl: '',\n        });\n      } else {\n        // 是否已购买\n        if (reqPay && this.userState.authenticated) {\n          return this.checkCurrentUserPayed(\n            this.userState.currentUser.id,\n            this.appState.pageConfig.node.entityId,\n            this.userState.csrfToken\n          ).pipe(\n            map((payed) => {\n              if (payed) {\n                // 已购买\n                return {\n                  canAccess: true,\n                  isReqRule: false,\n                  isPayed: true,\n                  reqMoney,\n                  payUrl: this.getPayUrl(entityId),\n                };\n              } else {\n                // 未购买\n                return {\n                  canAccess: false,\n                  isReqRule: false,\n                  isPayed: false,\n                  reqMoney,\n                  payUrl: this.getPayUrl(entityId),\n                };\n              }\n            })\n          );\n        } else {\n          return of({\n            canAccess: false,\n            isReqRule: false,\n            isPayed: false,\n            reqMoney,\n            payUrl: this.getPayUrl(entityId),\n          });\n        }\n      }\n    } else {\n      // 公开浏览\n      return of({\n        canAccess: true,\n        isReqRule: false,\n        isPayed: false,\n        reqMoney,\n        payUrl: '',\n      });\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "appState",
                        "type": "AppState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userState",
                        "type": "UserState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "storage",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "coreConfig",
                        "type": "ICoreConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "appState",
                        "type": "AppState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userState",
                        "type": "UserState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storage",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "coreConfig",
                        "type": "ICoreConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "apiUrlConfig": {
                    "name": "apiUrlConfig",
                    "getSignature": {
                        "name": "apiUrlConfig",
                        "type": "",
                        "returnType": "IApiUrl",
                        "line": 34
                    }
                }
            },
            "extends": "ApiService",
            "type": "injectable"
        },
        {
            "name": "QiDianService",
            "id": "injectable-QiDianService-d5f973681034fa2ecbfe4c4491cd65b0bdad69a167bfbb5186d192ac33b9f66af7afa83cea4a824a270cbcec9892fea3c17a424162d7f6fc2cd8b6a5a2c162fd",
            "file": "src/app/core/service/qidian.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "loadQiDian",
                    "args": [
                        {
                            "name": "config",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { UtilitiesService } from '@core/service/utilities.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class QiDianService {\n  constructor(private utility: UtilitiesService) {}\n\n  loadQiDian(config: any): void {\n    const src = `https://wp.qiye.qq.com/qidian/${config.id}/${config.key}`;\n    const id = `qd${config.id}${config.key}`;\n    this.utility.loadScript(src, id);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "utility",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "utility",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "RouteService",
            "id": "injectable-RouteService-59ba24eeca0a8ede8cc3151222f33ef31569bc63e0278bbf8b3db3ba8febc4f99ab65e026045035526ae1a7ee54232c1b16217e1966ebd409fbca410663246a8",
            "file": "src/app/core/service/route.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "isAbsolute",
                    "args": [
                        {
                            "name": "href",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "href",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateQueryParams",
                    "args": [
                        {
                            "name": "query",
                            "type": "Params",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RouteService {\n  constructor(\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n    private location: Location\n  ) {}\n\n  updateQueryParams(query: Params): void {\n    const url = this.router\n      .createUrlTree([], {\n        relativeTo: this.activatedRoute,\n        queryParams: query,\n      })\n      .toString();\n\n    this.location.go(url);\n  }\n\n  isAbsolute(href: string): boolean {\n    const r = new RegExp('^(?:[a-z]+:)?//', 'i');\n    return r.test(href);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ScreenService",
            "id": "injectable-ScreenService-7198734916cb4cb777f41c6d95f7e6f067b26d871419803026a8471ea5326dff5cf50cd85d8e362d7ac5eb1ced034329b559c149fb9b58bb95e8f78caa80ac93",
            "file": "src/app/core/service/screen.service.ts",
            "properties": [
                {
                    "name": "platformId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "PLATFORM_ID"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "gotoTop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isElementInViewport",
                    "args": [
                        {
                            "name": "el",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "el",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isElementOutBottomViewport",
                    "args": [
                        {
                            "name": "el",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "el",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isElementOutTopViewport",
                    "args": [
                        {
                            "name": "el",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "el",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isPlatformBrowser",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isPlatformServer",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "scrollToAnchor",
                    "args": [
                        {
                            "name": "location",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "wait",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "location",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "wait",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser, isPlatformServer } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ScreenService {\n  constructor(\n    @Inject(DOCUMENT) private document: Document,\n    @Inject(PLATFORM_ID) public platformId: object\n  ) {}\n\n  isPlatformServer(): boolean {\n    return isPlatformServer(this.platformId);\n  }\n\n  isPlatformBrowser(): boolean {\n    return isPlatformBrowser(this.platformId);\n  }\n\n  isElementInViewport(el: any): boolean {\n    const rect = el.getBoundingClientRect();\n    return (\n      rect.top >= 0 &&\n      rect.left >= 0 &&\n      rect.bottom <=\n        (window.innerHeight ||\n          this.document.documentElement\n            .clientHeight) /* or $(window).height() */ &&\n      rect.right <=\n        (window.innerWidth ||\n          this.document.documentElement.clientWidth) /* or $(window).width() */\n    );\n  }\n\n  isElementOutTopViewport(el: any): boolean {\n    const rect = el.getBoundingClientRect();\n    return (\n      rect.top < -el.clientHeight &&\n      rect.bottom <= 0 /* or $(window).height() */\n    );\n  }\n\n  isElementOutBottomViewport(el: any): boolean {\n    const rect = el.getBoundingClientRect();\n    return (\n      rect.top >\n      (window.innerHeight || this.document.documentElement.clientHeight)\n    );\n  }\n\n  scrollToAnchor(location: string, wait = 0): void {\n    const element = this.document.querySelector('#' + location);\n    if (element) {\n      setTimeout(() => {\n        element.scrollIntoView({\n          behavior: 'smooth',\n          block: 'start',\n          inline: 'nearest',\n        });\n      }, wait);\n    }\n  }\n\n  gotoTop(): void {\n    window.scroll({\n      top: 0,\n      left: 0,\n      behavior: 'smooth',\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "platformId",
                        "type": "object",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "object",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ScreenState",
            "id": "injectable-ScreenState-96de50cde5f5887d855fe15b7ca988a1879850a813841c16910f62821084de0616726e7006d5171a2820cdf872418ac244b6c1d2f7c6d001b2fa1a5268492385",
            "file": "src/app/core/mobx/screen/ScreenState.ts",
            "properties": [
                {
                    "name": "breakpointObserver",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BreakpointObserver",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "drawer$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isDrawer",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "observable"
                        }
                    ]
                },
                {
                    "name": "mediaObserver",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MediaObserver",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "scroll$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "stickyMenu$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "viewPort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "observable"
                        }
                    ]
                }
            ],
            "methods": [
                {
                    "name": "eq",
                    "args": [
                        {
                            "name": "targetPoint",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "targetPoint",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAlias",
                    "args": [
                        {
                            "name": "change",
                            "type": "MediaChange[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "change",
                            "type": "MediaChange[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initBrowserEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initScreen",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "action"
                        }
                    ]
                },
                {
                    "name": "mqAlias$",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string[]>",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleDrawer",
                    "args": [
                        {
                            "name": "open",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "open",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateDrwer",
                    "args": [
                        {
                            "name": "drawer",
                            "type": "MatDrawer",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "drawer",
                            "type": "MatDrawer",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Subject, Observable, fromEvent } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';\nimport { BreakpointObserver } from '@angular/cdk/layout';\nimport { action, observable } from 'mobx-angular';\nimport { MatDrawer } from '@angular/material/sidenav';\nimport { MediaObserver, MediaChange } from '@angular/flex-layout';\nimport { ScreenService } from '@core/service/screen.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ScreenState {\n  public scroll$ = new Subject();\n  public drawer$ = new Subject();\n  public stickyMenu$ = new Subject();\n\n  @observable viewPort: string[];\n  @observable isDrawer = false;\n\n  constructor(\n    public breakpointObserver: BreakpointObserver,\n    public mediaObserver: MediaObserver,\n    private screenService: ScreenService\n  ) {\n    if (this.screenService.isPlatformBrowser()) {\n      this.initScreen();\n      this.initBrowserEvents();\n    }\n  }\n\n  @action\n  initScreen(): any {\n    this.mqAlias$().subscribe((mq) => {\n      this.viewPort = mq;\n    });\n  }\n\n  mqAlias$(): Observable<string[]> {\n    return this.mediaObserver.asObservable().pipe(\n      distinctUntilChanged(\n        (x: MediaChange[], y: MediaChange[]) =>\n          this.getAlias(x) === this.getAlias(y)\n      ),\n      map((change: any) => {\n        return change.map((item: any) => {\n          return item.mqAlias;\n        });\n      })\n    );\n  }\n\n  getAlias(change: MediaChange[]): any {\n    return change[0].mqAlias;\n  }\n\n  eq(targetPoint: string): boolean {\n    if (this.screenService.isPlatformBrowser()) {\n      return this.viewPort.includes(targetPoint);\n    } else {\n      // TODO: need confirm\n      return 'xs' === targetPoint;\n    }\n  }\n\n  initBrowserEvents(): void {\n    const scroll = fromEvent(window, 'scroll')\n      .pipe(debounceTime(200))\n      .subscribe(() => {\n        this.scroll$.next();\n      });\n  }\n\n  @action\n  toggleDrawer(open: boolean): any {\n    this.drawer$.next();\n  }\n\n  @action\n  updateDrwer(drawer: MatDrawer): void {\n    this.isDrawer = drawer.opened;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mediaObserver",
                        "type": "MediaObserver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mediaObserver",
                        "type": "MediaObserver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TagsService",
            "id": "injectable-TagsService-9c1c60a235f9c583786e7b7b76a560a602bfb8a08e5c16f12031197220a78d23646eac205a5991cbe30311ff8662b7ca52b8a60ec12556b02462327af6b60fd1",
            "file": "src/app/core/service/tags.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addMeta",
                    "args": [
                        {
                            "name": "metas",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "metas",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTitle",
                    "args": [
                        {
                            "name": "newTitle",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "newTitle",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateMeta",
                    "args": [
                        {
                            "name": "meta",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "meta",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTages",
                    "args": [
                        {
                            "name": "pageValue",
                            "type": "IPage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "pageValue",
                            "type": "IPage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Meta, Title } from '@angular/platform-browser';\nimport { IPage } from '../mobx/IAppConfig';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TagsService {\n  constructor(private titleService: Title, private meta: Meta) {}\n\n  public setTitle(newTitle: string): void {\n    this.titleService.setTitle(newTitle);\n  }\n\n  public addMeta(metas: any[]): void {\n    this.meta.addTags(metas);\n  }\n\n  public updateMeta(meta: any): void {\n    this.meta.updateTag(meta);\n  }\n\n  public updateTages(pageValue: IPage): void {\n    this.setTitle(pageValue.title);\n    if (pageValue.meta) {\n      pageValue.meta.forEach((item) => {\n        this.updateMeta(item);\n      });\n    } else {\n      this.updateMeta({\n        name: 'description',\n        content: '',\n      });\n      this.updateMeta({\n        name: 'keywords',\n        content: '',\n      });\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "meta",
                        "type": "Meta",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "meta",
                        "type": "Meta",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserService",
            "id": "injectable-UserService-a3b6f59060e5946af3c76e98f448502df83b8a4e5199240b1a9fe97eb6025b9a0076b344644d2b2da0b88e7705c4fa960b95ecce154a9002295754583563095d",
            "file": "src/app/core/service/user.service.ts",
            "properties": [
                {
                    "name": "cryptoJS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CryptoJSService",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "http",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpClient",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "storage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LocalStorageService",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "configLoadDone$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "ApiService"
                    }
                },
                {
                    "name": "localUserKey",
                    "defaultValue": "camelCase(environment.apiUrl.split('//')[1])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "ApiService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getCode",
                    "args": [
                        {
                            "name": "phone",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "phone",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCurrentUserById",
                    "args": [
                        {
                            "name": "uid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "uid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCurrentUserProfile",
                    "args": [
                        {
                            "name": "crsfToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "crsfToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLoginState",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUser",
                    "args": [
                        {
                            "name": "params",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUserById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "crsfToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "crsfToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "userName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "passWord",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "passWord",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loginByPhone",
                    "args": [
                        {
                            "name": "phone",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "phone",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [
                        {
                            "name": "logoutToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "logoutToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "storeLocalUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "IUser",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "IUser",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDeepValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ApiService"
                    }
                },
                {
                    "name": "getParams",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ApiService"
                    }
                },
                {
                    "name": "optionsWithCookieAndToken",
                    "args": [
                        {
                            "name": "csrfToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "csrfToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ApiService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ApiService } from './api.service';\nimport { map } from 'rxjs/operators';\nimport { TokenUser, IUser } from '../mobx/user/IUser';\nimport { LocalStorageService } from 'ngx-webstorage';\nimport { CryptoJSService } from './crypto-js.service';\nimport { CORE_CONFIG } from '@core/token/core.config';\nimport { ICoreConfig } from '@core/mobx/IAppConfig';\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService extends ApiService {\n  constructor(\n    public http: HttpClient,\n    public storage: LocalStorageService,\n    public cryptoJS: CryptoJSService,\n    @Inject(CORE_CONFIG) private coreConfig: ICoreConfig\n  ) {\n    super();\n  }\n\n  get userApiPath(): string {\n    return `${this.apiUrl}${this.coreConfig.apiUrl.userGetPath}`;\n  }\n\n  login(userName: string, passWord: string): Observable<any> {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        Accept: 'application/vnd.api+json',\n        'Content-type': 'application/vnd.api+json',\n      }),\n      withCredentials: true,\n    };\n\n    return this.http.post<any>(\n      `${this.apiUrl}${this.coreConfig.apiUrl.loginPath}?_format=json`,\n      {\n        name: userName,\n        pass: passWord,\n      },\n      httpOptions\n    );\n  }\n\n  logout(logoutToken: string): Observable<any> {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        Accept: 'application/vnd.api+json',\n      }),\n      withCredentials: true,\n    };\n    const params = ['_format=json', `token=${logoutToken}`].join('&');\n    return this.http.post(\n      `${this.apiUrl}${this.coreConfig.apiUrl.logoutPath}?${params}`,\n      null,\n      httpOptions\n    );\n  }\n\n  getCode(phone: string): Observable<any> {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-type': 'application/json',\n        Accept: 'application/json',\n      }),\n    };\n\n    return this.http.post(`${this.apiUrl}/api/v1/otp/generate?format=json`, {\n      mobile_number: phone,\n    });\n  }\n\n  loginByPhone(phone: number, code: string): Observable<any> {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-type': 'application/json',\n        Accept: 'application/json',\n      }),\n    };\n\n    return this.http.post(`${this.apiUrl}/api/v1/otp/login?format=json`, {\n      mobile_number: phone,\n      code,\n    });\n  }\n\n  getUserById(id: string, crsfToken: string): Observable<any> {\n    const params = [\n      `filter[drupal_internal__uid]=${id}`,\n      `include=user_picture,roles`,\n      `jsonapi_include=1`,\n    ].join('&');\n    return this.http.get<any>(\n      `${this.userApiPath}?${params}`,\n      this.optionsWithCookieAndToken(crsfToken)\n    );\n  }\n\n  getUser(params: string): Observable<any> {\n    return this.http.get<any>(`${this.userApiPath}?${params}`);\n  }\n\n  getCurrentUserProfile(crsfToken: string): Observable<any> {\n    return this.http.get<any>(\n      `${this.apiUrl}/api/v1/accountProfile`,\n      this.optionsWithCookieAndToken(crsfToken)\n    );\n  }\n\n  getCurrentUserById(uid: string, token: string): Observable<any> {\n    const params = [\n      `filter[drupal_internal__uid]=${uid}`,\n      `include=user_picture`,\n    ].join('&');\n    return this.http\n      .get<any>(\n        `${this.userApiPath}?${params}`,\n        this.optionsWithCookieAndToken(token)\n      )\n      .pipe(\n        map((res: any) => {\n          const detail = res.data[0];\n          const info = detail.attributes;\n          const relate = res.included && res.included[0];\n          return {\n            id: detail.id,\n            display_name: info.display_name,\n            mail: info.mail,\n            authenticated: true,\n            picture: relate ? relate.attributes.uri.url : null,\n          };\n        })\n      );\n  }\n\n  storeLocalUser(user: IUser): void {\n    this.storage.store(\n      this.localUserKey,\n      this.cryptoJS.encrypt(JSON.stringify(user))\n    );\n  }\n\n  getLoginState(): Observable<boolean> {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-type': 'application/json',\n      }),\n      withCredentials: true,\n    };\n    return this.http\n      .get<any>(`${this.apiUrl}/user/login_status?_format=json`, httpOptions)\n      .pipe(\n        map((state) => {\n          if (state) {\n            return true;\n          }\n          return false;\n        })\n      );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "storage",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cryptoJS",
                        "type": "CryptoJSService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "coreConfig",
                        "type": "ICoreConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storage",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cryptoJS",
                        "type": "CryptoJSService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "coreConfig",
                        "type": "ICoreConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "userApiPath": {
                    "name": "userApiPath",
                    "getSignature": {
                        "name": "userApiPath",
                        "type": "string",
                        "returnType": "string",
                        "line": 24
                    }
                }
            },
            "extends": "ApiService",
            "type": "injectable"
        },
        {
            "name": "UserState",
            "id": "injectable-UserState-f9ac94762701a3ebec715e3797d731a61114a6dddccf41c4a7beea404fce0374a4d4624ac9ef6eb6dc092ed4e5d7f80ede8c318366ee1fcef1fc3146d3349150",
            "file": "src/app/core/mobx/user/UserState.ts",
            "properties": [
                {
                    "name": "error",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "observable"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "decorators": [
                        {
                            "name": "observable"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "user",
                    "defaultValue": "unauthUser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IUser",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "observable"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "user$",
                    "defaultValue": "new Subject<IUser>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "userName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "passWord",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "userName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "passWord",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loginByPhone",
                    "args": [
                        {
                            "name": "phone",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "phone",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loginUser",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "user",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "user",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logouLocalUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "action"
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "action"
                        }
                    ]
                },
                {
                    "name": "logoutUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "refreshLocalUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "IUser",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 211,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "IUser",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateUser",
                    "args": [
                        {
                            "name": "data",
                            "type": "TokenUser",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "TokenUser",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateUserBySession",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "action"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { action, observable, computed } from 'mobx-angular';\nimport { LocalStorageService } from 'ngx-webstorage';\nimport { IUser, TokenUser } from './IUser';\nimport { of, Subject, forkJoin } from 'rxjs';\nimport { UserService } from '@core/service/user.service';\nimport { UtilitiesService } from '@core/service/utilities.service';\nimport { CryptoJSService } from '@core/service/crypto-js.service';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\n\nconst unauthUser = {\n  id: '',\n  authenticated: false,\n  csrf_token: '',\n  current_user: {\n    uid: '',\n    name: '',\n    roles: [],\n  },\n  logout_token: '',\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserState {\n  @observable private user: IUser = unauthUser;\n  @observable public error = '';\n  @observable public loading = false;\n\n  user$ = new Subject<IUser>();\n\n  constructor(\n    private cryptoJS: CryptoJSService,\n    private userService: UserService,\n    private utilities: UtilitiesService,\n    private storage: LocalStorageService\n  ) {\n    if (this.storage.retrieve(this.userService.localUserKey)) {\n      this.user = JSON.parse(\n        this.cryptoJS.decrypt(\n          this.storage.retrieve(this.userService.localUserKey)\n        )\n      );\n      console.log(this.user);\n    }\n  }\n\n  @computed get currentUser(): IUser {\n    return Object.assign({}, this.user);\n  }\n\n  @computed\n  get authenticated(): boolean {\n    return this.user.authenticated;\n  }\n\n  @computed\n  get picture(): any {\n    return this.user && this.user.picture;\n  }\n\n  @computed\n  get roles(): string[] {\n    return (this.currentUser && this.currentUser.current_user.roles) || [''];\n  }\n\n  get defaultAvatar(): string {\n    return '/assets/images/avatar/default.svg';\n  }\n\n  @computed\n  get logoutToken(): string {\n    return this.currentUser && this.currentUser.logout_token;\n  }\n\n  @computed\n  get csrfToken(): string {\n    return this.currentUser && this.currentUser.csrf_token;\n  }\n\n  @action\n  login(userName: string, passWord: string): any {\n    this.loading = true;\n    this.userService.login(userName, passWord).subscribe(\n      (data) => {\n        this.updateUser(data);\n      },\n      (error) => {\n        this.loading = false;\n        this.error = error.message;\n      }\n    );\n  }\n\n  @action\n  loginByPhone(phone: number, code: string): any {\n    this.loading = true;\n    this.userService.loginByPhone(phone, code).subscribe(\n      (data) => {\n        if (data.status) {\n          this.updateUser(data);\n        } else {\n          this.utilities.openSnackbar(data.message);\n          this.loading = false;\n        }\n      },\n      (error) => {\n        console.log(error);\n      }\n    );\n  }\n\n  @action\n  logout(): any {\n    if (environment.drupalProxy) {\n      this.logoutUser();\n      window.location.href = '/user/logout';\n      return;\n    }\n    this.userService\n      .logout(this.logoutToken)\n      .pipe(\n        catchError((error) => {\n          if (error.status === 403) {\n            return of(true);\n          }\n          console.log('退出异常！');\n          return of(false);\n        })\n      )\n      .subscribe(() => {\n        this.logoutUser();\n      });\n  }\n\n  logoutUser(): void {\n    this.user$.next(unauthUser);\n    this.user = unauthUser;\n    this.storage.clear(this.userService.localUserKey);\n  }\n\n  @action\n  loginUser(data: any, user: any): void {\n    this.loading = false;\n    this.user$.next(user);\n    this.user = Object.assign(data, user);\n    this.userService.storeLocalUser(this.user);\n  }\n\n  @action\n  logouLocalUser(): void {\n    this.user$.next(unauthUser);\n    this.user = unauthUser;\n    this.storage.clear(this.userService.localUserKey);\n  }\n\n  @action\n  updateUser(data: TokenUser): any {\n    this.userService\n      .getCurrentUserById(data.current_user.uid, data.csrf_token)\n      .subscribe((user) => {\n        this.loginUser(data, user);\n      });\n  }\n\n  @action\n  updateUserBySession(): void {\n    const options = {\n      headers: new HttpHeaders({\n        Accept: 'application/vnd.api+json',\n        'Content-Type': 'application/vnd.api+json',\n      }),\n      withCredentials: true,\n    };\n    const sesstion = this.userService.http.get('/session/token', {\n      responseType: 'text',\n    });\n    const profile = this.userService.http.get(\n      '/api/v1/accountProfile',\n      options\n    );\n    let tokenUser = {};\n    forkJoin({\n      csrf_token: sesstion,\n      current_user: profile,\n    })\n      .pipe(\n        switchMap((data: any) => {\n          console.log(data);\n          tokenUser = data;\n          return this.userService.getCurrentUserById(\n            data.current_user.uid,\n            data.csrf_token\n          );\n        }),\n        catchError((error: any) => {\n          console.log(error);\n          return of(null);\n        })\n      )\n      .subscribe((user) => {\n        console.log('get session user done!');\n        this.loginUser(tokenUser, user);\n      });\n  }\n\n  @action\n  refreshLocalUser(user: IUser): void {\n    this.user$.next(user);\n    this.user = user;\n    this.userService.storeLocalUser(user);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cryptoJS",
                        "type": "CryptoJSService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilities",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "storage",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "cryptoJS",
                        "type": "CryptoJSService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilities",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storage",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "currentUser": {
                    "name": "currentUser",
                    "getSignature": {
                        "name": "currentUser",
                        "type": "",
                        "returnType": "IUser",
                        "line": 51
                    }
                },
                "authenticated": {
                    "name": "authenticated",
                    "getSignature": {
                        "name": "authenticated",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 56
                    }
                },
                "picture": {
                    "name": "picture",
                    "getSignature": {
                        "name": "picture",
                        "type": "any",
                        "returnType": "any",
                        "line": 61
                    }
                },
                "roles": {
                    "name": "roles",
                    "getSignature": {
                        "name": "roles",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 66
                    }
                },
                "defaultAvatar": {
                    "name": "defaultAvatar",
                    "getSignature": {
                        "name": "defaultAvatar",
                        "type": "string",
                        "returnType": "string",
                        "line": 70
                    }
                },
                "logoutToken": {
                    "name": "logoutToken",
                    "getSignature": {
                        "name": "logoutToken",
                        "type": "string",
                        "returnType": "string",
                        "line": 75
                    }
                },
                "csrfToken": {
                    "name": "csrfToken",
                    "getSignature": {
                        "name": "csrfToken",
                        "type": "string",
                        "returnType": "string",
                        "line": 80
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "UtilitiesService",
            "id": "injectable-UtilitiesService-35f63433758a01d7797e5412642d9d38645dbae314c2f43a318c68f37891badc4e7e3f129a4cf2927c9975c350628a9827950feaf554b0e3926cbe39ead0ac27",
            "file": "src/app/core/service/utilities.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getFileType",
                    "args": [
                        {
                            "name": "href",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "href",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getIndexTitle",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadScript",
                    "args": [
                        {
                            "name": "src",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "defer",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "src",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "defer",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openSnackbar",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        },
                        {
                            "name": "config",
                            "type": "MatSnackBarConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "MatSnackBarConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UtilitiesService {\n  constructor(\n    private snackbar: MatSnackBar,\n    @Inject(DOCUMENT) private document: Document\n  ) {}\n\n  getIndexTitle(title: string): string {\n    return title.substring(0, 1);\n  }\n\n  get fullYear(): number {\n    return new Date().getFullYear();\n  }\n\n  openSnackbar(message: string, action = '', config?: MatSnackBarConfig): void {\n    this.snackbar.open(\n      message,\n      action,\n      config\n        ? config\n        : {\n            horizontalPosition: 'center',\n            verticalPosition: 'top',\n            duration: 3000,\n          }\n    );\n  }\n\n  loadScript(src: string, id?: any, defer?: boolean): any {\n    const script = this.document.createElement('script');\n    script.src = src;\n    script.async = true;\n    if (defer) {\n      script.defer = true;\n    }\n    if (id) {\n      script.id = id;\n    }\n    this.document.body.appendChild(script);\n  }\n\n  getFileType(href: string): string {\n    const url = href.toLowerCase();\n    const pdfReg = /^.+(\\.pdf)$/;\n    const txtReg = /^.+(\\.txt)$/;\n    const wordReg = /^.+(\\.doc|\\.docx)$/;\n    const excelReg = /^.+(\\.xls|\\.xlsx)$/;\n    const jpgReg = /^.+(\\.png|\\.jpg|\\.jpeg|\\.bmp)$/;\n    if (pdfReg.test(url)) {\n      return 'pdf';\n    }\n    if (txtReg.test(url)) {\n      return 'txt';\n    }\n    if (wordReg.test(url)) {\n      return 'word';\n    }\n    if (excelReg.test(url)) {\n      return 'excel';\n    }\n    if (jpgReg.test(url)) {\n      return 'picture';\n    }\n    return '';\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "snackbar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "snackbar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "fullYear": {
                    "name": "fullYear",
                    "getSignature": {
                        "name": "fullYear",
                        "type": "number",
                        "returnType": "number",
                        "line": 18
                    }
                }
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-29bc5f38f99511d5006818e41170315b7a8aee02dfc3edf8c11ff17157992b05613b22e2f36bb07eae9def8ed47519ddf7f41b7f729d0d4dcc2853166e05de33",
            "file": "src/app/core/guards/auth.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean | UrlTree",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\nimport {\n  CanActivate,\n  Router,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  UrlTree,\n} from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { UserState } from '../mobx/user/UserState';\nimport { UserService } from '@core/service/user.service';\nimport { catchError, map } from 'rxjs/operators';\nimport { CORE_CONFIG } from '@core/token/core.config';\nimport { ICoreConfig } from '@core/mobx/IAppConfig';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private router: Router,\n    private userState: UserState,\n    private userService: UserService,\n    @Inject(CORE_CONFIG) private coreConfig: ICoreConfig\n  ) {}\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n    // return true;\n    if (state.url.startsWith('/my') || this.coreConfig?.guard?.authGuard) {\n      return this.userService.getLoginState().pipe(\n        map((status) => {\n          console.log('userState:', status);\n          if (status) {\n            if (environment?.drupalProxy) {\n              if (!this.userState.csrfToken) {\n                this.userState.updateUserBySession();\n              }\n            }\n            return true;\n          } else {\n            this.userState.logouLocalUser();\n            if (environment?.drupalProxy) {\n              window.location.href = 'user/login';\n              return false;\n            } else {\n              this.router.navigate(['my/login'], {\n                queryParams: { returnUrl: state.url },\n              });\n              return false;\n            }\n          }\n        }),\n        catchError(() => {\n          this.router.navigate(['my/login']);\n          return of(false);\n        })\n      );\n    }\n    return true;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userState",
                        "type": "UserState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "coreConfig",
                        "type": "ICoreConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userState",
                        "type": "UserState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "coreConfig",
                        "type": "ICoreConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "ManageGuard",
            "id": "injectable-ManageGuard-5471ddf4b6c756fbe169926b37e91b58c9062935ffd31727eaf92053160821f2b6a8cb54266e0259982d1d6bd009636a92e3eaeade9d475b538b357d3ce1aed2",
            "file": "src/app/core/guards/manage.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean | UrlTree",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  CanActivate,\n  Router,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  UrlTree,\n} from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { UserState } from '../mobx/user/UserState';\nimport { UserService } from '@core/service/user.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { UtilitiesService } from '@core/service/utilities.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ManageGuard implements CanActivate {\n  constructor(\n    private router: Router,\n    private userState: UserState,\n    private userService: UserService,\n    private uti: UtilitiesService\n  ) {}\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n    // TODO: change to user state\n    if (this.userState.authenticated) {\n      return this.userService\n        .getCurrentUserProfile(this.userState.csrfToken)\n        .pipe(\n          catchError((res: any) => {\n            console.log(res);\n            return of({});\n          }),\n          map((user) => {\n            console.log(user);\n            if (!user) {\n              this.router.navigate(['home']);\n              return false;\n            }\n            if (user?.roles?.includes('administrator')) {\n              return true;\n            }\n            this.router.navigate(['home']);\n            return false;\n          })\n        );\n    }\n    this.router.navigate(['home']);\n    return false;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userState",
                        "type": "UserState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "uti",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userState",
                        "type": "UserState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "uti",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "BrowserStateInterceptor",
            "id": "injectable-BrowserStateInterceptor-93859ba8c32fb82abb07da558a735570c0a01fb80284d3c1c9580d9774c9f32260d1d2af1933b32e8aadbc7ecad18dd306ad9bc2160b1b902e2375afdc7cf0fd",
            "file": "src/app/core/interceptors/browserState-interceptor.service.ts",
            "properties": [
                {
                    "name": "coreConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICoreConfig",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "CORE_CONFIG"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { makeStateKey, TransferState } from '@angular/platform-browser';\nimport { ICoreConfig } from '@core/mobx/IAppConfig';\nimport { ApiService } from '@core/service/api.service';\nimport { CORE_CONFIG } from '@core/token/core.config';\nimport { Observable, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BrowserStateInterceptor implements HttpInterceptor {\n  constructor(\n    private transferState: TransferState,\n    private apiService: ApiService,\n    @Inject(CORE_CONFIG) public coreConfig: ICoreConfig\n  ) {}\n\n  intercept(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (req.method === 'GET') {\n      const key = makeStateKey(req.url);\n      const storedResponse: any = this.transferState.get(key, null);\n      if (storedResponse) {\n        const response = new HttpResponse({\n          body: storedResponse,\n          status: 200,\n        });\n        this.apiService.configLoadDone$.next(true);\n        return of(response);\n      }\n    }\n\n    if (this.coreConfig?.access?.check) {\n      req = req.clone({\n        withCredentials: true,\n      });\n    }\n\n    return next.handle(req);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "transferState",
                        "type": "TransferState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "coreConfig",
                        "type": "ICoreConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "transferState",
                        "type": "TransferState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "coreConfig",
                        "type": "ICoreConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        },
        {
            "name": "HttpRequestInterceptor",
            "id": "injectable-HttpRequestInterceptor-01aaf5a932c8d186e0f35c9adeb5d2bced653ebb731c19247e7d65116d3f0e8eccb4c67e73f5c7ed2bcf135a8f21bbc51fd92c5fa21fc486ee22e9b3b536e565",
            "file": "src/app/core/interceptors/loader-interceptor.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { LoadingService } from '../service/loading.service';\n\n@Injectable()\nexport class HttpRequestInterceptor implements HttpInterceptor {\n  constructor(private loadingService: LoadingService) {}\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<any> {\n    // api with loading disable globel loading\n    const isDisableLoading = request.urlWithParams.includes('loading');\n    this.loadingService.setLoading(\n      isDisableLoading ? false : true,\n      request.url\n    );\n    return next\n      .handle(request)\n      .pipe(\n        catchError((err) => {\n          this.loadingService.setLoading(false, request.url);\n          return err;\n        })\n      )\n      .pipe(\n        map((evt) => {\n          if (evt instanceof HttpResponse) {\n            this.loadingService.setLoading(false, request.url);\n          }\n          return evt;\n        })\n      );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "loadingService",
                        "type": "LoadingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "loadingService",
                        "type": "LoadingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        },
        {
            "name": "ServerStateInterceptor",
            "id": "injectable-ServerStateInterceptor-c5bee33df3db1dab25930ae865d313cafb6c41a7b40d68714a8c3b412e7f21fdf7762284389d638b54ca19d29fcc85ca9df03892f6dfac5c3ff21baace2c80c6",
            "file": "src/app/core/interceptors/serverState-interceptor.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { makeStateKey, TransferState } from '@angular/platform-browser';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\n\n@Injectable()\nexport class ServerStateInterceptor implements HttpInterceptor {\n  constructor(private transferState: TransferState) {}\n\n  intercept(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return next.handle(req).pipe(\n      tap((event) => {\n        // can check changed?\n        console.log(event);\n        if (\n          event instanceof HttpResponse &&\n          environment.cache &&\n          (event.status === 200 || event.status === 202) &&\n          !req.url.includes('preview')\n        ) {\n          this.transferState.set(makeStateKey(req.url), event.body);\n        }\n      })\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "transferState",
                        "type": "TransferState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "transferState",
                        "type": "TransferState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-d83b95cb897fd7f1ecc7216a31a9167598810a902c9c43ec11b6a93965548994186b900fe348e64bdf35a97b36d2fdb26731097dc1738e7f73bc67d2d432a47c",
            "file": "e2e/src/app.po.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  async navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl);\n  }\n\n  async getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText();\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<>",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "Action1v1Component",
            "id": "component-Action1v1Component-fe503c69e8a39a44b47c1375cb3070e00251f9c5e8c48fbb739879e1a892520ae572b32b7d3f36b0115e878d5567c6f726e5e219c53dd19f68a08855fe306b06",
            "file": "src/app/uiux/combs/action/action1v1/action1v1.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-action1v1",
            "styleUrls": [
                "./action1v1.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./action1v1.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  Input,\n  ChangeDetectionStrategy,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-action1v1',\n  templateUrl: './action1v1.component.html',\n  styleUrls: ['./action1v1.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class Action1v1Component implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".inner {\n  max-width: 800px;\n  margin: 0 auto;\n}\n",
                    "styleUrl": "./action1v1.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"action-1-v1 position-relative overflow-hidden\">\n  <a class=\"anchor\" *ngIf=\"content.id\" [id]=\"content.id\"></a>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n  <app-bg-img [content]=\"content.bg\"></app-bg-img>\n  <div class=\"container\">\n    <div class=\"inner text-center\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n      <app-text [content]=\"content.text\"></app-text>\n    </div>\n  </div>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n  <app-shape *ngIf=\"content.shape\"></app-shape>\n</div>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-56ed23dae148dbe268dc406ef1adb7754884cb462f1190920fd3478b6e3d07a1a93e5bdfbfde5c1c1ee64a9633098a769ae7cd107bf843ead7c81cb7d38f2d52",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authenticated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "branding",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BrandingState",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "coreConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICoreConfig",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "CORE_CONFIG"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "navigation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavigationService",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "opened",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "screen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScreenState",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "userState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserState",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateDrawer",
                    "args": [
                        {
                            "name": "drawer",
                            "type": "MatDrawer",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "drawer",
                            "type": "MatDrawer",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, AfterViewInit, Inject } from '@angular/core';\nimport { UserState } from './core/mobx/user/UserState';\nimport { ScreenState } from './core/mobx/screen/ScreenState';\nimport { MatDrawer } from '@angular/material/sidenav';\nimport { BrandingState } from './core/mobx/BrandingState';\nimport { ActivatedRoute } from '@angular/router';\nimport { ScreenService } from '@core/service/screen.service';\nimport { ConfigService } from '@core/service/config.service';\nimport { NavigationService } from '@core/service/navigation.service';\nimport { CORE_CONFIG } from '@core/token/core.config';\nimport { ICoreConfig } from '@core/mobx/IAppConfig';\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent implements OnInit, AfterViewInit {\n  authenticated: boolean;\n  opened: boolean;\n  loading = false;\n  constructor(\n    public userState: UserState,\n    public screen: ScreenState,\n    public branding: BrandingState,\n    private router: ActivatedRoute,\n    private screenService: ScreenService,\n    private configService: ConfigService,\n    public navigation: NavigationService,\n    @Inject(CORE_CONFIG) public coreConfig: ICoreConfig\n  ) {\n    this.navigation.startSaveHistory();\n  }\n\n  ngOnInit(): void {\n    this.configService.init();\n  }\n\n  ngAfterViewInit(): void {\n    if (this.screenService.isPlatformBrowser()) {\n      this.screen.drawer$.subscribe((res) => {\n        this.opened = !this.opened;\n      });\n\n      this.router.fragment.subscribe((fragment) => {\n        if (fragment) {\n          this.screenService.scrollToAnchor(fragment);\n        }\n      });\n    }\n  }\n\n  updateDrawer(drawer: MatDrawer): void {\n    if (this.screenService.isPlatformBrowser()) {\n      this.screen.updateDrwer(drawer);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/theme/variable/breakpoint\";\n\n.main {\n  min-height: calc(100vh - 76px);\n}\n\n::ng-deep {\n  .mat-drawer {\n    @media #{$xs} {\n      position: fixed !important;\n      width: 80vw;\n    }\n  }\n  .cdk-overlay-container {\n    .cdk-overlay-pane {\n      .mat-menu-content {\n        max-height: 580px;\n      }\n    }\n  }\n}\n.loading-container {\n  display: flex;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(255, 255, 255, 1);\n  z-index: 5;\n}\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userState",
                        "type": "UserState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screen",
                        "type": "ScreenState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "branding",
                        "type": "BrandingState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "navigation",
                        "type": "NavigationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "coreConfig",
                        "type": "ICoreConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "userState",
                        "type": "UserState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screen",
                        "type": "ScreenState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "branding",
                        "type": "BrandingState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "navigation",
                        "type": "NavigationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "coreConfig",
                        "type": "ICoreConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<div *ngIf=\"loading\" class=\"loading-container\">\n  <div class=\"loader\">Loading...</div>\n</div>\n<mat-drawer-container [class.authenticated]=\"userState.authenticated\" *ngIf=\"coreConfig && branding.ready\">\n  <mat-drawer #drawer [(opened)]=\"opened\" (opened)=\"updateDrawer(drawer)\" (closed)=\"updateDrawer(drawer)\">\n    <app-menu [isDrawer]=\"opened\" [content]=\"branding.header\"></app-menu>\n  </mat-drawer>\n  <mat-drawer-content>\n    <app-header></app-header>\n    <div class=\"main\">\n      <router-outlet></router-outlet>\n    </div>\n    <app-footer></app-footer>\n  </mat-drawer-content>\n</mat-drawer-container>\n"
        },
        {
            "name": "ArticleBannerComponent",
            "id": "component-ArticleBannerComponent-acdb9f798a4421030c416a7e6bce4c5f8783f95f5582c6a6a3d60ebcc0a8b682653d8866ff462848daca0b5c386d9673a63145f507c96c1b3b2fe01b60c80c51",
            "file": "src/app/uiux/combs/node/article/article-banner/article-banner.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-article-banner",
            "styleUrls": [
                "./article-banner.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./article-banner.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-article-banner',\n  templateUrl: './article-banner.component.html',\n  styleUrls: ['./article-banner.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ArticleBannerComponent implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".article-banner {\n  width: 100%;\n  padding-bottom: 33.3%;\n  background-size: cover;\n  background-position: 50%;\n  margin-top: 0;\n}\n",
                    "styleUrl": "./article-banner.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"article-banner\" *ngIf=\"content\" style=\"background-image: url({{content.img.src}});\"></div>\n"
        },
        {
            "name": "ArticleComponent",
            "id": "component-ArticleComponent-cb3cec09677b40c54156678031ed63c06ffeb0c3c21ec1ef2ff9d6634d765544b392cb055712baaf6b4f5b701a831bc6b977fe99156e91efd6a2302350352526",
            "file": "src/app/uiux/combs/node/article/article.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-article",
            "styleUrls": [
                "./article.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./article.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "IBaseNode",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "canAccess",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "commentForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "comments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "contentState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ContentState",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "coreConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICoreConfig",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "CORE_CONFIG"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "currentUserRule",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "fontForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "fontSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "htmlBody",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "isPayed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "isReqRule",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "nodeService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NodeService",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "payUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "reqMoney",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "screen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScreenState",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showNotXs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "userState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserState",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "NodeComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "checkAccess",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getComments",
                    "args": [
                        {
                            "name": "timeStamp",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "timeStamp",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 243,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFontSize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openPayMentDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "pay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "upgrade",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { DOCUMENT } from '@angular/common';\nimport {\n  Component,\n  Input,\n  OnInit,\n  AfterViewInit,\n  Inject,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  OnDestroy,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport hljs from 'highlight.js/lib/core';\nimport javascript from 'highlight.js/lib/languages/javascript';\nimport php from 'highlight.js/lib/languages/php';\nimport scss from 'highlight.js/lib/languages/scss';\nimport { TagsService } from '@core/service/tags.service';\nimport { ScreenState } from '@core/mobx/screen/ScreenState';\nimport { ScreenService } from '@core/service/screen.service';\nimport { FormService } from '@core/service/form.service';\nimport { Subject, of } from 'rxjs';\nimport { takeUntil, catchError } from 'rxjs/operators';\nimport { UserState } from '@core/mobx/user/UserState';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { LoginComponent } from '../../../../modules/user/login/login.component';\nimport { Router } from '@angular/router';\nimport { NodeService } from '@core/service/node.service';\nimport { environment } from 'src/environments/environment';\nimport { DialogComponent } from '../../../widgets/dialog/dialog.component';\nimport { TextComponent } from '@uiux/widgets/text/text.component';\nimport { UserService } from '@core/service/user.service';\nimport { NodeComponent } from '@uiux/base/node.widget';\nimport { IBaseNode } from '@core/interface/node/INode';\nimport { ContentState } from '@core/mobx/ContentState';\nimport { CORE_CONFIG } from '@core/token/core.config';\nimport { ICoreConfig } from '../../../../core/mobx/IAppConfig';\n\n@Component({\n  selector: 'app-article',\n  templateUrl: './article.component.html',\n  styleUrls: ['./article.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ArticleComponent\n  extends NodeComponent\n  implements OnInit, AfterViewInit, OnDestroy\n{\n  @Input() content: IBaseNode;\n  currentUserRule: string[];\n  commentForm: FormGroup;\n  comments: any[];\n  destroy$: Subject<boolean> = new Subject<boolean>();\n  dialogRef: MatDialogRef<any>;\n  fontSize: number;\n  fontForm: FormGroup;\n  htmlBody: any;\n  isReqRule = false;\n  canAccess: boolean;\n  reqMoney: number;\n  payUrl: string;\n  isPayed = false;\n  showNotXs: boolean;\n\n  constructor(\n    private cd: ChangeDetectorRef,\n    private dialog: MatDialog,\n    private formService: FormService,\n    private router: Router,\n    public nodeService: NodeService,\n    public screen: ScreenState,\n    private screenService: ScreenService,\n    private tagsService: TagsService,\n    public userState: UserState,\n    private userService: UserService,\n    public contentState: ContentState,\n    @Inject(DOCUMENT) private document: Document,\n    @Inject(CORE_CONFIG) public coreConfig: ICoreConfig\n  ) {\n    super();\n    if (this.screenService.isPlatformBrowser()) {\n      hljs.registerLanguage('javascript', javascript);\n      hljs.registerLanguage('php', php);\n      hljs.registerLanguage('scss', scss);\n    }\n  }\n\n  ngOnInit(): void {\n    if (this.content.title) {\n      this.tagsService.setTitle(this.content.title);\n    }\n    if (this.screenService.isPlatformBrowser()) {\n      this.onFontSize();\n    }\n    this.checkAccess();\n\n    this.userState.user$.subscribe(() => {\n      this.cd.markForCheck();\n    });\n  }\n\n  checkAccess(): void {\n    this.nodeService\n      .checkNodeAccess(this.content.params)\n      .subscribe((access) => {\n        this.canAccess = access.canAccess;\n        this.isReqRule = access.isReqRule;\n        this.isPayed = access.isPayed;\n        this.payUrl = access.payUrl;\n        this.reqMoney = access.reqMoney;\n        this.cd.detectChanges();\n      });\n  }\n\n  onFontSize(): void {\n    if (this.fontSizeConfig) {\n      this.fontForm = this.formService.toFormGroup(this.fontSizeConfig.form);\n      this.fontForm.valueChanges\n        .pipe(takeUntil(this.destroy$))\n        .subscribe((size) => {\n          this.fontSize = Math.max(10, size.font);\n        });\n    }\n  }\n\n  ngAfterViewInit(): void {\n    if (this.screenService.isPlatformBrowser()) {\n      this.document.querySelectorAll('code').forEach((block) => {\n        // then highlight each\n        hljs.highlightBlock(block);\n      });\n      this.screen.mqAlias$().subscribe((mq) => {\n        this.showNotXs = mq.includes('gt-xs');\n        this.cd.detectChanges();\n      });\n    }\n    if (this.coreConfig.article?.comment?.enable) {\n      this.getComments();\n      if (this.screenService.isPlatformBrowser()) {\n        this.contentState.commentChange$\n          .pipe(takeUntil(this.destroy$))\n          .subscribe((state) => {\n            if (state) {\n              this.getComments(+new Date());\n            }\n          });\n      }\n    }\n  }\n\n  getComments(timeStamp = 1): void {\n    this.nodeService\n      .getCommentsWitchChild(this.content, this.userState.csrfToken, timeStamp)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((res) => {\n        this.comments = res;\n        this.cd.markForCheck();\n      });\n  }\n\n  openLogin(): void {\n    const returnUrl = window.location.pathname;\n    this.router.navigate([], {\n      queryParams: { returnUrl },\n    });\n    this.dialogRef = this.dialog.open(LoginComponent);\n    this.dialogRef\n      .afterClosed()\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(() => {\n        this.checkAccess();\n      });\n  }\n\n  upgrade(): void {\n    this.openPayMentDialog();\n    window.open(\n      `${environment.apiUrl}${this.coreConfig.commerce.vip}`,\n      '_blank'\n    );\n  }\n\n  pay(): void {\n    this.openPayMentDialog();\n    window.open(this.payUrl);\n  }\n\n  openPayMentDialog(): void {\n    const dialogRef = this.dialog.open(DialogComponent, {\n      width: '500px',\n      disableClose: true,\n      data: {\n        renderInputComponent: TextComponent,\n        disableCloseButton: true,\n        inputData: {\n          content: this.coreConfig.commerce.dialog,\n        },\n      },\n    });\n    dialogRef\n      .afterClosed()\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(() => {\n        this.userService\n          .getCurrentUserProfile(this.userState.csrfToken)\n          // .pipe(\n          //   catchError((err) => {\n          //     return of({\n          //       uid: '83',\n          //       name: 'test',\n          //       roles: ['authenticated', 'vip'],\n          //     });\n          //   })\n          // )\n          .subscribe(\n            (profile) => {\n              const user = {\n                current_user: profile,\n              };\n              this.userState.refreshLocalUser(\n                Object.assign(this.userState.currentUser, user)\n              );\n              this.checkAccess();\n            },\n            (error) => {\n              console.log(error);\n            }\n          );\n      });\n  }\n\n  get articleConfig(): any {\n    return this.coreConfig.article;\n  }\n\n  get loginConfig(): any {\n    return this.articleConfig && this.articleConfig.login;\n  }\n\n  get fontSizeConfig(): any {\n    return this.articleConfig && this.articleConfig.fontSize;\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".article-body ::ng-deep {\n  img {\n    display: inline-block;\n    margin-bottom: 1rem;\n    max-width: 100%;\n    width: auto !important;\n    height: auto !important;\n  }\n}\n\n.article-meta {\n  font-size: 14px;\n  .mat-icon {\n    margin-right: 5px;\n  }\n}\n\n.shadow {\n  display: block;\n  width: 100%;\n  height: 80px;\n  position: absolute;\n  bottom: 0;\n}\n\n.auth {\n  cursor: pointer;\n}\n",
                    "styleUrl": "./article.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screen",
                        "type": "ScreenState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tagsService",
                        "type": "TagsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userState",
                        "type": "UserState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "contentState",
                        "type": "ContentState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "coreConfig",
                        "type": "ICoreConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 62,
                "jsdoctags": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screen",
                        "type": "ScreenState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tagsService",
                        "type": "TagsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userState",
                        "type": "UserState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "contentState",
                        "type": "ContentState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "coreConfig",
                        "type": "ICoreConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "NodeComponent",
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnDestroy"
            ],
            "accessors": {
                "articleConfig": {
                    "name": "articleConfig",
                    "getSignature": {
                        "name": "articleConfig",
                        "type": "any",
                        "returnType": "any",
                        "line": 231
                    }
                },
                "loginConfig": {
                    "name": "loginConfig",
                    "getSignature": {
                        "name": "loginConfig",
                        "type": "any",
                        "returnType": "any",
                        "line": 235
                    }
                },
                "fontSizeConfig": {
                    "name": "fontSizeConfig",
                    "getSignature": {
                        "name": "fontSizeConfig",
                        "type": "any",
                        "returnType": "any",
                        "line": 239
                    }
                }
            },
            "templateData": "<div class=\"article m-bottom\" *ngIf=\"content\">\n  <app-article-banner [content]=\"content.banner\" *ngIf=\"content.banner\"></app-article-banner>\n  <div class=\"container\">\n    <div class=\"article-inner m-top-sm\" fxLayout.lt-md=\"column\" fxLayout.gt-sm=\"row\">\n      <div class=\"article-node\" fxFlex.lt-md=\"100\" fxFlex.gt-sm=\"{{content.sidebar?'75':'100'}}\">\n        <h2 class=\"title\">\n          {{content.title}}\n        </h2>\n        <div class=\"article-meta m-y-xs\" fxLayoutAlign=\"space-between center\">\n          <app-article-meta [content]=\"content.meta\" *ngIf=\"content.meta\"></app-article-meta>\n          <app-font-change *ngIf=\"showNotXs && fontSizeConfig\" [content]=\"fontSizeConfig\" [form]=\"fontForm\">\n          </app-font-change>\n        </div>\n        <mat-divider></mat-divider>\n        <div class=\"article-body position-relative\">\n          <div *ngIf=\"canAccess;else canotAccess\" class=\"article-body m-y-sm\" [innerHTML]=\"content.body | safeHtml\"\n            [style.fontSize.px]=\"fontSize\">\n          </div>\n          <ng-template #canotAccess>\n            <div class=\"article-body m-y-sm position-relative\">\n              <div [innerHTML]=\"content.body |stripTags:'p'|trim|shorten:1000:'...'\" [style.fontSize.px]=\"fontSize\">\n              </div>\n              <div class=\"shadow\"></div>\n            </div>\n            <div *ngIf=\"!userState.authenticated\" class=\"auth line p-y-sm p-x-sm width-100 text-center\"\n              fxLayoutAlign=\"center center\">\n              <a href=\"javascript:void(0)\" (click)=\"openLogin()\" [innerHTML]=\"loginConfig?.label|safeHtml\"></a>\n            </div>\n            <div *ngIf=\"userState.authenticated\" class=\"pay line p-y-sm p-x-sm width-100 text-center m-bottom\"\n              fxLayoutAlign=\"center center\">\n              <div>\n                <ng-container *ngIf=\"!isReqRule\">\n                  成为<a (click)=\"upgrade()\" href=\"javascript:void(0)\">【会员】</a>\n                </ng-container>\n                <ng-container *ngIf=\"reqMoney\">\n                  或者<a (click)=\"pay()\" href=\"javascript:void\">【支付{{reqMoney}}元】</a>\n                </ng-container>\n                <ng-container *ngIf=\"isPayed\">\n                  您已支付【{{reqMoney}}元】！\n                </ng-container>\n                可查看全文\n              </div>\n            </div>\n          </ng-template>\n        </div>\n        <div class=\"article-bottom m-y\" *ngIf=\"content.bottom\">\n          <app-dynamic-widgets [content]=\"action\" *ngFor=\"let action of content.bottom\"></app-dynamic-widgets>\n        </div>\n        <div class=\"ations m-y\" *ngIf=\"content.actions\">\n          <app-dynamic-widgets [data]=\"content?.params\" [content]=\"action\" *ngFor=\"let action of content.actions\">\n          </app-dynamic-widgets>\n        </div>\n        <app-comment-form\n          *ngIf=\"userState.authenticated && coreConfig.article?.comment?.enable && content?.params?.comment\"\n          [content]=\"content\" [type]=\"'add'\">\n        </app-comment-form>\n        <app-comment-list *ngIf=\"userState.authenticated\" [comments]=\"comments\" [content]=\"content\">\n        </app-comment-list>\n      </div>\n      <app-sidebar [ngClass.gt-sm]=\"'m-left-sm'\" *ngIf=\"content.sidebar\" fxFlex.lt-md=\"100\" fxFlex.gt-sm=\"25\"\n        [content]=\"content.sidebar\"></app-sidebar>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "ArticleMetaComponent",
            "id": "component-ArticleMetaComponent-68fe8bffd265e0b4e0563fd063e6b0a4d8ccc486e01db59a3b9c8457f0a8ce6d00ffb7d329b6a12e86e0036b8d25d4d8778477940e07f264839497e3e7d3bf99",
            "file": "src/app/uiux/combs/node/article/article-meta/article-meta.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-article-meta",
            "styleUrls": [
                "./article-meta.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./article-meta.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-article-meta',\n  templateUrl: './article-meta.component.html',\n  styleUrls: ['./article-meta.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ArticleMetaComponent implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./article-meta.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div fxLayout=\"row wrap\" fxLayoutAlign=\"start start\" *ngIf=\"content\" fxLayoutGap=\"1rem\">\n  <div *ngFor=\"let item of content\" fxLayoutAlign=\"center center\">\n    <ng-container *ngIf=\"item.icon;else value\">\n      <mat-icon>{{item.icon}}</mat-icon>\n      <div>{{item.value}}</div>\n    </ng-container>\n    <ng-template #value>\n      <div class=\"label\">{{item.label}}:&nbsp;</div>\n      <div [innerHTML]=\"item.value|safeHtml\"></div>\n    </ng-template>\n  </div>\n</div>\n"
        },
        {
            "name": "BannerSimpleComponent",
            "id": "component-BannerSimpleComponent-2791ba606603ed01019490dae0efd51b4cf300ba6c2d23e8737e63e5b0f9c1738ce1d3d5dca7d98e5afd1b11537be8912955057cd7fa057f7ea82b5077dea74d",
            "file": "src/app/uiux/combs/banner/banner-simple/banner-simple.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-banner-simple",
            "styleUrls": [
                "./banner-simple.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./banner-simple.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getApiParams",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getDeepValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getFormParams",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Params",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getParams",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getParamsState",
                    "args": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getUrlQuery",
                    "args": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "handlerPager",
                    "args": [
                        {
                            "name": "pager",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pager",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "initFormValueWithUrlQuery",
                    "args": [
                        {
                            "name": "query",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "controls",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "controls",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "row",
                    "args": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "padding",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'4rem'"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "padding",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'4rem'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { BaseComponent } from '@uiux/base/base.widget';\n\n@Component({\n  selector: 'app-banner-simple',\n  templateUrl: './banner-simple.component.html',\n  styleUrls: ['./banner-simple.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerSimpleComponent extends BaseComponent implements OnInit {\n  @Input() content: any;\n  constructor() {\n    super();\n  }\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/theme/variable/breakpoint\";\n.banner-simple {\n  padding: 60px 0;\n  overflow: hidden;\n  z-index: 1;\n  app-bg {\n    z-index: 0;\n  }\n  .page-title {\n    margin: 0;\n    letter-spacing: 1px;\n    font-size: 20px;\n    font-weight: 500;\n  }\n  &.normal {\n    position: relative;\n    overflow: hidden;\n    width: 100%;\n  }\n  @media #{$gt-sm} {\n    .page-title {\n      font-size: 35px;\n    }\n    &.normal {\n      padding: 120px 0;\n    }\n    &.large {\n      padding: 200px;\n    }\n  }\n}\n",
                    "styleUrl": "./banner-simple.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "extends": "BaseComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"banner-simple position-relative\" [ngClass]=\"content.style\" *ngIf=\"content\">\n  <app-bg *ngIf=\"content.bannerBg\" [content]=\"content.bannerBg\">\n    <app-img [content]=\"content.bannerBg.img\"></app-img>\n  </app-bg>\n  <div class=\"container\">\n    <div class=\"banner-inner\" fxLayout.lt-md=\"column\" fxLayout.gt-sm=\"row\" fxLayoutAlign.gt-sm=\"space-between center\"\n      fxLayoutAlign.lt-md=\"start start\">\n      <h2 class=\"page-title\" *ngIf=\"content.title\">{{content.title}}</h2>\n      <app-breadcrumb [content]=\"content.breadcrumb\" *ngIf=\"content.breadcrumb\"></app-breadcrumb>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "BgComponent",
            "id": "component-BgComponent-447290e592b7f145bc6f57be3d7f4b333d4fc7659a246773d69613361fb2dc42551038b75009a2e070d93d43e2386f9dbe283e62393095b3b15e3b79cb10e2b8",
            "file": "src/app/uiux/widgets/bg/bg.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-bg",
            "styleUrls": [
                "./bg.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./bg.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "IBg",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { IBg } from '@core/interface/widgets/IBg';\n\n@Component({\n  selector: 'app-bg',\n  templateUrl: './bg.component.html',\n  styleUrls: ['./bg.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BgComponent implements OnInit {\n  @Input() content: IBg;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/theme/variable/breakpoint\";\n.bg-fill-width {\n  position: absolute;\n  left: 50%;\n  top: 0;\n  bottom: 0;\n  width: 100vw;\n  max-width: 100%;\n  transform: translateX(-50%);\n  z-index: -1;\n}\n\n.overlay {\n  &:before {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    opacity: 0;\n    z-index: 1;\n    content: \"\";\n  }\n  &.overlay-20 {\n    &:before {\n      opacity: 0.2;\n    }\n  }\n  &.overlay-40 {\n    &:before {\n      opacity: 0.4;\n    }\n  }\n  &.overlay-60 {\n    &:before {\n      opacity: 0.6;\n    }\n  }\n  &.overlay-80 {\n    &:before {\n      opacity: 0.8;\n    }\n  }\n}\n\n::ng-deep .wave-wrapper {\n  .wave {\n    width: 100%;\n    height: 200px;\n  }\n\n  @media #{$gt-sm} {\n    .wave {\n      height: 500px;\n    }\n  }\n}\n",
                    "styleUrl": "./bg.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [ngClass]=\"content.classes\" [ngStyle]=\"content.style || null\">\n  <ng-content></ng-content>\n</div>\n"
        },
        {
            "name": "BgImgComponent",
            "id": "component-BgImgComponent-60cd617aa741a2a3bcb8363988055e7ab92a349e64abf14ee14817ed4f865e77148899009f57a8aff6013bd2fc36bac6b80239bede66df437448eeb8d357373b",
            "file": "src/app/uiux/widgets/bg-img/bg-img.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-bg-img",
            "styleUrls": [
                "./bg-img.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./bg-img.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "IBgImg",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  Input,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { IBgImg } from '@core/interface/widgets/IBgImg';\n\n@Component({\n  selector: 'app-bg-img',\n  templateUrl: './bg-img.component.html',\n  styleUrls: ['./bg-img.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BgImgComponent implements OnInit {\n  @Input() content: IBgImg;\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  get img(): any {\n    const def = {\n      classes: 'object-fit',\n    };\n    return Object.assign({}, def, this.content.img);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./bg-img.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "img": {
                    "name": "img",
                    "getSignature": {
                        "name": "img",
                        "type": "any",
                        "returnType": "any",
                        "line": 21
                    }
                }
            },
            "templateData": "<app-bg [content]=\"content\" *ngIf=\"content\">\n  <app-img [content]=\"img\" *ngIf=\"content.img && content.img.src\"></app-img>\n</app-bg>\n"
        },
        {
            "name": "BlockComponent",
            "id": "component-BlockComponent-7dcb500dd2fd1c66ddf72ab663c3aae721bc16f45f07873de5570943b6ca2999abf895c4f4229707aeb1b38dd220a5ee46ece9711c24e07874a9084d6fdfcd2d",
            "file": "src/app/modules/page-render/block/block.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-block",
            "styleUrls": [
                "./block.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./block.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "appState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AppState",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { AppState } from '@core/mobx/AppState';\nimport { Router, NavigationEnd } from '@angular/router';\n\n@Component({\n  selector: 'app-block',\n  templateUrl: './block.component.html',\n  styleUrls: ['./block.component.scss'],\n})\nexport class BlockComponent implements OnInit {\n  content: any;\n  constructor(public appState: AppState, private router: Router) {}\n\n  ngOnInit(): void {\n    this.appState.setPageContent();\n    this.router.events.subscribe((event) => {\n      if (event instanceof NavigationEnd) {\n      }\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./block.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "appState",
                        "type": "AppState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "appState",
                        "type": "AppState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"appState.content\">\n  <ng-container *ngFor=\"let item of appState.content\">\n    <ng-container [ngSwitch]=\"item.type\">\n      <app-job *ngSwitchCase=\"'job'\" [content]=\"item\"></app-job>\n      <app-tab *ngSwitchCase=\"'tab'\" [content]=\"item\"></app-tab>\n      <app-case *ngSwitchCase=\"'case'\" [content]=\"item\"></app-case>\n      <app-text *ngSwitchCase=\"'text'\" [content]=\"item\"></app-text>\n      <app-panel *ngSwitchCase=\"'panel'\" [content]=\"item\"></app-panel>\n      <app-search *ngSwitchCase=\"'search'\" [content]=\"item\"></app-search>\n      <app-notfound *ngSwitchCase=\"'404'\" [content]=\"item\"></app-notfound>\n      <app-tab1v1 *ngSwitchCase=\"'tab-1v1'\" [content]=\"item\"></app-tab1v1>\n      <app-law-case *ngSwitchCase=\"'law-case'\" [content]=\"item\"></app-law-case>\n      <app-article *ngSwitchCase=\"'article'\" [content]=\"item\"></app-article>\n      <app-shuffle *ngSwitchCase=\"'shuffle'\" [content]=\"item\"></app-shuffle>\n      <app-packery *ngSwitchCase=\"'packery'\" [content]=\"item\"></app-packery>\n      <app-hero1v1 *ngSwitchCase=\"'hero-1v1'\" [content]=\"item\"></app-hero1v1>\n      <app-hero1v2 *ngSwitchCase=\"'hero-1v2'\" [content]=\"item\"></app-hero1v2>\n      <app-hero2v1 *ngSwitchCase=\"'hero-2v1'\" [content]=\"item\"></app-hero2v1>\n      <app-hero2v2 *ngSwitchCase=\"'hero-2v2'\" [content]=\"item\"></app-hero2v2>\n      <app-hero2v3 *ngSwitchCase=\"'hero-2v3'\" [content]=\"item\"></app-hero2v3>\n      <app-video-bg *ngSwitchCase=\"'video-bg'\" [content]=\"item\"></app-video-bg>\n      <app-question *ngSwitchCase=\"'question'\" [content]=\"item\"></app-question>\n      <app-location *ngSwitchCase=\"'location'\" [content]=\"item\"></app-location>\n      <app-view-list *ngSwitchCase=\"'view-list'\" [content]=\"item\"></app-view-list>\n      <app-tree-list *ngSwitchCase=\"'tree-list'\" [content]=\"item\"></app-tree-list>\n      <app-case-node *ngSwitchCase=\"'case-node'\" [content]=\"item\"></app-case-node>\n      <app-action1v1 *ngSwitchCase=\"'action-1v1'\" [content]=\"item\"></app-action1v1>\n      <app-profile1v1 *ngSwitchCase=\"'profile-1v1'\" [content]=\"item\"></app-profile1v1>\n      <app-map-list-v1 *ngSwitchCase=\"'map-list-v1'\" [content]=\"item\"></app-map-list-v1>\n      <app-whychooseus *ngSwitchCase=\"'whychooseus'\" [content]=\"item\"></app-whychooseus>\n      <app-full-calendar *ngSwitchCase=\"'full-calendar'\" [content]=\"item\"></app-full-calendar>\n      <app-showcase1v1 *ngSwitchCase=\"'showcase-1v1'\" [content]=\"item\"></app-showcase1v1>\n      <app-showcase1v3 *ngSwitchCase=\"'showcase-1v3'\" [content]=\"item\"></app-showcase1v3>\n      <app-showcase2v1 *ngSwitchCase=\"'showcase-2v1'\" [content]=\"item\"></app-showcase2v1>\n      <app-showcase2v2 *ngSwitchCase=\"'showcase-2v2'\" [content]=\"item\"></app-showcase2v2>\n      <app-showcase2v3 *ngSwitchCase=\"'showcase-2v3'\" [content]=\"item\"></app-showcase2v3>\n      <app-showcase2v4 *ngSwitchCase=\"'showcase-2v4'\" [content]=\"item\"></app-showcase2v4>\n      <app-showcase2v5 *ngSwitchCase=\"'showcase-2v5'\" [content]=\"item\"></app-showcase2v5>\n      <app-showcase2v6 *ngSwitchCase=\"'showcase-2v6'\" [content]=\"item\"></app-showcase2v6>\n      <app-showcase3v1 *ngSwitchCase=\"'showcase-3v1'\" [content]=\"item\"></app-showcase3v1>\n      <app-showcase3v2 *ngSwitchCase=\"'showcase-3v2'\" [content]=\"item\"></app-showcase3v2>\n      <app-showcase3v3 *ngSwitchCase=\"'showcase-3v3'\" [content]=\"item\"></app-showcase3v3>\n      <app-showcase3v4 *ngSwitchCase=\"'showcase-3v4'\" [content]=\"item\"></app-showcase3v4>\n      <app-showcase3v5 *ngSwitchCase=\"'showcase-3v5'\" [content]=\"item\"></app-showcase3v5>\n      <app-showcase3v6 *ngSwitchCase=\"'showcase-3v6'\" [content]=\"item\"></app-showcase3v6>\n      <app-showcase3v7 *ngSwitchCase=\"'showcase-3v7'\" [content]=\"item\"></app-showcase3v7>\n      <app-showcase3v8 *ngSwitchCase=\"'showcase-3v8'\" [content]=\"item\"></app-showcase3v8>\n      <app-showcase4v1 *ngSwitchCase=\"'showcase-4v1'\" [content]=\"item\"></app-showcase4v1>\n      <app-carousel1v1 *ngSwitchCase=\"'carousel-1v1'\" [content]=\"item\"></app-carousel1v1>\n      <app-carousel1v2 *ngSwitchCase=\"'carousel-1v2'\" [content]=\"item\"></app-carousel1v2>\n      <app-carousel1v3 *ngSwitchCase=\"'carousel-1v3'\" [content]=\"item\"></app-carousel1v3>\n      <app-carousel2v1 *ngSwitchCase=\"'carousel-2v1'\" [content]=\"item\"></app-carousel2v1>\n      <app-carousel2v2 *ngSwitchCase=\"'carousel-2v2'\" [content]=\"item\"></app-carousel2v2>\n      <app-dynamic-form *ngSwitchCase=\"'dynamic-form'\" [content]=\"item\"></app-dynamic-form>\n      <app-taxonomy-list *ngSwitchCase=\"'taxonomy-list'\" [content]=\"item\"></app-taxonomy-list>\n      <app-banner-simple *ngSwitchCase=\"'banner-simple'\" [content]=\"item\"></app-banner-simple>\n      <app-dynamic-card-list *ngSwitchCase=\"'dynamic-card-list'\" [content]=\"item\"></app-dynamic-card-list>\n      <app-dynamic-text-list *ngSwitchCase=\"'dynamic-text-list'\" [content]=\"item\"></app-dynamic-text-list>\n      <app-taxonomy-thin-list *ngSwitchCase=\"'taxonomy-thin-list'\" [content]=\"item\"></app-taxonomy-thin-list>\n      <app-dynamic-media-list *ngSwitchCase=\"'dynamic-media-list'\" [content]=\"item\"></app-dynamic-media-list>\n      <app-dynamic-card-list1v1 *ngSwitchCase=\"'dynamic-card-list-1v1'\" [content]=\"item\"></app-dynamic-card-list1v1>\n    </ng-container>\n  </ng-container>\n</ng-container>\n"
        },
        {
            "name": "BoxComponent",
            "id": "component-BoxComponent-003d19d564d685712612cd025c24c6c0de33447b5c7b224a5f39684917ff6025c7a8097780a17c2b05dd306915ce70af0dd1400014db3df5f5918c3f1979f029",
            "file": "src/app/uiux/widgets/box/box.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-box",
            "styleUrls": [
                "./box.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./box.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "IBox",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { IBox } from '@core/interface/widgets/IBox';\n\n@Component({\n  selector: 'app-box',\n  templateUrl: './box.component.html',\n  styleUrls: ['./box.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BoxComponent implements OnInit {\n  @Input() content: IBox;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/theme/mixins/amixin\";\n@import \"/src/theme/variable/breakpoint\";\n.inv-builder-box {\n  position: relative;\n  .box-icon {\n    text-align: center;\n    width: 88px;\n    height: 88px;\n    @include transform(0deg, 1, 0, 0);\n    @include transition(all, 0.3s, ease-out);\n    @include border-radius(4px, 4px, 4px, 4px);\n    ::ng-deep .mat-icon {\n      @include transition(all, 0.3s, ease-out);\n      font-size: 30px;\n      display: inline-block;\n      vertical-align: middle;\n    }\n  }\n  .box-title {\n    font-size: 17px;\n    font-weight: 500;\n    line-height: 1;\n    margin: 0 0 10px;\n  }\n  .box-content {\n    display: block;\n    padding-bottom: 40px;\n    font-size: 14px;\n  }\n\n  &.small-box {\n    .box-icon {\n      width: 50px;\n      height: 50px;\n    }\n    &.style-v7 {\n      .box-icon {\n        ::ng-deep .mat-icon {\n          font-size: 20px;\n          height: 36px;\n          width: 36px;\n          line-height: 36px;\n        }\n      }\n      ::ng-deep .box-image {\n        img {\n          max-width: 52px;\n          margin: 0px 25px 25px 0px;\n        }\n      }\n    }\n  }\n  &.medium-box {\n    .box-icon {\n      width: 70px;\n      height: 70px;\n    }\n  }\n\n  // Box square & circle\n  &.box-square,\n  &.box-circle {\n    .box-icon {\n      ::ng-deep .mat-icon,\n      img {\n        @include middle-center();\n        z-index: 1;\n      }\n    }\n    &.box-image {\n      .box-icon {\n        border: 0;\n      }\n    }\n  }\n\n  &.box-circle {\n    .box-icon {\n      @include border-radius(50%, 50%, 50%, 50%);\n    }\n  }\n  &.box-square {\n    .box-icon {\n      @include border-radius(3px, 3px, 3px, 3px);\n    }\n  }\n\n  &.box-center {\n    .box-icon {\n      margin: 0 auto;\n      margin-bottom: 35px;\n    }\n    .box-title {\n      position: relative;\n      text-align: center;\n      margin-top: 10px;\n    }\n    .box-content {\n      text-align: center;\n      margin-top: 25px;\n    }\n    &.text-left {\n      .box-icon {\n        margin: 0;\n      }\n      .box-title {\n        text-align: left;\n        &:after {\n          left: 0;\n          margin-left: 0;\n        }\n      }\n      .box-content {\n        text-align: left;\n      }\n    }\n    &.text-right {\n      .box-icon {\n        margin: 0 100%;\n      }\n      .box-title {\n        text-align: right;\n        &:after {\n          left: auto;\n          right: 0;\n          margin-left: 0;\n        }\n      }\n    }\n  }\n\n  &.style-v1,\n  &.style-v2 {\n    position: relative;\n    z-index: 1;\n    text-align: center;\n    .box-icon {\n      position: absolute;\n      left: 50%;\n      top: -34px;\n      border: 0;\n      z-index: 100;\n      @include translateX(-50%);\n      ::ng-deep .mat-icon {\n        height: 60px;\n        line-height: 60px;\n        width: 60px;\n      }\n    }\n    .box-content-wrapper {\n      @include border-radius(3px, 3px, 3px, 3px);\n      padding: 55px 15px 45px;\n      position: relative;\n      &:before {\n        content: \"\";\n        display: block;\n        height: 80px;\n        position: absolute;\n        top: -37px;\n        width: 80px;\n        z-index: -1;\n        left: 50%;\n        @include translateX(-50%);\n      }\n      .box-content {\n        padding-bottom: 0;\n      }\n    }\n  }\n\n  &.circle-readmore,\n  &.style-v1,\n  &.style-v2,\n  &.style-v3,\n  &.style-v4,\n  &.style-v5 {\n    text-align: center;\n    .box-icon {\n      margin: 0 auto;\n      margin-bottom: 35px;\n      ::ng-deep .mat-icon {\n        position: absolute;\n        left: 50%;\n        @include middle-center();\n        z-index: 1;\n      }\n    }\n    .read-more {\n      bottom: -17px;\n      color: transparent;\n      display: block;\n      font-size: 0;\n      height: 35px;\n      position: absolute;\n      width: 35px;\n      left: 50%;\n      box-sizing: border-box;\n      @include translateX(-50%);\n      @include border-radius(100%, 100%, 100%, 100%);\n      span {\n        display: block;\n        height: 11px;\n        left: 16px;\n        position: absolute;\n        top: 11px;\n        width: 1px;\n        &:after {\n          content: \"\";\n          display: block;\n          height: 1px;\n          left: -5px;\n          position: absolute;\n          top: 5px;\n          width: 11px;\n        }\n      }\n      &:hover {\n        cursor: pointer;\n      }\n    }\n    .box-content-wrapper {\n      .box-title {\n        text-align: center;\n        margin-top: 10px;\n      }\n    }\n  }\n  &.style-v6 {\n    .box-icon {\n      margin: 0 auto;\n      margin-bottom: 35px;\n      ::ng-deep .mat-icon {\n        position: absolute;\n        left: 50%;\n        width: 30px;\n        height: 30px;\n        @include middle-center();\n        z-index: 1;\n      }\n    }\n  }\n  &.style-v1 {\n    .box-icon {\n      width: 78px;\n      height: 78px;\n      ::ng-deep .mat-icon {\n        @include border-radius(3px, 3px, 3px, 3px);\n        @include middle-center();\n      }\n    }\n    .box-content-wrapper {\n      &:before {\n        @include border-radius(5px, 5px, 5px, 5px);\n      }\n      .box-title {\n        text-align: center;\n        margin-top: 10px;\n      }\n      .box-content {\n        margin-top: 25px;\n      }\n    }\n    &:hover {\n      .box-icon {\n        @include translateXAndRotate(-50%, 45deg);\n      }\n      .box-content-wrapper {\n        &:before {\n          @include translateXAndRotate(-50%, 45deg);\n        }\n      }\n    }\n  }\n\n  &.style-v2 {\n    .box-icon {\n      top: -40px;\n      @include border-radius(100%, 100%, 100%, 100%);\n      ::ng-deep .mat-icon,\n      img {\n        height: 70px;\n        line-height: 70px;\n        width: 70px;\n        @include border-radius(100%, 100%, 100%, 100%);\n        @include middle-center();\n        z-index: 1;\n      }\n    }\n    .box-content-wrapper {\n      &:before {\n        height: 90px;\n        top: -42px;\n        width: 90px;\n        @include border-radius(100%, 100%, 100%, 100%);\n      }\n      .box-title {\n        text-align: center;\n        margin-top: 10px;\n      }\n    }\n    &:hover {\n      .box-icon {\n        ::ng-deep .mat-icon {\n          width: 88px;\n          height: 88px;\n        }\n      }\n    }\n  }\n\n  &.style-v3,\n  &.style-v6 {\n    .box-icon {\n      @include border-radius(50%, 50%, 50%, 50%);\n\n      ::ng-deep .mat-icon {\n        width: 30px;\n        height: 30px;\n      }\n      &:before {\n        content: \"\";\n        display: block;\n        margin: 0 auto;\n        height: 100%;\n        left: 50%;\n        top: 50%;\n        position: absolute;\n        width: 100%;\n        z-index: 1;\n        opacity: 0;\n        @include translateAndScale(-50%, -50%, 1.2);\n        @include border-radius(100%, 100%, 100%, 100%);\n        transition: all 0.4s ease;\n      }\n    }\n    .box-image {\n      margin-bottom: 35px;\n    }\n    &:hover {\n      .box-icon {\n        &:before {\n          @include translateAndScale(-50%, -50%, 1);\n          @include transition(all, 0.4, ease);\n          opacity: 1;\n        }\n      }\n    }\n  }\n\n  &.style-v3 {\n    &.use-image {\n      ::ng-deep img {\n        width: 10rem;\n        height: 10rem;\n      }\n    }\n  }\n\n  &.style-v4,\n  &.style-v7 {\n    .box-icon {\n      @include border-radius(100%, 100%, 100%, 100%);\n      ::ng-deep .mat-icon,\n      img {\n        @include middle-center();\n        z-index: 1;\n        height: 74px;\n        line-height: 70px;\n        width: 74px;\n        &:after {\n          content: \"\";\n          display: block;\n          height: 100%;\n          left: 50%;\n          position: absolute;\n          top: 50%;\n          width: 100%;\n          z-index: -1;\n          @include translateAndScale(-50%, -50%, 1);\n          transition: all 0.4s ease;\n          @include border-radius(100%, 100%, 100%, 100%);\n        }\n      }\n    }\n    &:hover {\n      .box-icon {\n        ::ng-deep .mat-icon {\n          &:after {\n            opacity: 0;\n            @include translateAndScale(-50%, -50%, 0);\n          }\n        }\n      }\n    }\n  }\n  &.style-v6,\n  &.style-v7 {\n    .box-icon {\n      margin-bottom: 25px;\n      margin-left: auto;\n      margin-right: auto;\n    }\n    .box-content-wrapper {\n      text-align: center;\n      &:after {\n        content: \"\";\n        display: table;\n        clear: both;\n      }\n    }\n    @media #{$gt-sm} {\n      display: flex;\n      align-items: flex-start;\n      .box-icon {\n        margin: 0px 25px 25px 0px;\n        flex: 0 0 auto;\n      }\n      .box-content-wrapper {\n        text-align: left;\n      }\n    }\n  }\n\n  &.style-v5 {\n    .box-icon {\n      @include border-radius(3px, 3px, 3px, 3px);\n    }\n    &.box-left {\n      .box-content-wrapper {\n        margin-left: 75px;\n      }\n    }\n    &.box-right {\n      .box-content-wrapper {\n        margin-right: 75px;\n      }\n    }\n  }\n\n  &.style-v6,\n  &.style-v7,\n  &.style-v9 {\n    .box-content {\n      padding-bottom: 0;\n    }\n    .read-more {\n      a {\n        display: inline-block;\n        font-size: 14px;\n        margin-top: 14px;\n        position: relative;\n        padding-left: 14px;\n        span {\n          &:before,\n          &:after {\n            content: \"\";\n            display: block;\n            height: 6px;\n            left: 0;\n            position: absolute;\n            top: 7px;\n            @include transform-rotate(45deg);\n            width: 2px;\n          }\n          &:after {\n            @include transform-rotate(-45deg);\n            top: 10px;\n          }\n        }\n      }\n    }\n  }\n\n  &.style-v8,\n  &.style-v10 {\n    display: flex;\n    padding-bottom: 20px;\n    .box-icon {\n      flex: 0 0 auto;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      width: 45px;\n      height: 45px;\n      border-radius: 50%;\n      margin-right: 1rem;\n      margin-bottom: 1rem;\n      ::ng-deep {\n        ::ng-deep .mat-icon {\n          font-size: 24px;\n        }\n      }\n    }\n    .box-content {\n      padding-bottom: 0;\n    }\n  }\n\n  &.style-v10 {\n    @media #{$gt-sm} {\n      text-align: right;\n      .box-icon {\n        margin-left: 1rem;\n        order: 2;\n      }\n    }\n  }\n\n  // feature absolute\n  &.style-v9 {\n    border-radius: 10px;\n    text-align: center;\n    padding: 1.5rem;\n    transition: all 0.5s ease;\n    .box-icon {\n      height: 80px;\n      margin: 0 auto;\n      border-radius: 6px;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      ::ng-deep .mat-icon {\n        font-size: 24px;\n      }\n    }\n    .box-content-wrapper {\n      margin-top: 2rem;\n    }\n  }\n}\n",
                    "styleUrl": "./box.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"content\" [ngClass]=\"content.style\" class=\"inv-builder-box m-bottom-sm\">\n  <div *ngIf=\"content.icon\" class=\"box-icon\">\n    <app-icon [content]=\"content.icon\"></app-icon>\n  </div>\n  <div *ngIf=\"content.img\" class=\"box-image\">\n    <app-img [content]=\"content.img\"></app-img>\n  </div>\n  <div class=\"box-content-wrapper\">\n    <h3 class=\"box-title one-line\" *ngIf=\"content.title.label\">\n      <app-link [content]=\"content.title\"></app-link>\n    </h3>\n    <div *ngIf=\"content.content\" class=\"box-content\" [innerHTML]=\"content.content | safeHtml\">\n    </div>\n    <div class=\"read-more\" *ngIf=\"content.more\">\n      <a href=\"{{content.more.href}}\"><span>{{content.more.label}}</span></a>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "BreadcrumbComponent",
            "id": "component-BreadcrumbComponent-9ac14f72799c947e0d49a1c0e1b4a485cc6bb46fc4ccc01d89608876a7e8e95e5434b14bf1457b2d76013dd14118906e88910aec2a7ee0bc798d286378ab7183",
            "file": "src/app/uiux/widgets/breadcrumb/breadcrumb.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-breadcrumb",
            "styleUrls": [
                "./breadcrumb.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./breadcrumb.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "ILink[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { ILink } from '@core/interface/widgets/ILink';\n\n@Component({\n  selector: 'app-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  styleUrls: ['./breadcrumb.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  @Input() content: ILink[];\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".breadcrumb {\n  ul,\n  li {\n    padding: 0;\n    margin: 0;\n    list-style: none;\n  }\n  ul {\n    li {\n      ::ng-deep a {\n        margin: 0 2px;\n      }\n      &:before {\n        content: \">\";\n      }\n      &:first-child {\n        &:before {\n          content: \"\";\n        }\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./breadcrumb.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"breadcrumb\" *ngIf=\"content\">\n  <ul fxLayout=\"row\">\n    <li *ngFor=\"let link of content\">\n      <app-link [content]=\"link\"></app-link>\n    </li>\n  </ul>\n</div>\n"
        },
        {
            "name": "BtnAnimateComponent",
            "id": "component-BtnAnimateComponent-cece63e4b2eb0fc246418a770f25f0ac797bc5cac4227aac2a1fb1c1270c13d5bec6cb2de020b0cc1ba85221b1fb030d0bc0a7cd20d46bd427f58859fe73c5cd",
            "file": "src/app/uiux/widgets/btn-animate/btn-animate.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-btn-animate",
            "styleUrls": [
                "./btn-animate.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./btn-animate.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "IBtnAnimate",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { IBtnAnimate } from '@core/interface/widgets/IBtnAnimate';\n\n@Component({\n  selector: 'app-btn-animate',\n  templateUrl: './btn-animate.component.html',\n  styleUrls: ['./btn-animate.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BtnAnimateComponent implements OnInit {\n  @Input() content: IBtnAnimate;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/theme/mixins/amixin\";\n.btn-animate {\n  border: 0 none;\n  padding: 10px 15px;\n  &.btn-large {\n    padding: 15px 22px;\n  }\n  &.btn-small {\n    padding: 7px 10px;\n  }\n\n  &.btn-white {\n    background: #fff;\n    border: 1px solid #e4e4e4;\n    color: #999;\n    &.no-border {\n      border: 0 none;\n    }\n  }\n  .mat-icon {\n    height: 100%;\n  }\n  &.style-v1,\n  &.style-v2 {\n    @include transition(all, 0.3s, ease);\n    border: 0 none;\n    padding: 0;\n    display: inline-block;\n    font-size: 13px;\n    vertical-align: top;\n    overflow: hidden;\n\n    & > span {\n      display: block;\n      overflow: hidden;\n      position: relative;\n      padding-right: 45px;\n      & > span {\n        display: inline-block;\n        left: 46px;\n        padding: 13px 15px 14px;\n        position: relative;\n        white-space: nowrap;\n        @include transition(all, 0.3s, ease);\n      }\n    }\n    .mat-icon.in_left,\n    .mat-icon.in_right {\n      font-size: 16px;\n      position: absolute;\n      text-align: center;\n      top: 0;\n      width: 45px;\n      line-height: 46px;\n      @include transition(all, 0.3s, ease);\n    }\n    .mat-icon.in_left {\n      padding-left: 2px;\n      left: 0px;\n    }\n    .mat-icon.in_right {\n      padding-right: 2px;\n      right: -45px;\n      opacity: 0;\n    }\n    &:hover {\n      color: #fff;\n      & > span {\n        & > span {\n          left: -1px;\n        }\n      }\n      .mat-icon.in_left {\n        left: -45px;\n        opacity: 0;\n      }\n      .mat-icon.in_right {\n        right: 0;\n        opacity: 1;\n      }\n    }\n    &.btn-white {\n      border: 1px solid #e4e4e4;\n      &.no-border {\n        border: 0 none;\n      }\n      color: #888;\n      .mat-icon.in_left,\n      .mat-icon.in_right {\n        color: #1ccdca;\n      }\n      & > span {\n        & > span {\n          border-left: 1px solid #e4e4e4;\n          border-right: 1px solid #e4e4e4;\n        }\n      }\n    }\n  }\n  &.style-v2 {\n    @include border-radius(25px, 25px, 25px, 25px);\n    &.no-border {\n      border: 0 none;\n    }\n    .mat-icon.in_left,\n    .mat-icon.in_right {\n      @include border-radius(50%, 50%, 50%, 50%);\n    }\n    &.btn-white {\n      & > span {\n        & > span {\n          border-left: unset;\n          border-right: unset;\n        }\n      }\n      .mat-icon.in_left,\n      .mat-icon.in_right {\n        @include border-radius(50%, 50%, 50%, 50%);\n        border: solid 1px #e4e4e4;\n        border-top: 0;\n      }\n      .mat-icon.in_left {\n        border-left: 0;\n      }\n      .mat-icon.in_right {\n        border-right: 0;\n      }\n    }\n  }\n}\n\n.btn-animate.style-v1:not(.btn-white) .mat-icon.in_left,\n.btn-animate.style-v1:not(.btn-white) .mat-icon.in_right,\n.btn-animate.style-v2:not(.btn-white) .mat-icon.in_left,\n.btn-animate.style-v2:not(.btn-white) .mat-icon.in_right {\n  background: rgba(0, 0, 0, 0.1);\n}\n.btn-animate.style-v1.btn-white .mat-icon.in_left,\n.btn-animate.style-v1.btn-white .mat-icon.in_right,\n.btn-animate.style-v2.btn-white .mat-icon.in_left,\n.btn-animate.style-v2.btn-white .mat-icon.in_right {\n  background: unset;\n}\n.btn {\n  @include border-radius(3px, 3px, 3px, 3px);\n  &.white_btn {\n    border: 0 none;\n    background: #fff;\n  }\n  &.no-border {\n    border: 0 none;\n  }\n  &.text-color {\n    color: #1ccdca;\n  }\n}\n",
                    "styleUrl": "./btn-animate.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"content\">\n  <a class=\"btn-animate btn color2 btn-small icon-left btn-inline\" [ngClass]=\"content.style\" target=\"0\"\n    href=\"{{content.href}}\">\n    <span>\n      <mat-icon class=\"in_left ico-dashboard2\">{{content.icon}}</mat-icon>\n      <span class=\"bold\">{{content.label}}</span>\n      <mat-icon class=\"in_right ico-dashboard2\">{{content.icon}}</mat-icon>\n    </span>\n  </a>\n</ng-container>\n"
        },
        {
            "name": "BtnComponent",
            "id": "component-BtnComponent-410c4a7de5a95fe00d395e2213c8ee6d8fd702c739b9771b0c281b87ea9c5aa53bdc102da019c536d66e6323851ad3092b5ce1f67e716c7220ec677aa5f855e0",
            "file": "src/app/uiux/widgets/btn/btn.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-btn",
            "styleUrls": [
                "./btn.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./btn.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-btn',\n  templateUrl: './btn.component.html',\n  styleUrls: ['./btn.component.scss'],\n})\nexport class BtnComponent implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host ::ng-deep .mat-icon-inline {\n  width: 24px;\n}\n\n.round-btn {\n  border-radius: 2rem;\n  padding-left: 3rem;\n  padding-right: 3rem;\n}\n",
                    "styleUrl": "./btn.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"content\">\n  <ng-container [ngSwitch]=\"content.mode\">\n    <ng-container *ngSwitchCase=\"'raised'\">\n      <button [class]=\"content.classes\" mat-raised-button *ngIf=\"!content.href;else link\" [color]=\"content.color\">\n        <app-icon *ngIf=\"content.icon\" [content]=\"content.icon\"></app-icon>\n        <span [innerHTML]=\"content.label\"></span>\n      </button>\n      <ng-template #link>\n        <a [class]=\"content.classes\" mat-raised-button [href]=\"content.href\" [target]=\"content?.target || ''\">\n          <app-icon *ngIf=\"content.icon\" [content]=\"content.icon\"></app-icon>\n          <span [innerHTML]=\"content.label\"></span>\n        </a>\n      </ng-template>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'stroked'\">\n      <button [class]=\"content.classes\" mat-stroked-button *ngIf=\"!content.href;else link\" [color]=\"content.color\">\n        <app-icon *ngIf=\"content.icon\" [content]=\"content.icon\"></app-icon>\n        <span [innerHTML]=\"content.label\"></span>\n      </button>\n      <ng-template #link>\n        <a [class]=\"content.classes\" mat-stroked-button [href]=\"content.href\" [target]=\"content.target\"\n          [innerHTML]=\"content.label\">\n          <app-icon *ngIf=\"content.icon\" [content]=\"content.icon\"></app-icon>\n          <span [innerHTML]=\"content.label\"></span>\n        </a>\n      </ng-template>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'flat'\">\n      <button [class]=\"content.classes\" mat-flat-button *ngIf=\"!content.href;else link\"\n        [color]=\"content.color\">{{content.label}}</button>\n      <ng-template #link>\n        <a [class]=\"content.classes\" mat-flat-button [href]=\"content.href\" [target]=\"content.target\"\n          [innerHTML]=\"content.label\"></a>\n      </ng-template>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'icon'\">\n      <button [class]=\"content.classes\" mat-icon-button [color]=\"content.color\">\n        <app-icon [content]=\"content.icon\"></app-icon>\n      </button>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'fab'\">\n      <button [class]=\"content.classes\" mat-fab [color]=\"content.color\">\n        <app-icon [content]=\"content.icon\"></app-icon>\n      </button>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'mini-fab'\">\n      <button [class]=\"content.classes\" mat-mini-fab [color]=\"content.color\">\n        <app-icon [content]=\"content.icon\"></app-icon>\n      </button>\n    </ng-container>\n    <ng-container *ngSwitchDefault>\n      <button [class]=\"content.classes\" mat-button *ngIf=\"!content.href;else link\" [color]=\"content.color\">\n        <app-icon *ngIf=\"content.icon\" [content]=\"content.icon\"></app-icon>\n        <span [innerHTML]=\"content.label\"></span>\n      </button>\n      <ng-template #link>\n        <a [class]=\"content.classes\" mat-button [href]=\"content.href\" [target]=\"content.target\">\n          <app-icon *ngIf=\"content.icon\" [content]=\"content.icon\"></app-icon>\n          <span [innerHTML]=\"content.label\"></span>\n        </a>\n      </ng-template>\n    </ng-container>\n  </ng-container>\n</ng-container>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-4ef205c97a334c309aa4001c8ab4a6d9571dcae18d0e85aaf0d367467ab5d3a9f13ab3573726f1fcb409bc9b49894dadfb80b1bbe1b6ba7041455ad9d4922004",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "CalendarComponent",
            "id": "component-CalendarComponent-56f1022ca332d1862a8f41eacc69904d4e1fc692b9028797e68b7bbedc76b4a9133fd73ff05571d3c9603ab814cbcf6a3d7f241fb1cb1d711d651fd1ed917785",
            "file": "src/app/uiux/widgets/date/calendar/calendar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-calendar",
            "styleUrls": [
                "./calendar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./calendar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "CalendarOptions",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "eventGuid",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { CalendarOptions } from '@fullcalendar/angular';\n\n@Component({\n  selector: 'app-calendar',\n  templateUrl: './calendar.component.html',\n  styleUrls: ['./calendar.component.scss'],\n})\nexport class CalendarComponent implements OnInit {\n  @Input() content: any;\n  @Input() options: CalendarOptions;\n  @Input() loading: boolean;\n  eventGuid = 0;\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".calendar {\n  ::ng-deep {\n    .fc {\n      .fc-h-event {\n        padding: 0 6px;\n      }\n      .fc-daygrid-event {\n        padding: 2px;\n      }\n      .fc-daygrid-event-dot {\n        display: none;\n      }\n    }\n  }\n  .loading-inner {\n    position: absolute;\n    top: 0;\n    left: 0;\n  }\n}\n",
                    "styleUrl": "./calendar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"calendar position-relative\">\n  <div class=\"loading-inner\" fxFlexFill fxLayoutAlign=\"center center\" *ngIf=\"loading\">\n    <mat-spinner diameter=\"50\" color=\"accent\"></mat-spinner>\n  </div>\n  <full-calendar #calendar [options]=\"options\"></full-calendar>\n</div>\n"
        },
        {
            "name": "Card1v1Component",
            "id": "component-Card1v1Component-a3ff2b4dd0a753d51a37c7b441ab968ce091e84934017e3c843578328c265a30a92e2756676af0bce1fa1174bd28a1f27e575cbf510a47d14093777697d12104",
            "file": "src/app/uiux/widgets/card/card1v1/card1v1.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card1v1",
            "styleUrls": [
                "./card1v1.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card1v1.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-card1v1',\n  templateUrl: './card1v1.component.html',\n  styleUrls: ['./card1v1.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class Card1v1Component implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".card-1-v1 {\n  overflow: hidden;\n  border-radius: 6px;\n  transition: all 0.3s ease;\n  &:hover {\n    transform: translateY(-10px);\n    .overlay {\n      opacity: 0.4;\n    }\n    .author {\n      opacity: 1;\n    }\n  }\n\n  .author {\n    position: absolute;\n    z-index: 1;\n    opacity: 0;\n    transition: all 0.5s ease;\n    top: 5%;\n    left: 5%;\n  }\n}\n",
                    "styleUrl": "./card1v1.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"card-1-v1\">\n  <app-feature-box [content]=\"content.feature\"></app-feature-box>\n  <div class=\"card-body p-y-sm p-x-sm\">\n    <div class=\"title mat-h2\">\n      <app-link [content]=\"content.link\"></app-link>\n    </div>\n    <div class=\"post-meta\" fxLayoutAlign=\"space-between center\">\n      <a href=\"{{content.link.href}}\" class=\"text-muted readmore\">{{content.moreLabel}}\n        <mat-icon inline=\"true\">navigate_next</mat-icon>\n      </a>\n    </div>\n  </div>\n  <div class=\"author\" fxLayout=\"column\">\n    <small class=\"user\">\n      <mat-icon inline=\"true\">person</mat-icon> {{content.user}}\n    </small>\n    <small class=\"date\">\n      <mat-icon inline=\"true\">event</mat-icon> {{content.time}}\n    </small>\n  </div>\n</div>\n"
        },
        {
            "name": "Card1v2Component",
            "id": "component-Card1v2Component-5b4fe850c215b30bcaca9fb586f0496314af056bd9e03853549a07c66436bd6699ba1593f5ffdad54b06588ec5af921322100e62312c7ba181cf449eb5ced03e",
            "file": "src/app/uiux/widgets/card/card1v2/card1v2.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card1v2",
            "styleUrls": [
                "./card1v2.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card1v2.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-card1v2',\n  templateUrl: './card1v2.component.html',\n  styleUrls: ['./card1v2.component.scss'],\n})\nexport class Card1v2Component implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../../theme/mixins/amixin\";\n@import \"../../../../../theme/variable/breakpoint\";\n\n.card-content {\n  position: relative;\n  z-index: 10;\n  .media {\n    box-shadow: 0 3px 4px 0 rgb(0 0 0 / 50%);\n    overflow: hidden;\n    top: -20px;\n\n    ::ng-deep {\n      img {\n        transform: scale(1);\n        transition: transform 0.25s ease-in-out;\n      }\n    }\n  }\n  &:hover {\n    .media {\n      ::ng-deep {\n        img {\n          transform: scale(1.05);\n        }\n      }\n    }\n  }\n  .title {\n    font-size: 20px;\n    line-height: 1.5;\n    ::ng-deep a {\n      @include line-clamp(2);\n      &:hover {\n        text-decoration: underline;\n      }\n    }\n  }\n}\n\n@media #{$gt-sm} {\n  .card-1-v2 {\n    height: calc(100% - 54px);\n    .card-content {\n      .media {\n        top: -54px;\n      }\n      .title {\n        font-size: 36px;\n        line-height: 45px;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./card1v2.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"card-1-v2 position-relative\" ngClass.lt-md=\"p-bottom p-x\" ngClass.gt-sm=\"p-bottom-lg p-x-lg\"\n  *ngIf=\"content\">\n  <app-bg-img [content]=\"content.bg\"></app-bg-img>\n  <div class=\"card-content\">\n    <app-img class=\"media\" [content]=\"content.img\" *ngIf=\"content.img\"></app-img>\n    <div class=\"card-bottom\">\n      <p [innerHTML]=\"content.subTitle|safeHtml\" *ngIf=\"content.subTitle\"></p>\n      <app-link class=\"title\" [content]=\"content.link\" *ngIf=\"content.link\"></app-link>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "Card1v3Component",
            "id": "component-Card1v3Component-001b1c1443fbfd5dc9f2c9fd16ee024030ff0e4524b75362f6bac7c93c321d8bfebefe19c1eda10d35e921d00b5860bdb6117a1ebfe1689032eeac9d52b9f20a",
            "file": "src/app/uiux/widgets/card/card1v3/card1v3.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card1v3",
            "styleUrls": [
                "./card1v3.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card1v3.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selected",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "selectedId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openDialog",
                    "args": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, EventEmitter, Output } from '@angular/core';\nimport { IMark } from '@core/interface/IAmap';\nimport { MatDialog } from '@angular/material/dialog';\nimport { DialogComponent } from '@uiux/widgets/dialog/dialog.component';\nimport { LoopWidgetsComponent } from '@uiux/widgets/loop-widgets/loop-widgets.component';\n\n@Component({\n  selector: 'app-card1v3',\n  templateUrl: './card1v3.component.html',\n  styleUrls: ['./card1v3.component.scss'],\n})\nexport class Card1v3Component implements OnInit {\n  @Input() content: any;\n  @Output() selected = new EventEmitter();\n  selectedId: number;\n  constructor(private dialog: MatDialog) {}\n\n  ngOnInit(): void {}\n\n  onClick(item: any, i: number): void {\n    this.selectedId = i;\n    if (item.dialog) {\n      this.openDialog(item.dialog);\n      return;\n    }\n    this.selected.emit({ item, index: i } as IMark);\n  }\n\n  openDialog(content: any): void {\n    this.dialog.open(DialogComponent, {\n      width: '800px',\n      data: {\n        renderInputComponent: LoopWidgetsComponent,\n        inputData: {\n          content,\n        },\n      },\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/theme/variable/variable\";\n@import \"/src/theme//mixins/amixin\";\n.card-1-v3 {\n  .viewport {\n    // default height, can custom parent\n    height: 500px;\n    overflow: auto;\n  }\n  .item {\n    border-radius: 10px;\n    cursor: pointer;\n    margin-bottom: 2rem;\n    .title {\n      font-size: 1.6rem;\n    }\n    .label {\n      word-break: keep-all;\n    }\n    .right {\n      word-break: break-all;\n    }\n\n    @media #{$xs} {\n      padding: 1rem !important;\n\n      .title {\n        margin-bottom: 1rem;\n        font-size: 1.4rem;\n      }\n    }\n    &.selected {\n      &:after,\n      &:before {\n        content: \"\";\n        position: absolute;\n        width: 4px;\n        height: 50%;\n        top: 0;\n        transform: translateY(50%);\n      }\n\n      &:after {\n        left: 0;\n        border-top-right-radius: 4px;\n        border-bottom-right-radius: 4px;\n      }\n\n      &:before {\n        left: auto;\n        right: 0;\n        border-top-left-radius: 4px;\n        border-bottom-left-radius: 4px;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./card1v3.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"card-1-v3\">\n  <cdk-virtual-scroll-viewport [itemSize]=\"5\" class=\"viewport\" *ngIf=\"content\">\n    <div class=\"list item m-y-sm p-y-xs m-x-xs p-x-xs\" [class.selected]=\"i == selectedId\" matRipple\n      [matRippleColor]=\"'rgba(0, 0, 0, 0.04)'\" *cdkVirtualFor=\"let item of content.elements; index as i\"\n      fxLayout=\"column\" (click)=\"onClick(item, i)\">\n      <h3 class=\"m-bottom-xs bold\">{{item.title}}</h3>\n      <div class=\"address\" *ngIf=\"item.address\">{{item.address}}</div>\n      <div class=\"meta\">\n        <div class=\"li\" *ngFor=\"let meta of item.meta\" fxLayoutAlign=\"start start\">\n          <app-icon *ngIf=\"meta.icon\" [content]=\"meta.icon\"></app-icon>\n          <span class=\"label bold m-right-xs\">{{meta.label}}:</span>\n          <span>{{meta.value}}</span>\n        </div>\n      </div>\n    </div>\n  </cdk-virtual-scroll-viewport>\n</div>\n"
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-21dfe876d34e47725a602e4be244afa85f93d9a89957d996df845da6c1a54faf014f255c70f708d95adb2ec64da2c4c53c4d579085a8a7c736d8efb9c6f24ddf",
            "file": "src/app/uiux/widgets/card/card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card",
            "styleUrls": [
                "./card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "ICard",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { ICard } from '../IWidgets';\n@Component({\n  selector: 'app-card',\n  templateUrl: './card.component.html',\n  styleUrls: ['./card.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CardComponent implements OnInit {\n  @Input() content: ICard;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/theme/mixins/amixin\";\n.card-body {\n  min-height: 4rem;\n  @include line-clamp(2);\n}\n.mat-card-title {\n  @include line-clamp(1);\n}\n.card-header {\n  position: relative;\n  margin-top: -16px !important;\n\n  ::ng-deep {\n    .swiper-container,\n    .feature-inner {\n      border-top-left-radius: inherit;\n      border-top-right-radius: inherit;\n      width: calc(100% + 32px);\n      margin: 0 -16px 16px -16px;\n    }\n    .swiper-container {\n      .feature-inner {\n        width: 100%;\n        margin: 0;\n      }\n    }\n    .swiper-container {\n      .mat-card-image {\n        margin: 0 0 16px 0px;\n      }\n    }\n  }\n  .overlay-details {\n    position: absolute;\n    z-index: 99;\n    width: 100%;\n    text-align: center;\n    @include middle-center();\n    ::ng-deep a {\n      opacity: 0;\n      @include transform(20deg, 0, 0, 0);\n      display: inline-block;\n      position: relative;\n      z-index: 1;\n      font-size: 13px;\n      padding: 9px 13px;\n      margin-right: 10px;\n      @include transition(all, 0.4s, ease);\n    }\n  }\n  &:hover {\n    .overlay-details {\n      ::ng-deep a {\n        @include transform(0deg, 1, 0, 0);\n        opacity: 1;\n        @include transition(all, 0.4s, ease);\n      }\n    }\n  }\n}\n\n.mat-card-subtitle,\n.card-body {\n  font-size: 14px;\n  word-break: break-word;\n}\n\n.mat-card-content {\n  ::ng-deep {\n    .mat-card-avatar {\n      img {\n        width: auto;\n        height: 100%;\n      }\n    }\n    .mat-card-title {\n      font-size: 16px;\n      font-weight: bold;\n    }\n  }\n}\n\n// style\n.card {\n  &.card-no-shadow {\n    box-shadow: none;\n    background-color: transparent;\n  }\n  ::ng-deep .meta {\n    font-size: small;\n    .item {\n      margin-bottom: 2px;\n      .inline-lightbox {\n        a {\n          display: block;\n          @include line-clamp();\n          padding-left: 0 !important;\n          padding-right: 0 !important;\n        }\n      }\n    }\n    .badge {\n      padding: 4px 10px;\n      border-radius: 15px;\n      margin-bottom: 8px;\n      display: inline-block;\n      @include line-clamp();\n    }\n  }\n  .footer {\n    padding: 0 16px 16px;\n    ::ng-deep .meta {\n      .item {\n        margin-bottom: 10px;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card *ngIf=\"content\" class=\"card {{content?.header?.meta ? 'has-header':''}}\" [ngClass]=\"content.classes\">\n  <mat-card-content *ngIf=\"content.header?.meta\">\n    <app-card-meta [content]=\"content.header.meta\"></app-card-meta>\n  </mat-card-content>\n  <mat-card-header class=\"m-bottom-xs\" *ngIf=\"content.header\">\n    <div mat-card-avatar *ngIf=\"content.header?.avatar\">\n      <app-img *ngIf=\"content.header?.avatar\" [content]=\"content.header.avatar\"></app-img>\n    </div>\n    <mat-card-title *ngIf=\"content.header?.title\" [innerHTML]=\"content.header.title\"></mat-card-title>\n    <mat-card-subtitle *ngIf=\"content.header?.subTitle\" [innerHTML]=\"content.header.subTitle\"></mat-card-subtitle>\n  </mat-card-header>\n  <div class=\"card-header\">\n    <ng-container *ngIf=\"content.carousel\">\n      <app-swiper *ngIf=\"content?.carousel?.elements.length >1;else feature\" [content]=\"content.carousel\">\n      </app-swiper>\n      <ng-template #feature>\n        <app-feature-box [content]=\"content.carousel.elements[0]\"></app-feature-box>\n      </ng-template>\n    </ng-container>\n    <ng-container *ngIf=\"!content.carousel && content.feature\">\n      <app-feature-box [content]=\"content.feature\"></app-feature-box>\n    </ng-container>\n  </div>\n  <mat-card-content>\n    <div fxLayout>\n      <div *ngIf=\"content.avatar\" mat-card-avatar class=\"m-right-xs\">\n        <app-img [content]=\"content.avatar\"></app-img>\n      </div>\n      <div fxLayout=\"row wrap\" fxFlex=\"100\">\n        <mat-card-title fxFlex=\"100\" *ngIf=\"content?.title;else link\">{{content.title}}</mat-card-title>\n        <ng-template #link>\n          <mat-card-title fxFlex=\"100\">\n            <app-link [content]=\"content.link\"></app-link>\n          </mat-card-title>\n        </ng-template>\n        <mat-card-subtitle fxFlex=\"100\" *ngIf=\"content?.subTitle\">\n          {{content.subTitle}}\n        </mat-card-subtitle>\n      </div>\n    </div>\n    <div *ngIf=\"content.body\" class=\"card-body\" [innerHTML]=\"content.body | safeHtml\">\n    </div>\n  </mat-card-content>\n  <mat-card-actions *ngIf=\"content?.actions\">\n    <button mat-button *ngFor=\"let action of content.actions\">{{action.label}}</button>\n  </mat-card-actions>\n  <mat-card-footer>\n    <div class=\"footer\" *ngIf=\"content.footer\">\n      <app-card-meta [content]=\"content.footer.meta\"></app-card-meta>\n    </div>\n    <mat-progress-bar *ngIf=\"content.progressBar\" [mode]=\"content.progressBar.mode\" [value]=\"content.progressBar.value\">\n    </mat-progress-bar>\n  </mat-card-footer>\n</mat-card>\n"
        },
        {
            "name": "CardMetaComponent",
            "id": "component-CardMetaComponent-869c725c7432dae7558f2736a89b073bfdef80fedab137045f2f7e123a9b2eadb9c2fb57d65337b5c6a10ba6a4d779f25d6dc488fa0553f4f7579071b3e40843",
            "file": "src/app/uiux/widgets/card/card-meta/card-meta.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card-meta",
            "styleUrls": [
                "./card-meta.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card-meta.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDialog",
                    "args": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { TextComponent } from '../../text/text.component';\nimport { DialogComponent } from '../../dialog/dialog.component';\n\n@Component({\n  selector: 'app-card-meta',\n  templateUrl: './card-meta.component.html',\n  styleUrls: ['./card-meta.component.scss'],\n})\nexport class CardMetaComponent implements OnInit {\n  @Input() content: any;\n  constructor(private dialog: MatDialog) {}\n\n  ngOnInit(): void {}\n\n  onDialog(content: any): void {\n    this.dialog.open(DialogComponent, {\n      width: '600px',\n      data: {\n        renderInputComponent: TextComponent,\n        inputData: {\n          content: {\n            type: 'text',\n            spacer: 'none',\n            title: {\n              label: content.label,\n              style: 'style-v4',\n            },\n            body: content.value,\n          },\n        },\n      },\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".meta {\n  overflow: hidden;\n  ::ng-deep a {\n    &:hover {\n      text-decoration: underline;\n    }\n  }\n}\n\n.custom-btn {\n  width: auto;\n  height: 20px;\n  line-height: 16px;\n  ::ng-deep .mat-button-wrapper {\n    line-height: 16px;\n  }\n}\n",
                    "styleUrl": "./card-meta.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"meta\" *ngIf=\"content\">\n  <div class=\"item\" *ngFor=\"let meta of content\" fxLayout fxLayoutAlign=\"start start\">\n    <span fxFlex=\"0 0 auto\" class=\"bold m-right-xs\" *ngIf=\"meta.label\">{{meta.label}}: </span>\n    <div class=\"right\" fxLayoutAlign=\"start end\">\n      <ng-container *ngIf=\"meta?.params?.line\">\n        <span class=\"{{meta.params.line || 'two'}}-line\" [innerHTML]=\"meta.value | stripTags | shorten:200:''\"></span>\n      </ng-container>\n      <ng-container *ngIf=\"meta?.params?.dialog\">\n        <!-- <a href=\"javascript:void(0)\" [innerHTML]=\"meta.params.dialog.label\" (click)=\"onDialog(meta)\"></a> -->\n        <button class=\"custom-btn\" mat-icon-button (click)=\"onDialog(meta)\">\n          <span [innerHTML]=\"meta.params.dialog.label\"></span>\n        </button>\n      </ng-container>\n      <ng-container *ngIf=\"meta?.params?.lightbox\">\n        <app-inline-lightbox [content]=\"meta.value\"></app-inline-lightbox>\n      </ng-container>\n    </div>\n    <span *ngIf=\"!meta?.params\" [innerHTML]=\"meta.value\"></span>\n  </div>\n</div>\n"
        },
        {
            "name": "Carousel1v1Component",
            "id": "component-Carousel1v1Component-7328b404eec5ddfdd084a8c29d0d646b126d4c0b40e6d3292a059cc9eefc814dada99e01f5200de502297d9856c765b03b11c0528fdbfeb9e3f1a2e2c5255fa6",
            "file": "src/app/uiux/combs/carousel/carousel1v1/carousel1v1.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-carousel1v1",
            "styleUrls": [
                "./carousel1v1.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./carousel1v1.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  Input,\n  ChangeDetectionStrategy,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-carousel1v1',\n  templateUrl: './carousel1v1.component.html',\n  styleUrls: ['./carousel1v1.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class Carousel1v1Component implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".carousel-1-v1 {\n  overflow: hidden;\n}\n\n:host ::ng-deep .mat-card-content {\n  margin: 0 -16px;\n  overflow: hidden;\n}\n",
                    "styleUrl": "./carousel1v1.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"carousel-1-v1 position-relative\" [ngClass]=\"content.style\" *ngIf=\"content\">\n  <a class=\"anchor\" *ngIf=\"content.id\" [id]=\"content.id\"></a>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n  <app-bg *ngIf=\"content.bg\" [content]=\"content.bg\">\n    <app-img *ngIf=\"content.bg?.img\" [content]=\"content.bg.img\"></app-img>\n  </app-bg>\n  <div class=\"{{content?.disableContainer?'':'container'}}\">\n    <app-title [content]=\"content.title\"></app-title>\n    <app-swiper [content]=\"content.sliders\"></app-swiper>\n  </div>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n</div>\n"
        },
        {
            "name": "Carousel1v2Component",
            "id": "component-Carousel1v2Component-8294fafeb4b4732ff2daba85844f4d36528f69aa7ba212cb710864c05dff2cb0f4563c481cf0f03dc2c9a38c5b3172a36cc39a8e49c1214029f590e0090111cd",
            "file": "src/app/uiux/combs/carousel/carousel1v2/carousel1v2.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-carousel1v2",
            "styleUrls": [
                "./carousel1v2.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./carousel1v2.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "navigation$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onNext",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPrev",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Component({\n  selector: 'app-carousel1v2',\n  templateUrl: './carousel1v2.component.html',\n  styleUrls: ['./carousel1v2.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class Carousel1v2Component implements OnInit {\n  @Input() content: any;\n  navigation$ = new Subject();\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  onPrev(): void {\n    this.navigation$.next(-1);\n  }\n  onNext(): void {\n    this.navigation$.next(1);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".actions {\n  position: absolute;\n  right: 0;\n  top: 0;\n  left: auto;\n  .mat-icon {\n    cursor: pointer;\n    &:hover {\n      opacity: 0.85;\n    }\n  }\n}\n:host ::ng-deep {\n  .mat-card:not([class*=\"mat-elevation-z\"]) {\n    box-shadow: none;\n  }\n}\n",
                    "styleUrl": "./carousel1v2.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 17
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"carousel-1-v2 position-relative\" *ngIf=\"content\">\n  <a class=\"anchor\" *ngIf=\"content.id\" [id]=\"content.id\"></a>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n  <app-bg *ngIf=\"content.bg\" [content]=\"content.bg\"></app-bg>\n  <div class=\"container\">\n    <div class=\"head position-relative\">\n      <app-title [content]=\"content.title\"></app-title>\n      <div class=\"actions\">\n        <mat-icon (click)=\"onPrev()\">keyboard_arrow_left</mat-icon>\n        <mat-icon (click)=\"onNext()\">keyboard_arrow_right</mat-icon>\n      </div>\n    </div>\n    <app-swiper [content]=\"content.sliders\" [navigationSub]=\"navigation$\"></app-swiper>\n  </div>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n</div>\n"
        },
        {
            "name": "Carousel1v3Component",
            "id": "component-Carousel1v3Component-a2f1b6f0e94d954551850a179b2375ab23807d7d3c3f882a5817ca1d8359e49298dc6920ab747cf5c9455692edff2b7e6193aa171066972c159cb781ffc156da",
            "file": "src/app/uiux/combs/carousel/carousel1v3/carousel1v3.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-carousel1v3",
            "styleUrls": [
                "./carousel1v3.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./carousel1v3.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-carousel1v3',\n  templateUrl: './carousel1v3.component.html',\n  styleUrls: ['./carousel1v3.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class Carousel1v3Component implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".carousel-1-v3 {\n  overflow: hidden;\n}\n",
                    "styleUrl": "./carousel1v3.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"carousel-1-v3 position-relative\" [ngClass]=\"content.style\" *ngIf=\"content\">\n  <a class=\"anchor\" *ngIf=\"content.id\" [id]=\"content.id\"></a>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n  <app-bg *ngIf=\"content.bg\" [content]=\"content.bg\">\n    <app-img *ngIf=\"content.bg?.img\" [content]=\"content.bg.img\"></app-img>\n  </app-bg>\n  <div class=\"container \">\n    <app-text [content]=\"content.text\"></app-text>\n    <app-swiper [content]=\"content.sliders\"></app-swiper>\n  </div>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n</div>\n"
        },
        {
            "name": "Carousel2v1Component",
            "id": "component-Carousel2v1Component-40628d4384084f3553736e3762f7b711d2cfaa837b51b55edad5e27a043daa5d9ed3283dc25fa59ee0a9e4f3b989aac7361bc11a0961ecdd552775cea173be23",
            "file": "src/app/uiux/combs/carousel/carousel2v1/carousel2v1.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-carousel2v1",
            "styleUrls": [
                "./carousel2v1.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./carousel2v1.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-carousel2v1',\n  templateUrl: './carousel2v1.component.html',\n  styleUrls: ['./carousel2v1.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class Carousel2v1Component implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/theme/variable/breakpoint\";\n.carousel-2-v1 {\n  overflow: hidden;\n}\n:host ::ng-deep {\n  .swiper-container {\n    .swiper-button-prev {\n      left: 5%;\n    }\n    .swiper-button-next {\n      right: 5%;\n    }\n    .swiper-button-next,\n    .swiper-button-prev {\n      top: 100px;\n    }\n    @media #{$gt-sm} {\n      .swiper-button-prev {\n        left: 30%;\n      }\n      .swiper-button-next {\n        right: 30%;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./carousel2v1.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"carousel-2-v1 position-relative\" [class.section-light]=\"content.bg\" *ngIf=\"content\">\n  <a class=\"anchor\" *ngIf=\"content.id\" [id]=\"content.id\"></a>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n  <app-bg-img [content]=\"content.bg\" *ngIf=\"content.bg\"></app-bg-img>\n  <div class=\"container\">\n    <app-title [content]=\"content.title\"></app-title>\n    <app-swiper [content]=\"content.sliders\"></app-swiper>\n  </div>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n</div>\n"
        },
        {
            "name": "Carousel2v2Component",
            "id": "component-Carousel2v2Component-1f058d0dbf6f002dbb4d9673f01330369fed54a6b2b5b4380e9e7c4095e420bc1970cabc55e38cbef183005ac69935c57b88541b64da06ea33673ea915696df8",
            "file": "src/app/uiux/combs/carousel/carousel2v2/carousel2v2.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-carousel2v2",
            "styleUrls": [
                "./carousel2v2.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./carousel2v2.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-carousel2v2',\n  templateUrl: './carousel2v2.component.html',\n  styleUrls: ['./carousel2v2.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class Carousel2v2Component implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./carousel2v2.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"carousel-2-v2 position-relative\" *ngIf=\"content\" [ngClass]=\"content.classes\">\n  <a class=\"anchor\" *ngIf=\"content.id\" [id]=\"content.id\"></a>\n  <app-bg *ngIf=\"content.bg\" [content]=\"content.bg\">\n    <app-img [content]=\"content.bg.img\"></app-img>\n  </app-bg>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n  <div class=\"container\">\n    <app-title [content]=\"content.title\"></app-title>\n    <app-swiper [content]=\"content.sliders\"></app-swiper>\n  </div>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n</div>\n"
        },
        {
            "name": "CaseComponent",
            "id": "component-CaseComponent-fafd33669c13c5a0b269b9897ff25d76767cca2f2c998dd620f378fc331e15f2f673f4dc5acfbee96630289b2d186a21022777eeea2968fb9e0c1e26a13a017e",
            "file": "src/app/uiux/combs/node/case/case.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-case",
            "styleUrls": [
                "./case.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./case.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "lists",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "getCases",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getList",
                    "args": [
                        {
                            "name": "lists",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lists",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { NodeService } from '@core/service/node.service';\nimport { map } from 'lodash-es';\nimport { IShowcase2v1 } from '@uiux/combs/ICombs';\nimport { ScreenService } from '@core/service/screen.service';\nimport { Subject, Subscription } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nconst text = {\n  spacer: 'none',\n  title: {\n    label: '国内 Drupal 优秀网站案例',\n    style: 'style-v1',\n    classes: 'mat-display-0',\n  },\n  body: '<p class=\"text-center\">欢迎分享 Drupal 优秀的数字创新体验</p>',\n};\n@Component({\n  selector: 'app-case',\n  templateUrl: './case.component.html',\n  styleUrls: ['./case.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CaseComponent implements OnInit, OnDestroy {\n  @Input() content: any;\n  lists: any;\n  loading = false;\n\n  destroy$: Subject<boolean> = new Subject<boolean>();\n  constructor(\n    private nodeService: NodeService,\n    private screenService: ScreenService,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    if (this.screenService.isPlatformBrowser()) {\n      this.getCases();\n    }\n  }\n\n  getCases(): void {\n    this.loading = true;\n    const params = [\n      'fields[node--case]=title,body,created,medias,field_tags,drupal_internal__nid,path',\n      'include=medias,medias.field_media_image,field_tags',\n      'fields[file--file]=uri',\n      'fields[taxonomy_term--industry]=name',\n      'jsonapi_include=1',\n    ].join('&');\n\n    const path = this.nodeService.apiUrlConfig.nodeGetPath;\n    this.nodeService\n      .getNodes(path, 'case', params)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((res) => {\n        this.lists = {\n          text,\n          elements: this.getList(res.data),\n        };\n        this.loading = false;\n        this.cd.detectChanges();\n      });\n  }\n\n  getList(lists: any): any {\n    return map(lists, (item: any) => {\n      const link = this.nodeService.getNodePath(item);\n      const date = `${new Date(item.created).getFullYear()}/${new Date(\n        item.created\n      ).getMonth()}/${new Date(item.created).getDate()}`;\n      return {\n        subTitle: date,\n        avatar: {\n          src: '/assets/images/showcase/console.png',\n          alt: item.title,\n        },\n        body: item.body.value,\n        carousel: {\n          params: {\n            slidesPerView: 1,\n            navigation: false,\n            autoplay: {\n              delay: 5000,\n            },\n            breakpoints: null,\n          },\n          elements: map(item.medias, (img) => {\n            return {\n              type: 'feature-box',\n              fullIcon: 'fullscreen',\n              openIcon: 'open_in_new',\n              link,\n              ratios: 'media-140',\n              img: {\n                classes: 'object-fit',\n                src: img.field_media_image.uri.url,\n                alt: item.title,\n              },\n            };\n          }),\n        },\n        tags: map(item.field_tags, (tag) => {\n          return { label: tag.name };\n        }),\n        link: {\n          label: item.title,\n          href: link,\n        },\n      };\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./case.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<ng-container>\n  <div *ngIf=\"loading\" class=\"m-y\" fxLayoutAlign=\"center center\">\n    <app-spinner [content]=\"{color:'primary', size:40}\"></app-spinner>\n  </div>\n  <app-showcase2v1 [content]=\"lists\"></app-showcase2v1>\n</ng-container>\n"
        },
        {
            "name": "CaseNodeComponent",
            "id": "component-CaseNodeComponent-ac316e2a89b0d27214c8b57035c81f7766d7a6f40d2e49012c09681fcfc9e14293a005976c518f6742b6fbddcfab9b0320c96b2743bb4c6f24bbfa98eb34f2a6",
            "file": "src/app/uiux/combs/node/case/case-node/case-node.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-case-node",
            "styleUrls": [
                "./case-node.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./case-node.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n@Component({\n  selector: 'app-case-node',\n  templateUrl: './case-node.component.html',\n  styleUrls: ['./case-node.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CaseNodeComponent implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./case-node.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"content\">\n  <div class=\"case-node p-y-sm m-y-sm container p-x-sm\" fxLayout.xs=\"column\" fxLayout.gt-xs=\"row\"\n    fxLayoutAlign=\"center start\">\n    <div class=\"case-carousel\" fxFlex.xs=\"100\" fxFlex.gt-xs=\"50\">\n      <app-swiper [content]=\"content.carousel\">\n      </app-swiper>\n    </div>\n    <div class=\"case-body m-bottom p-x-sm\" fxFlex.xs=\"100\" fxFlex.gt-xs=\"50\">\n      <app-title [content]=\"content.title\"></app-title>\n      <div [innerHTML]=\"content.body | safeHtml\" class=\"m-bottom-xs\"></div>\n      <app-chip-list [classes]=\"'mini'\" *ngIf=\"content.tags\" [content]=\"content.tags\"></app-chip-list>\n      <div class=\"case-footer m-top\">\n        <a mat-raised-button title=\"{{content.site.label}}\" target=\"_blank\" color=\"primary\"\n          href=\"{{content.site.href}}\">\n          <mat-icon>open_in_new</mat-icon>\n          预览\n        </a>\n      </div>\n    </div>\n  </div>\n</ng-container>\n"
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-a41cd4ec84ac960d095fdf893938053ecdfa1b5d729c805d0b9e1643851df9f32514e41043cc9f7e2134741753720f4a10313793d5f7ec62cb5c46d112a468ec",
            "file": "src/app/uiux/widgets/form/checkbox/checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-checkbox",
            "styleUrls": [
                "./checkbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "FormGroup",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'app-checkbox',\n  templateUrl: './checkbox.component.html',\n  styleUrls: ['./checkbox.component.scss'],\n})\nexport class CheckboxComponent implements OnInit {\n  @Input() content: any;\n  @Input() form: FormGroup;\n\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  get isValid(): boolean {\n    return this.form.controls[this.content.key].valid;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host ::ng-deep {\n  .mat-checkbox-layout {\n    display: flex;\n    .mat-checkbox-label {\n      width: 100%;\n      .badge {\n        padding: 6px 12px;\n        border-radius: 12px;\n        line-height: 1;\n        font-size: small;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./checkbox.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "isValid": {
                    "name": "isValid",
                    "getSignature": {
                        "name": "isValid",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 17
                    }
                }
            },
            "templateData": "<section [formGroup]=\"form\">\n  <mat-checkbox class=\"width-100 checkbox m-bottom-xs\" formControlName=\"{{content.key}}\" [(ngModel)]=\"content.value\">\n    <div class=\"width-100\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\" [innerHTML]=\"content.label|safeHtml\">\n    </div>\n  </mat-checkbox>\n</section>\n"
        },
        {
            "name": "ChipListComponent",
            "id": "component-ChipListComponent-4458dc4fa81c480c0871bfd54e39a6cc998c5d39fbd934c888fed1fb930d682585897dc50f74c0f632f36c88a67ec2521d58bc55a2a2c8793e1a701684053a3e",
            "file": "src/app/uiux/widgets/chip-list/chip-list.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-chip-list",
            "styleUrls": [
                "./chip-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chip-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { IChipList } from '@core/interface/widgets/IChipList';\n\n@Component({\n  selector: 'app-chip-list',\n  templateUrl: './chip-list.component.html',\n  styleUrls: ['./chip-list.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ChipListComponent implements OnInit {\n  @Input() content: any;\n  @Input() classes: any;\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/theme/variable/variable\";\n\n.mini {\n  .mat-chip {\n    font-size: 12px;\n    padding: 0 6px;\n    min-height: 20px;\n  }\n}\n",
                    "styleUrl": "./chip-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 17
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-chip-list *ngIf=\"content\" [ngClass]=\"classes\">\n  <mat-chip color=\"{{item?.color || 'primary'}}\" selected=\"{{item?.selected}}\" *ngFor=\"let item of content.elements\">\n    <ng-container *ngIf=\"!item.href;else link\">\n      {{item.label}}\n    </ng-container>\n    <ng-template #link>\n      <app-link [content]=\"item\"></app-link>\n    </ng-template>\n  </mat-chip>\n</mat-chip-list>\n"
        },
        {
            "name": "CommentActionsComponent",
            "id": "component-CommentActionsComponent-35648392a09b7d549d49a61bc16121e2431791289b88b890de705163c0f6f615856fa78f2c2a737047c54d9f5a0d5b9321f403eb768dba848b601752d0b8c1db",
            "file": "src/app/uiux/combs/node/comment/comment-actions/comment-actions.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-comment-actions",
            "styleUrls": [
                "./comment-actions.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./comment-actions.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "ICommentConfig",
                    "decorators": []
                },
                {
                    "name": "currentId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "i",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "delete",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter"
                },
                {
                    "name": "reply",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter"
                },
                {
                    "name": "update",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "contentState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ContentState",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "userState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserState",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "isMy",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDelete",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onQuote",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onReply",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onUpdate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, Output, EventEmitter } from '@angular/core';\nimport { ICommentConfig } from '@core/interface/node/INode';\nimport { ContentState } from '@core/mobx/ContentState';\nimport { UserState } from '@core/mobx/user/UserState';\n\n@Component({\n  selector: 'app-comment-actions',\n  templateUrl: './comment-actions.component.html',\n  styleUrls: ['./comment-actions.component.scss'],\n})\nexport class CommentActionsComponent implements OnInit {\n  @Input() config: ICommentConfig;\n  @Input() item: any;\n  @Input() i: number;\n  @Input() currentId: string;\n  @Input() loading: boolean;\n  @Output() update = new EventEmitter();\n  @Output() reply = new EventEmitter();\n  @Output() delete = new EventEmitter();\n  constructor(public userState: UserState, public contentState: ContentState) {}\n\n  ngOnInit(): void {}\n\n  onUpdate(): void {\n    this.update.emit({ item: this.item });\n  }\n\n  onReply(): void {\n    this.reply.emit({ item: this.item });\n  }\n\n  onDelete(id: string): void {\n    this.delete.emit(id);\n  }\n\n  onQuote(): void {\n    console.log(this.item);\n    this.contentState.commentQuote$.next(this.item);\n  }\n\n  isMy(): boolean {\n    return (\n      this.item.author.id === this.userState.currentUser.id &&\n      !(this.item.id === this.currentId)\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-icon.mat-icon-inline {\n  width: 24px;\n}\n",
                    "styleUrl": "./comment-actions.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userState",
                        "type": "UserState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "contentState",
                        "type": "ContentState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "userState",
                        "type": "UserState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "contentState",
                        "type": "ContentState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"actions\">\n  <ng-container *ngIf=\"!config?.actions;else configActions\">\n    <div class=\"m-top-sm\" ngClass.gt-sm=\"m-left p-left-xs\" fxLayoutAlign=\"start center\">\n      <button *ngIf=\"isMy()\" mat-button color=\"primary\" (click)=\"onUpdate()\">\n        <mat-icon inline=\"true\">editor</mat-icon> 修改\n      </button>\n      <button *ngIf=\"!item.child\" mat-button color=\"primary\" (click)=\"onReply()\">\n        <mat-icon inline=\"true\">reply</mat-icon> 回复\n      </button>\n      <button *ngIf=\"!item.child\" mat-button color=\"primary\" (click)=\"onQuote()\">\n        <mat-icon inline=\"true\">repeat</mat-icon> 引用\n      </button>\n      <button *ngIf=\"isMy()\" mat-button color=\"primary\" (click)=\"onDelete(item.id)\">\n        <div fxLayoutAlign=\"center center\">\n          <mat-spinner diameter=\"20\" *ngIf=\"loading\"></mat-spinner>\n          <mat-icon inline=\"true\" *ngIf=\"!loading\">delete</mat-icon> 删除\n        </div>\n      </button>\n    </div>\n  </ng-container>\n\n  <ng-template #configActions>\n    <div class=\"m-top-sm\" ngClass.gt-sm=\"m-left p-left-xs\" fxLayoutAlign=\"start center\">\n      <ng-container *ngFor=\"let action of config.actions\">\n        <ng-container [ngSwitch]=\"action\">\n          <ng-container *ngSwitchCase=\"'update'\">\n            <button *ngIf=\"isMy()\" mat-button color=\"primary\" (click)=\"onUpdate()\">\n              <mat-icon inline=\"true\">editor</mat-icon> 修改\n            </button>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"'reply'\">\n            <button *ngIf=\"item.level === 1\" mat-button color=\"primary\" (click)=\"onReply()\">\n              <mat-icon inline=\"true\">reply</mat-icon> 回复\n            </button>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"'quote'\">\n            <button *ngIf=\"item.level === 1\" mat-button color=\"primary\" (click)=\"onQuote()\">\n              <mat-icon inline=\"true\">repeat</mat-icon> 引用\n            </button>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"'delete'\">\n            <button mat-button color=\"primary\" (click)=\"onDelete(item.id)\">\n              <div *ngIf=\"isMy()\" fxLayoutAlign=\"center center\">\n                <mat-spinner diameter=\"20\" *ngIf=\"loading\"></mat-spinner>\n                <mat-icon inline=\"true\" *ngIf=\"!loading\">delete</mat-icon> 删除\n              </div>\n            </button>\n          </ng-container>\n        </ng-container>\n      </ng-container>\n    </div>\n  </ng-template>\n</div>\n"
        },
        {
            "name": "CommentFormComponent",
            "id": "component-CommentFormComponent-c7dac6f3ec425d4fe05ffae8854a6ed0972be3a11bcfafdec3230ea365191cdfdc20b3568df791455544231369b9c000eacadec90041864fc48401e89eeb8c90",
            "file": "src/app/uiux/combs/node/comment/comment-form/comment-form.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-comment-form",
            "styleUrls": [
                "./comment-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./comment-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "commentContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "commentId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "IBaseNode",
                    "decorators": []
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "cancel",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "contentState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ContentState",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "modules",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QuillModule",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "placeholder",
                    "defaultValue": "'请输入...'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "screenService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScreenService",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "ICommentParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "ICommentParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "done",
                    "args": [
                        {
                            "name": "snack",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 209,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "snack",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 218,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reply",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "ICommentParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "ICommentParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "ICommentParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "ICommentParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  OnInit,\n  EventEmitter,\n  Output,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  OnDestroy,\n  Inject,\n} from '@angular/core';\nimport { NodeService } from '@core/service/node.service';\nimport { UtilitiesService } from '@core/service/utilities.service';\nimport { UserState } from '@core/mobx/user/UserState';\nimport { ScreenService } from '@core/service/screen.service';\nimport { of, Subject } from 'rxjs';\nimport { catchError, takeUntil } from 'rxjs/operators';\nimport { IBaseNode, ICommentParams } from '@core/interface/node/INode';\nimport { merge } from 'lodash-es';\nimport { ContentState } from '@core/mobx/ContentState';\nimport { QuillModule } from 'ngx-quill';\nimport { CORE_CONFIG } from '@core/token/core.config';\nimport { ICoreConfig } from '@core/mobx/IAppConfig';\n\n@Component({\n  selector: 'app-comment-form',\n  templateUrl: './comment-form.component.html',\n  styleUrls: ['./comment-form.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CommentFormComponent implements OnInit, OnDestroy {\n  @Input() content: IBaseNode;\n  @Input() commentContent: any;\n  @Input() commentId: string;\n  @Input() type: string;\n  @Output() cancel = new EventEmitter();\n\n  loading = false;\n  placeholder = '请输入...';\n  destroy$: Subject<boolean> = new Subject<boolean>();\n  modules: QuillModule;\n\n  constructor(\n    private cd: ChangeDetectorRef,\n    private nodeService: NodeService,\n    public screenService: ScreenService,\n    private utilitiesService: UtilitiesService,\n    private userState: UserState,\n    public contentState: ContentState,\n    @Inject(CORE_CONFIG) private coreConfig: ICoreConfig\n  ) {}\n\n  ngOnInit(): void {\n    if (this.screenService.isPlatformBrowser()) {\n      this.modules = Object.assign(\n        this.coreConfig?.editor?.modules || {},\n        this.content.editor?.modules\n      );\n      this.contentState.commentQuote$.subscribe((quote: any) => {\n        this.screenService.scrollToAnchor('comment');\n        this.commentContent = `\n          <br>\n          <em style=\"color: rgb(136, 136, 136);font-style: italic;\">\n          ====================<br>${quote.author.title}<br>${quote.author.subTitle}<br>\n          ${quote.content}\n          </em>\n          `;\n        this.cd.detectChanges();\n      });\n      this.cd.detectChanges();\n    }\n  }\n\n  onCancel(): void {\n    this.cancel.emit();\n  }\n\n  onSubmit(value: any): void {\n    this.loading = true;\n    const token = this.userState.csrfToken;\n    const params: ICommentParams = this.content.params.comment;\n    const type = params.attributes?.field_name || '';\n    // reply, update 在组件内判断处理，默认新增，包括外部组件\n    switch (this.type) {\n      case 'reply':\n        this.reply(value, params, type, token);\n        break;\n      case 'update':\n        this.update(value, params, type, token);\n        break;\n      default:\n        this.add(value, params, type, token);\n    }\n    this.cd.detectChanges();\n  }\n\n  add(\n    value: string,\n    params: ICommentParams,\n    type: string,\n    token: string\n  ): void {\n    // 默认comment_boyd，不一致的在后台覆写字段 /admin/config/services/jsonapi/add/resource_types\n    params.attributes.comment_body = {\n      value,\n      format: 'full_html',\n    };\n    this.nodeService\n      .addComment(type, params, token)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(\n        (res) => {\n          this.commentContent = '';\n          this.done('提交成功！');\n          this.cd.detectChanges();\n        },\n        () => {\n          this.loading = false;\n          this.utilitiesService.openSnackbar('请重新登录！');\n        }\n      );\n  }\n\n  reply(\n    value: string,\n    params: ICommentParams,\n    type: string,\n    token: string\n  ): void {\n    console.log(value);\n    const entity = {\n      type: params.type,\n      attributes: {\n        comment_body: {\n          value,\n          format: 'full_html',\n        },\n      },\n      relationships: {\n        pid: {\n          data: {\n            type: params.type,\n            id: this.commentId,\n          },\n        },\n      },\n    };\n    const data = merge(params, entity);\n    this.nodeService\n      .replyComment(type, data, token)\n      .pipe(\n        // catchError(() => {\n        //   return of({});\n        // }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((res) => {\n        this.commentContent = '';\n        this.done('回复成功！');\n        this.cd.detectChanges();\n      });\n  }\n\n  update(\n    value: string,\n    params: ICommentParams,\n    type: string,\n    token: string\n  ): void {\n    const entity: ICommentParams = {\n      type: params.type,\n      id: this.commentId,\n      attributes: {\n        comment_body: {\n          value,\n          format: 'full_html',\n        },\n      },\n      relationships: {\n        uid: {\n          data: {\n            type: 'user--user',\n            id: this.userState.currentUser.id,\n          },\n        },\n      },\n    };\n    this.nodeService\n      .updateComment(type, entity, this.commentId, token)\n      .pipe(\n        // catchError(() => {\n        //   return of({});\n        // }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe(\n        (res) => {\n          this.done('更新成功！');\n          this.cd.detectChanges();\n        },\n        (error) => {\n          this.loading = false;\n          console.log(error);\n          this.done('更新失败！');\n        }\n      );\n  }\n\n  done(snack: string): void {\n    this.loading = false;\n    this.utilitiesService.openSnackbar(\n      snack || this.content?.editor?.succes?.label\n    );\n    this.contentState.commentChange$.next(true);\n    this.cd.detectChanges();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host ::ng-deep {\n  .ql-container {\n    font-size: 16px;\n  }\n  .ck-content {\n    min-height: 250px;\n  }\n}\n",
                    "styleUrl": "./comment-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userState",
                        "type": "UserState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "contentState",
                        "type": "ContentState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "coreConfig",
                        "type": "ICoreConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userState",
                        "type": "UserState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "contentState",
                        "type": "ContentState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "coreConfig",
                        "type": "ICoreConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<!-- accept params and editor config -->\n<div class=\"comment-form m-bottom\" *ngIf=\"content\">\n  <a class=\"anchor\" id=\"comment\"></a>\n  <app-title [content]=\"content.editor?.title\"></app-title>\n  <div class=\"editor\">\n    <quill-editor [modules]=\"modules\" [placeholder]=\" content.editor?.placeholder || placeholder\"\n      *ngIf=\"screenService.isPlatformBrowser()\" [(ngModel)]=\"commentContent\"\n      [styles]=\"{height:content.editor?.height || '250px'}\">\n    </quill-editor>\n  </div>\n  <div class=\"actions p-y-sm p-x-sm\">\n    <button (click)=\"onSubmit(commentContent)\" mat-raised-button color=\"primary\" [disabled]=\"!commentContent\">\n      <div fxLayoutAlign=\"center center\">\n        <mat-spinner diameter=\"14\" *ngIf=\"loading\"></mat-spinner>\n        <span class=\"p-x-xs\">{{content?.editor?.action?.label || '提交'}}</span>\n      </div>\n    </button>\n    <button class=\"m-left-xs\" (click)=\"onCancel()\" mat-button>\n      取消\n    </button>\n  </div>\n</div>\n"
        },
        {
            "name": "CommentItemComponent",
            "id": "component-CommentItemComponent-a71218a992855390ff1dc9165c6fa99d4afaf738f6cee4fe9f1f3ffb10b4accde8d68e2705b407fe67c17fa5153b7e9a29233baee28d7391856a460c27840baa",
            "file": "src/app/uiux/combs/node/comment/comment-list/comment-item/comment-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-comment-item",
            "styleUrls": [
                "./comment-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./comment-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "comments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "ICommentContent[]",
                    "decorators": []
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "contentState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ContentState",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "currentData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "currentId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "showActions",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "showComment",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"reply\" | \"update\" | \"add\"",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "userState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserState",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDelete",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onReply",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onShow",
                    "args": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onUpdate",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackByFn",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectorRef,\n  Component,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ICommentContent } from '@core/interface/node/INode';\nimport { UserState } from '@core/mobx/user/UserState';\nimport { NodeService } from '@core/service/node.service';\nimport { UtilitiesService } from '@core/service/utilities.service';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { ScreenService } from '@core/service/screen.service';\nimport { ContentState } from '@core/mobx/ContentState';\nimport { CORE_CONFIG } from '@core/token/core.config';\nimport { ICoreConfig } from '@core/mobx/IAppConfig';\n\n@Component({\n  selector: 'app-comment-item',\n  templateUrl: './comment-item.component.html',\n  styleUrls: ['./comment-item.component.scss'],\n})\nexport class CommentItemComponent implements OnInit, OnDestroy {\n  @Input() content: any;\n  @Input() comments: ICommentContent[];\n\n  destroy$: Subject<boolean> = new Subject<boolean>();\n  currentId: string;\n  showComment = true;\n  showActions = true;\n  currentData: string;\n  loading: boolean;\n  type: 'reply' | 'update' | 'add';\n  constructor(\n    public userState: UserState,\n    private cd: ChangeDetectorRef,\n    private nodeService: NodeService,\n    private utilitiesService: UtilitiesService,\n    private screenService: ScreenService,\n    public contentState: ContentState,\n    @Inject(CORE_CONFIG) private coreConfig: ICoreConfig\n  ) {}\n\n  ngOnInit(): void {\n    if (this.screenService.isPlatformBrowser()) {\n      this.contentState.commentChange$.subscribe((state) => {\n        if (state) {\n          this.showComment = true;\n          this.showActions = true;\n          this.currentId = '';\n          this.screenService.scrollToAnchor(`q-${this.currentId}`);\n          this.cd.detectChanges();\n        }\n      });\n    }\n  }\n\n  onUpdate(data: any): void {\n    this.currentId = data.item.id;\n    this.showComment = false;\n    this.showActions = false;\n    this.screenService.scrollToAnchor(`q-${data.item.id}`);\n    this.currentData = data.item.content;\n    this.type = 'update';\n    this.cd.detectChanges();\n  }\n\n  onReply(data: any): void {\n    this.currentId = data.item.id;\n    this.showComment = true;\n    this.showActions = false;\n    this.screenService.scrollToAnchor(`q-${data.item.id}`);\n    this.currentData = '';\n    this.type = 'reply';\n    this.cd.detectChanges();\n  }\n\n  onShow(item: any): boolean {\n    if (item.id !== this.currentId) {\n      return true;\n    }\n    return item.id === this.currentId && this.showComment;\n  }\n\n  onCancel(): void {\n    this.showComment = true;\n    this.showActions = true;\n    this.currentId = '';\n    this.cd.detectChanges();\n  }\n\n  onDelete(id: string): void {\n    this.loading = true;\n    this.nodeService\n      .deleteEntity(\n        `${this.coreConfig.apiUrl.commentGetPath}/${this.content.params.comment.attributes.field_name}`,\n        id,\n        this.userState.csrfToken\n      )\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(\n        (res) => {\n          this.loading = false;\n          this.utilitiesService.openSnackbar('您的回答已删除！', '√');\n        },\n        () => {\n          this.loading = false;\n          this.utilitiesService.openSnackbar('Please check user state.', '√');\n        }\n      );\n    this.cd.detectChanges();\n  }\n\n  trackByFn(index: number, item: any): number {\n    return index;\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../../../../theme/variable/breakpoint\";\n\n.item-child {\n  border-radius: 4px;\n}\n\n.time {\n  font-size: small;\n  margin: 1rem 0;\n}\n\n.comment-body {\n  > ::ng-deep *:last-child {\n    margin-bottom: 0;\n  }\n}\n\n.actions {\n  button + button {\n    margin-left: 1rem;\n  }\n}\n\n@media #{$gt-sm} {\n  .comment-body,\n  .item-child {\n    margin-left: 50px;\n  }\n}\n",
                    "styleUrl": "./comment-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userState",
                        "type": "UserState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "contentState",
                        "type": "ContentState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "coreConfig",
                        "type": "ICoreConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "userState",
                        "type": "UserState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "contentState",
                        "type": "ContentState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "coreConfig",
                        "type": "ICoreConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"item p-y-sm p-x-sm\" *ngFor=\"let item of comments;index as i;last as isLast; trackBy: trackByFn\">\n  <a class=\"anchor\" [id]=\"'q-'+item.id\"></a>\n  <div class=\"comment-box\">\n    <app-media-object [content]=\"item.author\"></app-media-object>\n    <ng-container *ngIf=\"onShow(item)\">\n      <div class=\"comment-body m-top-xs\" [innerHTML]=\"item.content |safeHtml\">\n      </div>\n      <app-comment-actions *ngIf=\"showActions && item.level === 1\" [config]=\"content?.comment\" [item]=\"item\" [i]=\"i\"\n        [currentId]=\"currentId\" [loading]=\"loading\" (update)=\"onUpdate($event)\" (delete)=\"onDelete($event)\"\n        (reply)=\"onReply($event)\">\n      </app-comment-actions>\n    </ng-container>\n  </div>\n  <div class=\"inline-editor p-y-sm p-x-sm m-bottom\" *ngIf=\"item.id === currentId\">\n    <app-comment-form [content]=\"content\" (cancel)=\"onCancel()\" [commentContent]=\"currentData\" [commentId]=\"item.id\"\n      [type]=\"type\">\n    </app-comment-form>\n  </div>\n  <div class=\"item-child m-y-xs\" *ngIf=\"item?.child && item?.child?.length\">\n    <app-comment-item [comments]=\"item.child\" [content]=\"content\"></app-comment-item>\n  </div>\n</div>\n"
        },
        {
            "name": "CommentListComponent",
            "id": "component-CommentListComponent-e948413bda75a98c4bf69db1c2467f29907a4b911616b4b35ae6e80a8a99bdf57ec221b021ed156dd26e6b49c983fcc9d729779f98ecb51a1d35d3b733bec80a",
            "file": "src/app/uiux/combs/node/comment/comment-list/comment-list.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-comment-list",
            "styleUrls": [
                "./comment-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./comment-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "comments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "ICommentContent[]",
                    "decorators": []
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  OnInit,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { ICommentContent } from '@core/interface/node/INode';\n\n@Component({\n  selector: 'app-comment-list',\n  templateUrl: './comment-list.component.html',\n  styleUrls: ['./comment-list.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CommentListComponent implements OnInit {\n  @Input() content: any;\n  @Input() comments: ICommentContent[];\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./comment-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 17
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"comment-list m-y-sm position-relative\" *ngIf=\"comments\">\n  <ng-container *ngIf=\"comments.length;else empty\">\n    <div class=\"comment-count p-y-xs p-x-sm\" fxLayoutAlign=\"space-between center\">\n      <span *ngIf=\"content.comment?.title\" class=\"bold\" fxFlex=\"100\">{{content.title}}</span>\n      <span class=\"bold {{content.comment?.title?'text-right':''}}\" fxFlex=\"100\">{{comments.length}}个回复</span>\n    </div>\n    <app-comment-item [comments]=\"comments\" [content]=\"content\"></app-comment-item>\n  </ng-container>\n  <ng-template #empty>\n    <div class=\"empty p-y\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n      <app-icon [content]=\"{'name':'create','inline':true}\"></app-icon>\n      <p [innerHTML]=\"content.editor?.empty?.label || '暂时没有人回复!'\"></p>\n    </div>\n  </ng-template>\n</div>\n"
        },
        {
            "name": "ContactUsComponent",
            "id": "component-ContactUsComponent-1e433c6ce9a13ae5a2cec1a291f18fae826006fdda4f72c71a1dc369d3cebd2f0b829864704f1ff2801f8e03b17006062e854a5ba830e23ae722b26bc90ec764",
            "file": "src/app/uiux/widgets/contact-us/contact-us.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-contact-us",
            "styleUrls": [
                "./contact-us.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./contact-us.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "formService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormService",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "submited",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "success",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { FormService } from '@core/service/form.service';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { UtilitiesService } from '@core/service/utilities.service';\n\n// TODO: need move to combs\n@Component({\n  selector: 'app-contact-us',\n  templateUrl: './contact-us.component.html',\n  styleUrls: ['./contact-us.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ContactUsComponent implements OnInit {\n  @Input() content: any;\n  form: FormGroup;\n  success = false;\n  submited = false;\n  constructor(\n    private cd: ChangeDetectorRef,\n    public formService: FormService,\n    private utilitiesService: UtilitiesService\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.formService.toFormGroup(this.content.forms);\n  }\n\n  onSubmit(): void {\n    if (this.form.invalid) {\n      this.form.markAllAsTouched();\n      return;\n    }\n    this.submited = true;\n    const data = this.formService.getwebFormData(\n      this.content.params,\n      this.form\n    );\n    this.formService.submitWebForm(data).subscribe(\n      (res) => {\n        this.submited = false;\n        this.success = true;\n        this.utilitiesService.openSnackbar('成功提交！');\n        this.form.reset();\n        this.cd.detectChanges();\n      },\n      (error) => {\n        this.submited = false;\n        this.utilitiesService.openSnackbar(`Error: ${error.message}`);\n        this.cd.detectChanges();\n      }\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".contact-us {\n  overflow: hidden;\n}\n",
                    "styleUrl": "./contact-us.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"contact-us positive-relative\" *ngIf=\"content\">\n  <a class=\"anchor\" *ngIf=\"content.id\" [id]=\"content.id\"></a>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n  <app-bg [content]=\"content.bg\" *ngIf=\"content.bg\">\n    <mat-icon class=\"wave\" svgIcon=\"{{content.bg.icon}}\" *ngIf=\"content.bg.icon\"></mat-icon>\n  </app-bg>\n  <div class=\"container\">\n    <form fxLayout=\"row wrap\" fxFlex=\"100\" (ngSubmit)=\"onSubmit()\" fxLayoutAlign=\"center center\" [formGroup]=\"form\">\n      <div class=\"inner\" fxFlex=\"0 0 100\" fxLayoutAlign=\"center center\" fxLayout=\"row wrap\">\n        <div fxFlex.lt-md=\"100\" fxFlex.gt-sm=\"40\" fxLayout=\"column\">\n          <div class=\"p-x-sm\">\n            <app-box *ngFor=\"let item of content.contact\" [content]=\"item\"></app-box>\n          </div>\n        </div>\n        <div fxFlexOrder=\"{{content.formOrder || 10}}\" fxFlex.lt-md=\"100\" fxFlex.gt-sm=\"40\" fxLayout=\"column\">\n          <div class=\"p-x-sm\" fxLayoutAlign=\"start center\" fxLayout=\"row wrap\" fxFlex=\"100\">\n            <app-dynamic-form-control *ngFor=\"let item of content.forms\" [control]=\"item\" [form]=\"form\">\n            </app-dynamic-form-control>\n          </div>\n        </div>\n      </div>\n\n      <button *ngIf=\"content.action\" class=\"m-top\" type=\"submit\" mat-raised-button color=\"primary\" fxFlex=\"0 1 auto\">\n        <div fxLayoutAlign=\"center center\">\n          <div class=\"p-x-xs\">{{content.action.label}}</div>\n        </div>\n      </button>\n      <div fxFlex=\"100\" fxLayoutAlign=\"center center\">\n        <app-spinner [content]=\"{color:'primary', size:40}\" *ngIf=\"submited\"></app-spinner>\n      </div>\n    </form>\n  </div>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n</div>\n"
        },
        {
            "name": "ContentBoxComponent",
            "id": "component-ContentBoxComponent-3d6075f6ce7135495d231f51d0bf3359f6bd28f8d551167ebde2d627ea2cb07c51a911eef7b10bd0ccb33cfeb1ff8b997c76ff8db6a6cb68ea04f05d70e19801",
            "file": "src/app/uiux/widgets/content-box/content-box.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-content-box",
            "styleUrls": [
                "./content-box.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./content-box.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-content-box',\n  templateUrl: './content-box.component.html',\n  styleUrls: ['./content-box.component.scss'],\n})\nexport class ContentBoxComponent implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".content-box {\n  overflow: hidden;\n  height: 100%;\n  .inner {\n    position: absolute;\n    left: 0;\n    bottom: 0;\n    z-index: 10;\n    .title {\n      line-height: 1.5;\n    }\n    ::ng-deep {\n      a {\n        color: #fff;\n        opacity: 0.85;\n      }\n    }\n  }\n  .media {\n    transition: transform 0.25s ease-in-out;\n  }\n  &:before {\n    content: \"\";\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(\n      180deg,\n      rgba(255, 255, 255, 0) 0%,\n      #000000 100%\n    );\n    opacity: 0.6;\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n    z-index: 2;\n    transition: opacity 0.25s ease-in-out;\n  }\n  &:hover {\n    &:before {\n      opacity: 0.75;\n    }\n    .media {\n      transform: scale(1.1);\n    }\n  }\n}\n",
                    "styleUrl": "./content-box.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"content-box position-relative\">\n  <div class=\"media\" [ngClass]=\"content.ratios || 'media-4-3'\">\n    <app-img *ngIf=\"content.img\" [content]=\"content.img\"></app-img>\n  </div>\n  <div class=\"inner p-x-sm p-y-sm\">\n    <div class=\"sub-title\" *ngIf=\"content.subTitle\">\n      <app-link [content]=\"content.subTitle\"></app-link>\n    </div>\n    <h2 class=\"title two-line m-bottom-0\">\n      <app-link [content]=\"content.title\"></app-link>\n    </h2>\n  </div>\n</div>\n"
        },
        {
            "name": "ContentTextCenterComponent",
            "id": "component-ContentTextCenterComponent-ab11b54e91073eeb7b4ea629031f854dddea16dc9b17b89215fe2c59a656d9ad8f2f91e25adcc5336efdea9c3fc9f305e75933df00cd434acbc108e9445ccaac",
            "file": "src/app/uiux/widgets/content-text-center/content-text-center.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-content-text-center",
            "styleUrls": [
                "./content-text-center.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./content-text-center.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-content-text-center',\n  templateUrl: './content-text-center.component.html',\n  styleUrls: ['./content-text-center.component.scss'],\n})\nexport class ContentTextCenterComponent implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".inner {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box;\n  text-align: center;\n  min-height: 375px;\n}\n",
                    "styleUrl": "./content-text-center.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"content-text-center position-relative\">\n  <div class=\"media\" [ngClass]=\"content.ratios || 'media-4-3'\">\n    <app-img *ngIf=\"content.img\" [content]=\"content.img\"></app-img>\n  </div>\n  <div class=\"inner p-x-sm p-y-sm\" fxLayoutAlign=\"center center\">\n    <div class=\"content\" [innerHTML]=\"content.text | safeHtml\" fxLayoutAlign=\"center center\" fxLayout=\"column\"></div>\n  </div>\n</div>\n"
        },
        {
            "name": "DatepickerComponent",
            "id": "component-DatepickerComponent-634d61ab86612eec8f66a933b4a229af3f9036dfc8483041f39104a390faf73464c4e3d135622ecd7cbc1fbaf28487858f8431758b8e1cafcda47dcad2202591",
            "file": "src/app/uiux/widgets/form/datepicker/datepicker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-datepicker",
            "styleUrls": [
                "./datepicker.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./datepicker.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "FormGroup",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | null",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSelectedChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { formatDate } from '@angular/common';\n\n@Component({\n  selector: 'app-datepicker',\n  templateUrl: './datepicker.component.html',\n  styleUrls: ['./datepicker.component.scss'],\n})\nexport class DatepickerComponent implements OnInit {\n  @Input() content: any;\n  @Input() form: FormGroup;\n  selected: Date | null;\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  get isValid(): boolean {\n    if (!this.content.range && this.content?.key) {\n      return this.form.controls[this.content.key].valid;\n    } else {\n      return false;\n    }\n  }\n\n  onSelectedChange(value: Date): void {\n    console.log(value);\n    this.form.controls[this.content.key].setValue(\n      formatDate(value, 'y-MM-dd', 'en-US')\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./datepicker.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "isValid": {
                    "name": "isValid",
                    "getSignature": {
                        "name": "isValid",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 18
                    }
                }
            },
            "templateData": "<!-- range -->\n<ng-container *ngIf=\"content?.range\">\n  <mat-form-field class=\"width-100\" [appearance]=\"content.appearance || 'fill'\" *ngIf=\"content\" [formGroup]=\"form\">\n    <mat-label *ngIf=\"content.label\">{{content.label}}</mat-label>\n    <mat-date-range-input [rangePicker]=\"pickerRange\">\n      <input matStartDate formControlName=\"start\" [placeholder]=\"content?.placeholder?.start || '开始'\">\n      <input matEndDate formControlName=\"end\" [placeholder]=\"content?.placeholder?.end || '结束'\">\n    </mat-date-range-input>\n    <mat-datepicker-toggle matSuffix [for]=\"pickerRange\"></mat-datepicker-toggle>\n    <mat-date-range-picker [dateClass]=\"content?.classes\" [opened]=\"content?.opened\" #pickerRange>\n    </mat-date-range-picker>\n  </mat-form-field>\n</ng-container>\n\n<!-- key -->\n<ng-container *ngIf=\"!content?.range && content?.key && !content.inline\">\n  <mat-form-field class=\"width-100\" [appearance]=\"content.appearance || 'fill'\" *ngIf=\"content\" [formGroup]=\"form\">\n    <mat-label *ngIf=\"content.label\">{{content.label}}</mat-label>\n    <input matInput formControlName=\"{{content.key}}\" [matDatepicker]=\"datepicker\"\n      [placeholder]=\"content?.placeholder || ''\">\n    <mat-datepicker-toggle matSuffix [for]=\"datepicker\"></mat-datepicker-toggle>\n    <mat-datepicker [dateClass]=\"content?.classes\" #datepicker></mat-datepicker>\n    <mat-hint *ngIf=\"content.hint\">{{content.hint}}</mat-hint>\n    <mat-error *ngIf=\"!isValid\">{{content.errorMes}}</mat-error>\n  </mat-form-field>\n</ng-container>\n\n<!-- inline -->\n<ng-container *ngIf=\"content?.inline\">\n  <mat-card class=\"inline-calendar-card\">\n    <mat-calendar (selectedChange)=\"onSelectedChange($event)\" [(selected)]=\"content.value\"></mat-calendar>\n  </mat-card>\n</ng-container>\n"
        },
        {
            "name": "DialogComponent",
            "id": "component-DialogComponent-2710b9fc3859a4cecd70af5707613428f8c41c30af723caf11867ad634c51d611128ebc8e5d35609dad265597a62b25dd688353ba03502d577004e9fa7034cdc",
            "file": "src/app/uiux/widgets/dialog/dialog.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dialog",
            "styleUrls": [
                "./dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDialog",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<DialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  OnInit,\n} from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { IDialog } from '@core/interface/IDialog';\n\n@Component({\n  selector: 'app-dialog',\n  templateUrl: './dialog.component.html',\n  styleUrls: ['./dialog.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DialogComponent implements OnInit {\n  constructor(\n    public dialogRef: MatDialogRef<DialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: IDialog\n  ) {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".dialog {\n  position: relative;\n}\n\n.close {\n  position: absolute;\n  right: -12px;\n  top: -20px;\n}\n",
                    "styleUrl": "./dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<DialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "IDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<DialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "IDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"dialog\">\n  <button class=\"close\" tabindex=\"-1\" mat-icon-button [mat-dialog-close]=\"true\" *ngIf=\"!data.disableCloseButton\">\n    <mat-icon>close</mat-icon>\n  </button>\n  <h2 mat-dialog-title *ngIf=\"data.title\">{{data.title}}</h2>\n  <mat-dialog-content class=\"p-y-sm\">\n    <ng-container [ndcDynamicInputs]=\"data.inputData\" [ngComponentOutlet]=\"data.renderInputComponent\">\n    </ng-container>\n  </mat-dialog-content>\n</div>\n"
        },
        {
            "name": "DownloadComponent",
            "id": "component-DownloadComponent-46de6f2bb633a56fe38d23a14efd0c4539e7b8b671792be0964d63d21a3373a418387a23afcddd260051e807c7690620207482bd692928cd64321377f5d887cd",
            "file": "src/app/uiux/widgets/actions/download/download.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-download",
            "styleUrls": [
                "./download.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./download.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "IDownload",
                    "decorators": []
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "canAccess",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "isPayed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "isReqRule",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "payUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "reqMoney",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "userState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserState",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "checkAccess",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { IDownload } from '@core/interface/widgets/IDownload';\nimport { ScreenService } from '@core/service/screen.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { LoginComponent } from 'src/app/modules/user/login/login.component';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { NodeService } from '@core/service/node.service';\nimport { UserState } from '@core/mobx/user/UserState';\nimport { CORE_CONFIG } from '@core/token/core.config';\nimport { ICoreConfig } from '@core/mobx/IAppConfig';\n\n@Component({\n  selector: 'app-download',\n  templateUrl: './download.component.html',\n  styleUrls: ['./download.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DownloadComponent implements OnInit, OnDestroy {\n  @Input() content: IDownload;\n  @Input() data: any;\n  destroy$: Subject<boolean> = new Subject<boolean>();\n  config: any;\n  canAccess: boolean;\n  isPayed: boolean;\n  isReqRule: boolean;\n  payUrl: string;\n  reqMoney: number;\n  constructor(\n    private screenService: ScreenService,\n    private dialog: MatDialog,\n    private nodeService: NodeService,\n    public userState: UserState,\n    private cd: ChangeDetectorRef,\n    @Inject(CORE_CONFIG) private coreConfig: ICoreConfig\n  ) {}\n\n  ngOnInit(): void {\n    if (this.screenService.isPlatformBrowser()) {\n      this.config = this.coreConfig?.actions?.download;\n      this.checkAccess(this.data);\n    }\n  }\n\n  checkAccess(data: any): void {\n    this.nodeService.checkNodeAccess(data).subscribe((access) => {\n      this.canAccess = access.canAccess;\n      this.isReqRule = access.isReqRule;\n      this.isPayed = access.isPayed;\n      this.payUrl = access.payUrl;\n      this.reqMoney = access.reqMoney;\n      this.cd.detectChanges();\n    });\n  }\n\n  openLogin(): void {\n    const dialogRef = this.dialog.open(LoginComponent);\n    dialogRef\n      .afterClosed()\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(() => {\n        console.log('dialog close!');\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./download.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userState",
                        "type": "UserState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "coreConfig",
                        "type": "ICoreConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userState",
                        "type": "UserState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "coreConfig",
                        "type": "ICoreConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<ng-container *ngIf=\"content && config?.enable\">\n  <button mat-button [mat-menu-trigger-for]=\"menu\">\n    <app-icon [content]=\"config.icon\"></app-icon>\n    <span>{{config.label}}</span>\n  </button>\n  <mat-menu #menu=\"matMenu\">\n    <ng-container *ngIf=\"canAccess;else canotAccess\">\n      <button *ngFor=\"let item of content.elements\" mat-menu-item>\n        <app-icon [content]=\"item.icon\"></app-icon>\n        <a target=\"_blank\" href=\"{{item.href}}\">{{item.label}}</a>\n      </button>\n    </ng-container>\n    <ng-template #canotAccess>\n      <ng-container *ngIf=\"!userState.authenticated\">\n        <button mat-menu-item>\n          <app-icon [content]=\"{'name':'person'}\"></app-icon>\n          <a href=\"javascript:vovid(0)\" (click)=\"openLogin()\">登录</a>\n        </button>\n      </ng-container>\n      <ng-container *ngIf=\"!isPayed\">\n        <button mat-menu-item>\n          <app-icon [content]=\"{'name':'shopping_cart'}\"></app-icon>\n          <a href=\"{{payUrl}}\" target=\"_blank\">支付购买下载</a>\n        </button>\n      </ng-container>\n    </ng-template>\n  </mat-menu>\n</ng-container>\n"
        },
        {
            "name": "DropdownMenuComponent",
            "id": "component-DropdownMenuComponent-7ae88f5cce1ceb48985f76264bb4806696a45bd1906bfe4c0d77588ee2769415316c52fb5d3f8be97bde844e5940853a495bba2b44b7afb3df236ef6664919ae",
            "file": "src/app/uiux/widgets/dropdown-menu/dropdown-menu.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dropdown-menu",
            "styleUrls": [
                "./dropdown-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dropdown-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "IDropdownMenu[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "panelOpenState",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { IDropdownMenu } from '@core/interface/widgets/IDropdownMenu';\n\n@Component({\n  selector: 'app-dropdown-menu',\n  templateUrl: './dropdown-menu.component.html',\n  styleUrls: ['./dropdown-menu.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DropdownMenuComponent implements OnInit {\n  @Input() content: IDropdownMenu[];\n  panelOpenState = false;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host ::ng-deep {\n  .mat-expansion-panel-header {\n    border-bottom: 1px solid;\n    border-radius: 0;\n  }\n}\n.mat-accordion {\n  .mat-expansion-panel-header {\n    padding: 0 16px;\n    height: 48px;\n  }\n  .mat-expansion-panel {\n    box-shadow: none;\n    .mat-expansion-panel {\n      .mat-expansion-panel-header {\n        border: 0;\n        ::ng-deep {\n          a {\n            color: inherit;\n          }\n        }\n      }\n    }\n  }\n  ::ng-deep {\n    .mat-expansion-panel-body {\n      padding: 0 16px 0;\n    }\n    .mat-list-item-content {\n      app-link {\n        flex: 1;\n        padding: 10px 0;\n        a {\n          display: block;\n        }\n      }\n    }\n  }\n  .mat-expansion-panel-spacing {\n    margin: 0;\n  }\n  .mat-list {\n    border-bottom: 1px solid;\n  }\n}\n",
                    "styleUrl": "./dropdown-menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 17
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"content\">\n  <mat-accordion multi>\n    <ng-container *ngFor=\"let item of content\">\n      <mat-list *ngIf=\"!item.child\">\n        <mat-list-item>\n          <app-link [content]=\"item\"></app-link>\n        </mat-list-item>\n      </mat-list>\n      <mat-expansion-panel *ngIf=\"item.child\" (opened)=\"panelOpenState = true\" (closed)=\"panelOpenState = false\">\n        <mat-expansion-panel-header>\n          <mat-panel-title *ngIf=\"!item.href\" [ngClass]=\"item.classes\">\n            {{item.label}}\n          </mat-panel-title>\n          <app-link *ngIf=\"item.href\" [ngClass]=\"item.classes\" [content]=\"item\"></app-link>\n        </mat-expansion-panel-header>\n        <app-dropdown-menu [content]=\"item.child\"></app-dropdown-menu>\n      </mat-expansion-panel>\n    </ng-container>\n  </mat-accordion>\n</ng-container>\n"
        },
        {
            "name": "DynamicCardList1v1Component",
            "id": "component-DynamicCardList1v1Component-6c3cb789a5844c90bbf69d527f78d2206e9d038e058ee23569a36511b2142250d0b2033a4dadb7c885a7227581a94579a88f556613e4d70fc323464444cf9a4a",
            "file": "src/app/uiux/combs/list/dynamic-card-list1v1/dynamic-card-list1v1.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dynamic-card-list1v1",
            "styleUrls": [
                "./dynamic-card-list1v1.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dynamic-card-list1v1.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "nodes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "nodeService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NodeService",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "pager",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "routerService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RouteService",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "nodeSearch",
                    "args": [
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPageChange",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackByFn",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateList",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApiParams",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getDeepValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getFormParams",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Params",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getParams",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getParamsState",
                    "args": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getUrlQuery",
                    "args": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "handlerPager",
                    "args": [
                        {
                            "name": "pager",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pager",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "initFormValueWithUrlQuery",
                    "args": [
                        {
                            "name": "query",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "controls",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "controls",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "row",
                    "args": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "padding",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'4rem'"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "padding",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'4rem'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { result } from 'lodash';\nimport { NodeService } from '@core/service/node.service';\nimport { RouteService } from '@core/service/route.service';\nimport { BaseComponent } from '@uiux/base/base.widget';\nimport { ScreenService } from '@core/service/screen.service';\n\n@Component({\n  selector: 'app-dynamic-card-list1v1',\n  templateUrl: './dynamic-card-list1v1.component.html',\n  styleUrls: ['./dynamic-card-list1v1.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DynamicCardList1v1Component\n  extends BaseComponent\n  implements OnInit\n{\n  @Input() content: any;\n\n  page: number;\n  pager: any;\n  loading = false;\n  nodes: any[];\n  constructor(\n    public nodeService: NodeService,\n    public routerService: RouteService,\n    private screenService: ScreenService,\n    private cd: ChangeDetectorRef\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    if (this.screenService.isPlatformBrowser()) {\n      this.nodeSearch({});\n    }\n  }\n\n  nodeSearch(options: any): void {\n    this.loading = true;\n    const state = this.getParamsState({}, options);\n    const params = this.getApiParams(state);\n    this.nodeService\n      .search(this.getParams(this.content, 'type'), params)\n      .subscribe(\n        (data) => {\n          this.updateList(data);\n          this.loading = false;\n          this.cd.detectChanges();\n        },\n        (error) => {\n          console.log(error);\n          this.loading = false;\n          this.cd.detectChanges();\n        }\n      );\n  }\n\n  updateList(data: any): void {\n    this.pager = this.handlerPager(data.pager);\n    this.nodes = data.rows.map((item: any) => {\n      return {\n        link: {\n          label: item.title,\n          href: item.url,\n        },\n        user: item.user,\n        time: item.date,\n        feature: {\n          fullIcon: 'fullscreen',\n          openIcon: 'open_in_new',\n          link: item.url,\n          ratios: this.content.ratios || 'media-4-3',\n          img: {\n            classes: 'object-fit',\n            src: item.image,\n            title: item.title,\n          },\n        },\n        moreLabel: '查看更多',\n      };\n    });\n    this.cd.detectChanges();\n  }\n\n  onPageChange(page: number): void {\n    this.page = page - 1;\n    this.nodeSearch({ page: this.page });\n  }\n\n  trackByFn(index: number, item: any): number {\n    return index;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dynamic-card-list1v1.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "routerService",
                        "type": "RouteService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "routerService",
                        "type": "RouteService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"dynamic-card-list-1-v1 m-y\" *ngIf=\"content\">\n  <div class=\"container\">\n    <div class=\"inner\" fxLayout=\"row wrap\" fxFlex=\"100%\">\n      <app-text [content]=\"content.header\" *ngIf=\"content.header\" fxFlex=\"100\"></app-text>\n      <div *ngIf=\"nodes\" class=\"card-list m-y\" fxLayout=\"row wrap\" fxLayoutAlign=\"start start\" fxFlex.lt-md=\"0 0 100\"\n        fxFlex.gt-sm=\"0 0 {{content.sidebar ? '75%':'100%'}}\">\n        <app-card1v1 class=\"m-bottom-sm m-x-xs\" fxFlex.gt-sm=\"{{row(content, '2rem')}}\" fxFlex.lt-md=\"0 0 100%\"\n          [content]=\"card\" *ngFor=\"let card of nodes | paginate: { itemsPerPage: pager.items_per_page, currentPage:\n          pager.current_page + 1, totalItems: pager.total_items}; trackBy: trackByFn\">\n        </app-card1v1>\n      </div>\n      <div class=\"list-bottom width-100\">\n        <app-pagination *ngIf=\"nodes?.length;else empty\" (pageChange)=\"onPageChange($event)\"></app-pagination>\n        <ng-template #empty>\n          <div class=\"text-center p-y-xl\">\n            <p>没有数据。</p>\n          </div>\n        </ng-template>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "DynamicCardListComponent",
            "id": "component-DynamicCardListComponent-dd138f6ae3d6d953155c52937aaea6cefc3b366e407bf065ba72a567038c915a43890ec15443f2e7383a04025a3a731d3b5e97dbb2818bf1da1b4d88ec3d0b6f",
            "file": "src/app/uiux/combs/list/dynamic-card-list/dynamic-card-list.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dynamic-card-list",
            "styleUrls": [
                "./dynamic-card-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dynamic-card-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "filterForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "keys",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "nodes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "nodeService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NodeService",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "pager",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "routerService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RouteService",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "initForm",
                    "args": [
                        {
                            "name": "items",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "nodeSearch",
                    "args": [
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPageChange",
                    "args": [
                        {
                            "name": "page",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectChange",
                    "args": [
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackByFn",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateList",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApiParams",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getDeepValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getFormParams",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Params",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getParams",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getParamsState",
                    "args": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getUrlQuery",
                    "args": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "handlerPager",
                    "args": [
                        {
                            "name": "pager",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pager",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "initFormValueWithUrlQuery",
                    "args": [
                        {
                            "name": "query",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "controls",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "controls",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "row",
                    "args": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "padding",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'4rem'"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "padding",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'4rem'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { FormGroup } from '@angular/forms';\nimport { isEmpty, omitBy, result } from 'lodash-es';\nimport { NodeService } from '@core/service/node.service';\nimport { RouteService } from '@core/service/route.service';\nimport { BaseComponent } from '@uiux/base/base.widget';\nimport { FormService } from '@core/service/form.service';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\nimport { ScreenService } from '@core/service/screen.service';\n\n@Component({\n  selector: 'app-dynamic-card-list',\n  templateUrl: './dynamic-card-list.component.html',\n  styleUrls: ['./dynamic-card-list.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DynamicCardListComponent extends BaseComponent implements OnInit {\n  @Input() content: any;\n  keys: string;\n  page: number;\n  pager: any;\n  form: FormGroup;\n  filterForm: any[];\n  nodes: any[];\n  status: any;\n  loading = false;\n\n  constructor(\n    public nodeService: NodeService,\n    private router: ActivatedRoute,\n    public routerService: RouteService,\n    private formService: FormService,\n    private screenService: ScreenService,\n    private cd: ChangeDetectorRef\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    if (this.screenService.isPlatformBrowser()) {\n      this.router.queryParams.subscribe((query: any) => {\n        this.page = query.page || 0;\n        const queryOpt = omitBy(\n          Object.assign(\n            {\n              page: this.page,\n            },\n            query\n          ),\n          isEmpty\n        );\n        if (this.content.sidebar) {\n          this.filterForm = this.initFormValueWithUrlQuery(\n            queryOpt,\n            this.content.sidebar\n          );\n          this.initForm(this.filterForm);\n        }\n        this.nodeSearch(queryOpt);\n      });\n    }\n  }\n\n  initForm(items: any[]): void {\n    this.form = this.formService.toFormGroup(items);\n    this.form.valueChanges\n      .pipe(debounceTime(1000), distinctUntilChanged())\n      .subscribe((value) => {\n        const params = Object.assign({ page: 0 }, value);\n        this.onSelectChange(params);\n      });\n  }\n\n  nodeSearch(options: any): void {\n    this.loading = true;\n    const state = this.getParamsState(this.form?.value, options);\n    const params = this.getApiParams(state);\n    this.nodeService\n      .search(this.getParams(this.content, 'type'), params)\n      .subscribe(\n        (data) => {\n          this.updateList(data, this.form.value, options);\n          this.loading = false;\n          this.cd.detectChanges();\n        },\n        (error) => {\n          this.loading = false;\n          this.cd.detectChanges();\n        }\n      );\n  }\n\n  onSelectChange(options: any): void {\n    this.page = options.page;\n    this.nodeSearch(options);\n  }\n\n  onPageChange(page: any): void {\n    this.page = page - 1;\n    this.nodeSearch({ page: this.page });\n  }\n\n  updateList(data: any, formValues: any, options: any): void {\n    this.pager = this.handlerPager(data.pager);\n    this.nodes = data.rows.map((item: any) => {\n      const link = item.url;\n      const title = result(\n        item,\n        this.getValue(this.content, 'fields', 'title')\n      );\n      const subTitle = result(\n        item,\n        this.getValue(this.content, 'fields', 'subTitle')\n      );\n      const body = result(item, this.getValue(this.content, 'fields', 'body'));\n      return {\n        link: {\n          label: title,\n          href: link,\n        },\n        subTitle,\n        classes: this.content.shadow ? '' : 'card-no-shadow',\n        feature: {\n          fullIcon: 'fullscreen',\n          openIcon: 'open_in_new',\n          link,\n          ratios: this.content.ratios || 'media-4-3',\n          img: {\n            classes: 'object-fit',\n            src: item.image,\n            alt: title,\n          },\n        },\n        body,\n      };\n    });\n    this.routerService.updateQueryParams(this.getUrlQuery(formValues, options));\n    this.cd.detectChanges();\n  }\n\n  trackByFn(index: number, item: any): number {\n    return index;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dynamic-card-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "routerService",
                        "type": "RouteService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "routerService",
                        "type": "RouteService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"dynamic-card-list m-y\" *ngIf=\"content\">\n  <div class=\"container\">\n    <div class=\"inner\" fxLayout=\"row wrap\" fxFlex=\"100%\">\n      <app-search-sidebar *ngIf=\"content.sidebar\" [content]=\"content.sidebar\" [form]=\"form\" fxFlex.lt-md=\"0 0 100\"\n        fxFlex.gt-sm=\"0 0 25\">\n      </app-search-sidebar>\n      <div *ngIf=\"nodes\" class=\"card-list m-y\" fxLayout.lt-md=\"column\" fxLayout.gt-sm=\"row wrap\"\n        fxLayoutAlign=\"start start\" fxFlex.lt-md=\"0 0 100\" fxFlex.gt-sm=\"0 0 {{content.sidebar ? '75%':'100%'}}\">\n        <app-card class=\"m-x-xs m-bottom-sm\" fxFlex.gt-sm=\"{{row(content, '2rem')}}\" fxFlex.lt-md=\"100%\"\n          [content]=\"card\" *ngFor=\"let card of nodes | paginate: { itemsPerPage: pager.items_per_page, currentPage:\n          pager.current_page + 1, totalItems: pager.total_items}; trackBy: trackByFn\">\n        </app-card>\n        <div class=\"list-bottom width-100\">\n          <app-pagination *ngIf=\"nodes?.length;else empty\" (pageChange)=\"onPageChange($event)\"></app-pagination>\n          <ng-template #empty>\n            <div class=\"text-center p-y-xl\">\n              <p>没有数据。</p>\n            </div>\n          </ng-template>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "DynamicCombsComponent",
            "id": "component-DynamicCombsComponent-ea4f1e0ae232b77a726f5bb6acb53e4230d5e3c01e235455ab1583b216beb856ae862747491fab7a29160ec5404e73f35bda98f5c0ac948308b29f436d12bd85",
            "file": "src/app/uiux/combs/dynamic-combs/dynamic-combs/dynamic-combs.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dynamic-combs",
            "styleUrls": [
                "./dynamic-combs.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dynamic-combs.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-dynamic-combs',\n  templateUrl: './dynamic-combs.component.html',\n  styleUrls: ['./dynamic-combs.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DynamicCombsComponent implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dynamic-combs.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"content\">\n  <ng-container [ngSwitch]=\"content.type\">\n    <app-text *ngSwitchCase=\"'text'\" [content]=\"content\"></app-text>\n    <app-hero2v1 *ngSwitchCase=\"'hero-2v1'\" [content]=\"content\"></app-hero2v1>\n    <app-showcase1v1 *ngSwitchCase=\"'showcase-1v1'\" [content]=\"content\"></app-showcase1v1>\n    <app-showcase1v3 *ngSwitchCase=\"'showcase-1v3'\" [content]=\"content\"></app-showcase1v3>\n    <app-showcase2v1 *ngSwitchCase=\"'showcase-2v1'\" [content]=\"content\"></app-showcase2v1>\n    <app-showcase3v1 *ngSwitchCase=\"'showcase-3v1'\" [content]=\"content\"></app-showcase3v1>\n    <app-showcase3v2 *ngSwitchCase=\"'showcase-3v2'\" [content]=\"content\"></app-showcase3v2>\n    <app-showcase3v3 *ngSwitchCase=\"'showcase-3v3'\" [content]=\"content\"></app-showcase3v3>\n    <app-showcase4v1 *ngSwitchCase=\"'showcase-4v1'\" [content]=\"content\"></app-showcase4v1>\n    <app-carousel1v1 *ngSwitchCase=\"'carousel-1v1'\" [content]=\"content\"></app-carousel1v1>\n  </ng-container>\n</ng-container>\n"
        },
        {
            "name": "DynamicFormComponent",
            "id": "component-DynamicFormComponent-edf07063a65653dec17dfd10c123117b771d03aac324a83dc4c94d2c99dc72059e430439e93b88f973a5fbfcde3273a307d706f2becba1f0632510471461d6de",
            "file": "src/app/uiux/combs/other/dynamic-form/dynamic-form.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dynamic-form",
            "styleUrls": [
                "./dynamic-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dynamic-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "IAction[]",
                    "decorators": []
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "IControl[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "params",
                            "type": "IActionParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "IActionParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n  ChangeDetectorRef,\n  OnDestroy,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { IAction, IActionParams } from '@core/interface/IForm';\nimport { UserState } from '@core/mobx/user/UserState';\nimport { DialogService } from '@core/service/dialog.service';\nimport { FormService } from '@core/service/form.service';\nimport { NodeService } from '@core/service/node.service';\nimport { UtilitiesService } from '@core/service/utilities.service';\nimport { Router } from '@angular/router';\nimport { ScreenService } from '@core/service/screen.service';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { IControl } from '@core/interface/widgets/IControl';\n\n@Component({\n  selector: 'app-dynamic-form',\n  templateUrl: './dynamic-form.component.html',\n  styleUrls: ['./dynamic-form.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DynamicFormComponent implements OnInit, OnDestroy {\n  @Input() content: IControl[];\n  @Input() actions: IAction[];\n  loading = false;\n  form: FormGroup;\n\n  destroy$: Subject<boolean> = new Subject<boolean>();\n  constructor(\n    private cd: ChangeDetectorRef,\n    private dialogService: DialogService,\n    private formService: FormService,\n    private nodeService: NodeService,\n    private userState: UserState,\n    private utilitiesService: UtilitiesService,\n    private router: Router,\n    private screenService: ScreenService\n  ) {}\n\n  ngOnInit(): void {\n    if (this.screenService.isPlatformBrowser()) {\n      this.form = this.formService.toFormGroup(this.content);\n    }\n  }\n\n  onClick(params: IActionParams): void {\n    this.loading = true;\n    this.nodeService\n      .addNode(params.type, this.form.value, this.userState.csrfToken)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(\n        (res) => {\n          const link = this.nodeService.getNodePath(res.data.attributes);\n          this.loading = false;\n          this.utilitiesService.openSnackbar(params.snackMes || '成功发布！');\n          setTimeout(() => {\n            this.dialogService.closeDialog();\n            this.router.navigate([link]);\n          }, 2000);\n          this.cd.detectChanges();\n        },\n        () => {\n          this.loading = false;\n          console.log('Please check user state.');\n          this.cd.detectChanges();\n        }\n      );\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dynamic-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userState",
                        "type": "UserState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userState",
                        "type": "UserState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<form [formGroup]=\"form\">\n  <div *ngFor=\"let control of content\" class=\"form-row\">\n    <app-dynamic-form-control [control]=\"control\" [form]=\"form\"></app-dynamic-form-control>\n  </div>\n  <div class=\"action\" fxLayoutAlign=\"end center\">\n    <button *ngFor=\"let action of actions\" mat-raised-button color=\"{{action.color}}\" type=\"{{action.type}}\"\n      [disabled]=\"!form.valid\" (click)=\"onClick(action.params)\">\n      <div fxLayoutAlign=\"center center\">\n        <mat-spinner diameter=\"20\" color=\"accent\" *ngIf=\"loading\"></mat-spinner>\n        <span class=\"p-x-xs\">{{action.label}}</span>\n      </div>\n    </button>\n  </div>\n</form>\n"
        },
        {
            "name": "DynamicFormControlComponent",
            "id": "component-DynamicFormControlComponent-8fc4a9b0918bba0b5cb61d153adc7a40af0754e3dfd9ce027c370eae6f147a9c40fc5d0a6f9b47c2561772aadfb652d11349f60c4e6f4a9eab9f573d91b6837e",
            "file": "src/app/uiux/widgets/dynamic-form-control/dynamic-form-control.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dynamic-form-control",
            "styleUrls": [
                "./dynamic-form-control.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dynamic-form-control.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "IControl",
                    "decorators": []
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "FormGroup",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { IControl } from '@core/interface/widgets/IControl';\n\n@Component({\n  selector: 'app-dynamic-form-control',\n  templateUrl: './dynamic-form-control.component.html',\n  styleUrls: ['./dynamic-form-control.component.scss'],\n})\nexport class DynamicFormControlComponent implements OnInit {\n  @Input() control: IControl;\n  @Input() form: FormGroup;\n  constructor() {}\n\n  ngOnInit(): void {}\n  get isValid(): boolean {\n    return this.form.controls[this.control.key].valid;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  width: 100%;\n}\n",
                    "styleUrl": "./dynamic-form-control.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 17
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "isValid": {
                    "name": "isValid",
                    "getSignature": {
                        "name": "isValid",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 21
                    }
                }
            },
            "templateData": "<div [formGroup]=\"form\">\n  <label hidden [attr.for]=\"control.key\">{{control.label}}</label>\n  <div [ngSwitch]=\"control.type\" matTooltip=\"{{control.tooltip}}\"\n    [matTooltipPosition]=\"control.matTooltipPosition||'above'\">\n    <app-input *ngSwitchCase=\"'input'\" [content]=\"control\" [form]=\"form\"></app-input>\n    <app-textarea *ngSwitchCase=\"'textarea'\" [content]=\"control\" [form]=\"form\"></app-textarea>\n    <app-select *ngSwitchCase=\"'select'\" [content]=\"control\" [form]=\"form\"></app-select>\n    <app-checkbox *ngSwitchCase=\"'checkbox'\" [content]=\"control\" [form]=\"form\"></app-checkbox>\n    <app-terms-service *ngSwitchCase=\"'terms_of_service'\" [content]=\"control\" [form]=\"form\">\n    </app-terms-service>\n  </div>\n</div>\n"
        },
        {
            "name": "DynamicMediaListComponent",
            "id": "component-DynamicMediaListComponent-e3c3bddce59bbd3ed6e9ba5e255806a091d910607d64002302b920649c93a233a19fb03e9a158b9553d1f3b6a1fdba3a1f4f6b8fb35458e966dbc7d9ccdccd21",
            "file": "src/app/uiux/combs/list/dynamic-media-list/dynamic-media-list.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dynamic-media-list",
            "styleUrls": [
                "./dynamic-media-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dynamic-media-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "links",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "list",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "loading",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "nodeService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NodeService",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getContent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadContent",
                    "args": [
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateList",
                    "args": [
                        {
                            "name": "res",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "res",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApiParams",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getDeepValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getFormParams",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Params",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getParams",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getParamsState",
                    "args": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getUrlQuery",
                    "args": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "handlerPager",
                    "args": [
                        {
                            "name": "pager",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pager",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "initFormValueWithUrlQuery",
                    "args": [
                        {
                            "name": "query",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "controls",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "controls",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "row",
                    "args": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "padding",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'4rem'"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "padding",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'4rem'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n  ChangeDetectorRef,\n  OnDestroy,\n} from '@angular/core';\nimport { NodeService } from '@core/service/node.service';\nimport { ScreenService } from '@core/service/screen.service';\nimport { BaseComponent } from '@uiux/base/base.widget';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-dynamic-media-list',\n  templateUrl: './dynamic-media-list.component.html',\n  styleUrls: ['./dynamic-media-list.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DynamicMediaListComponent\n  extends BaseComponent\n  implements OnInit, OnDestroy\n{\n  @Input() content: any;\n  list: any;\n  links: any;\n  loading = true;\n\n  destroy$: Subject<boolean> = new Subject<boolean>();\n  constructor(\n    public nodeService: NodeService,\n    private screenService: ScreenService,\n    private cd: ChangeDetectorRef\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    if (this.screenService.isPlatformBrowser()) {\n      this.getContent();\n    }\n  }\n\n  getContent(): void {\n    const params = [\n      `include=${this.getParams(this.content, 'include')}`,\n      `sort=${this.getParams(this.content, 'sort')}`,\n      'jsonapi_include=1',\n      `page[limit]=${this.getParams(this.content, 'limit') || 20}`,\n    ].join('&');\n    const path = this.nodeService.apiUrlConfig.nodeGetPath;\n    this.nodeService\n      .getNodes(path, `${this.getParams(this.content, 'type')}`, params)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((res) => {\n        this.updateList(res);\n      });\n  }\n\n  updateList(res: any): void {\n    this.list = res.data.map((item: any) => {\n      const link = this.nodeService.getNodePath(item);\n      return {\n        title: {\n          label: item.title,\n          href: link,\n        },\n        spacer: 'none',\n        showImage: this.content.showImage || true,\n        feature: {\n          fullIcon: 'fullscreen',\n          openIcon: 'open_in_new',\n          link,\n          ratios: this.content.ratios || 'media-16-9',\n          img: {\n            classes: 'object-fit',\n            src: item.media?.thumbnail?.uri?.url,\n            alt: item.title,\n          },\n        },\n        date: item.changed,\n        category: item.category.name,\n        body: item.body.summary || item.body.value,\n        details: {\n          label: this.content.readMoreLabel || '查看更多',\n          href: link,\n          style: 'style-v1',\n          icon: 'open_in_new',\n        },\n      };\n    });\n    this.links = res.links;\n    this.loading = false;\n    this.cd.detectChanges();\n  }\n\n  loadContent(link: string): void {\n    this.loading = true;\n    this.nodeService\n      .getNodeByLink(link)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((res) => {\n        this.updateList(res);\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dynamic-media-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"dynamic-media-list m-y\" [ngClass]=\"content.params?.type\">\n  <div class=\"container\">\n    <div class=\"m-top-sm\" fxLayout.lt-md=\"column\" fxLayout.gt-sm=\"row\">\n      <div class=\"list\" fxFlex.lt-md=\"100\" fxFlex.gt-sm=\"75\">\n        <app-list [content]=\"list\" [links]=\"links\" [loading]=\"loading\" (pageChange)=\"loadContent($event)\">\n        </app-list>\n      </div>\n      <app-sidebar [ngClass.gt-sm]=\"'m-left-sm'\" *ngIf=\"content.sidebar\" fxFlex.lt-md=\"100\" fxFlex.gt-sm=\"25\"\n        [content]=\"content.sidebar\"></app-sidebar>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "DynamicTableComponent",
            "id": "component-DynamicTableComponent-e17dc7785cec4bd8fd5ab8a1324b6744e22a3e40d5b5980f2ad885d144ac220afe07122473541f15f9889ac329f5ab8bc8826499ed5926dc19e890ecc974226e",
            "file": "src/app/uiux/widgets/dynamic-table/dynamic-table.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dynamic-table",
            "styleUrls": [
                "./dynamic-table.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dynamic-table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "IDynamicTable",
                    "decorators": []
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "FormGroup",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "displayedColumns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDialog",
                    "args": [
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  OnInit,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { DialogComponent } from '../dialog/dialog.component';\nimport { IDynamicTable } from '../IWidgets';\nimport { TextComponent } from '../text/text.component';\n\n@Component({\n  selector: 'app-dynamic-table',\n  templateUrl: './dynamic-table.component.html',\n  styleUrls: ['./dynamic-table.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DynamicTableComponent implements OnInit {\n  @Input() content: IDynamicTable;\n  @Input() form: FormGroup;\n\n  displayedColumns: string[];\n\n  constructor(private dialog: MatDialog) {}\n\n  ngOnInit(): void {\n    if (this.content.elements) {\n      this.displayedColumns = this.content.header.map((item: any) => item.key);\n    }\n  }\n\n  onDialog(label: string, content: any): void {\n    this.dialog.open(DialogComponent, {\n      width: '600px',\n      data: {\n        renderInputComponent: TextComponent,\n        inputData: {\n          content: {\n            type: 'text',\n            spacer: 'none',\n            title: {\n              label,\n              style: 'style-v4',\n            },\n            body: content,\n          },\n        },\n      },\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".dynamic-table {\n  overflow-x: auto;\n  word-break: normal;\n  white-space: nowrap;\n  .mat-header-cell {\n    font-size: 16px;\n  }\n  .mat-cell {\n    line-height: 1.2;\n    ::ng-deep {\n      li {\n        list-style-type: none;\n      }\n    }\n  }\n  ::ng-deep {\n    .sub {\n      font-size: small;\n      opacity: 0.6;\n    }\n    .cell {\n      padding: 0 4px;\n    }\n    .text-cell {\n      > * {\n        &:last-child {\n          margin-bottom: 0;\n        }\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./dynamic-table.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"dynamic-table width-100\">\n  <table mat-table [dataSource]=\"content.elements | dataSource\" class=\"width-100\" aria-describedby=\"dynamic table\">\n    <ng-container [matColumnDef]=\"item.key\" *ngFor=\"let item of content.header\">\n      <th mat-header-cell *cdkHeaderCellDef class=\"{{item.classes}}\" [ngStyle]=\"item.style || {}\">\n        <span class=\"p-x-xs\" [innerHTML]=\"item.label\"></span>\n      </th>\n      <td mat-cell *cdkCellDef=\"let element\" class=\"{{item.classes}}\" [ngStyle]=\"item.style || {}\">\n        <ng-container *ngIf=\"element[item.key] | isArray;else object\">\n          <app-dynamic-widgets *ngFor=\"let item of element[item.key]\" class=\"cell\" [content]=\"item\" [form]=\"form\">\n          </app-dynamic-widgets>\n        </ng-container>\n        <ng-template #object>\n          <ng-container *ngIf=\"element[item.key] | isObject;else text\">\n            <app-dynamic-widgets class=\"cell\" [content]=\"element[item.key]\" [form]=\"form\">\n            </app-dynamic-widgets>\n          </ng-container>\n        </ng-template>\n        <ng-template #text>\n          <ng-container *ngIf=\"item.dialog && element[item.key];else normal\">\n            <span class=\"cell text-cell\"\n              [innerHTML]=\"element[item.key] | stripTags | shorten:item.dialog.shorten||10:'...'\"></span>\n            <a href=\"javascript:void(0)\" [innerHTML]=\"item.dialog.label\"\n              (click)=\"onDialog(item.label, element[item.key])\"></a>\n          </ng-container>\n          <ng-template #normal>\n            <span *ngIf=\"element[item.key]\" class=\"cell text-cell\" [innerHTML]=\"element[item.key]\"></span>\n          </ng-template>\n        </ng-template>\n      </td>\n    </ng-container>\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n  </table>\n</div>\n"
        },
        {
            "name": "DynamicTextListComponent",
            "id": "component-DynamicTextListComponent-f65382fc7454e3d5a23eeabfffa2c199179409ce018fd5207a7c1f39a45735acabcac9dd3dbb0369592bebc914a91e870f5cbb97daa0ccbc5c521e63e206feab",
            "file": "src/app/uiux/combs/list/dynamic-text-list/dynamic-text-list.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dynamic-text-list",
            "styleUrls": [
                "./dynamic-text-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dynamic-text-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "pageChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "destory$",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "links",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "lists",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "nodeService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NodeService",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getLists",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPageChange",
                    "args": [
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackByFn",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateList",
                    "args": [
                        {
                            "name": "res",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "res",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApiParams",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getDeepValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getFormParams",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Params",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getParams",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getParamsState",
                    "args": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getUrlQuery",
                    "args": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "handlerPager",
                    "args": [
                        {
                            "name": "pager",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pager",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "initFormValueWithUrlQuery",
                    "args": [
                        {
                            "name": "query",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "controls",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "controls",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "row",
                    "args": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "padding",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'4rem'"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "padding",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'4rem'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ChangeDetectorRef,\n  OnDestroy,\n  Inject,\n} from '@angular/core';\nimport { NodeService } from '@core/service/node.service';\nimport { ScreenService } from '@core/service/screen.service';\nimport { BaseComponent } from '@uiux/base/base.widget';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { CORE_CONFIG } from '@core/token/core.config';\nimport { ICoreConfig } from '@core/mobx/IAppConfig';\n\n@Component({\n  selector: 'app-dynamic-text-list',\n  templateUrl: './dynamic-text-list.component.html',\n  styleUrls: ['./dynamic-text-list.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DynamicTextListComponent\n  extends BaseComponent\n  implements OnInit, OnDestroy\n{\n  @Input() content: any;\n  @Output() pageChange: EventEmitter<string> = new EventEmitter();\n\n  lists: any[];\n  links: any;\n  loading: boolean;\n\n  destory$: Subject<boolean> = new Subject<boolean>();\n  constructor(\n    public nodeService: NodeService,\n    private screenService: ScreenService,\n    private cd: ChangeDetectorRef,\n    @Inject(CORE_CONFIG) private coreConfig: ICoreConfig\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    if (this.screenService.isPlatformBrowser()) {\n      this.getLists();\n    }\n  }\n\n  getLists(): void {\n    this.loading = true;\n    const path = this.nodeService.apiUrlConfig.nodeGetPath;\n    this.nodeService\n      .getNodes(\n        path,\n        `${this.getParams(this.content, 'type')}`,\n        `${this.getParams(this.content, 'options')}&sort=${this.getParams(\n          this.content,\n          'sort'\n        )}&page[limit]=20`\n      )\n      .pipe(takeUntil(this.destory$))\n      .subscribe((res) => {\n        this.updateList(res);\n      });\n  }\n\n  onPageChange(link: string): void {\n    this.screenService.gotoTop();\n    this.nodeService\n      .getNodeByLink(link)\n      .pipe(takeUntil(this.destory$))\n      .subscribe((res) => {\n        this.updateList(res);\n      });\n  }\n\n  updateList(res: any): void {\n    this.lists = res.data.map((item: any) => {\n      return {\n        picture: {\n          src: item.uid?.user_picture?.uri.url || this.coreConfig.defaultLogo,\n          alt: item.uid.name,\n        },\n        name: item.uid.name,\n        time: item.changed,\n        link: {\n          href: this.nodeService.getNodePath(item),\n          label: item.title,\n        },\n        count: item.answer.comment_count,\n      };\n    });\n    this.links = res.links;\n    this.loading = false;\n    this.cd.detectChanges();\n  }\n\n  trackByFn(index: number, item: any): number {\n    return index;\n  }\n\n  ngOnDestroy(): void {\n    this.destory$.next(true);\n    this.destory$.unsubscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".meta {\n  ::ng-deep img {\n    width: 30px;\n    height: 30px;\n    border-radius: 50%;\n  }\n}\n",
                    "styleUrl": "./dynamic-text-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "coreConfig",
                        "type": "ICoreConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "coreConfig",
                        "type": "ICoreConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"dynamic-text-list m-y\" *ngIf=\"content\">\n  <div class=\"container\">\n    <ngx-skeleton-loader *ngIf=\"loading\" count=\"20\" appearance=\"line\"></ngx-skeleton-loader>\n    <div class=\"item\" *ngFor=\"let item of lists; last as isLast; trackBy: trackByFn\">\n      <div class=\"meta m-bottom-xs\" fxLayoutAlign=\"start center\" fxLayoutGap=\"1rem\">\n        <app-img [content]=\"item.picture\"></app-img>\n        <div class=\"name text-lighter\">{{item.name}}</div>\n        <div class=\"time text-lighter\">{{item.time | date:'y-M-d'}}</div>\n      </div>\n      <h2 class=\"title mat-h2\">\n        <app-link [content]=\"item.link\"></app-link>\n      </h2>\n      <div class=\"action\">\n        <a [routerLink]=\"item.link.href\" mat-raised-button color=\"primary\">\n          <mat-icon>{{content?.action.icon}}</mat-icon>\n          {{content?.action?.label}}\n        </a>\n        <button class=\"m-left-xs text-lighter\" mat-button>\n          {{item.count}} 个人回答\n        </button>\n      </div>\n      <mat-divider *ngIf=\"!isLast\" class=\"m-y\"></mat-divider>\n    </div>\n    <app-pagination-simple (pageChange)=\"onPageChange($event)\" [links]=\"links\"></app-pagination-simple>\n  </div>\n</div>\n"
        },
        {
            "name": "DynamicWidgetsComponent",
            "id": "component-DynamicWidgetsComponent-728391c7a965fd9c28e3ef2f1fb0251a53a936902a471a3fd3f21c9dbbf9a25ad4bda5b1ea275ec2ae9be4410bc3708bde03b0b5a301054818cfc3f02b63fed7",
            "file": "src/app/uiux/widgets/dynamic-widgets/dynamic-widgets.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dynamic-widgets",
            "styleUrls": [
                "./dynamic-widgets.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dynamic-widgets.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "FormGroup",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'app-dynamic-widgets',\n  templateUrl: './dynamic-widgets.component.html',\n  styleUrls: ['./dynamic-widgets.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DynamicWidgetsComponent implements OnInit {\n  @Input() content: any;\n  @Input() data: any;\n  @Input() form: FormGroup;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dynamic-widgets.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 18
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"content\">\n  <ng-container [ngSwitch]=\"content.type\">\n    <app-bg *ngSwitchCase=\"'bg'\" [content]=\"content\"></app-bg>\n    <app-img *ngSwitchCase=\"'img'\" [content]=\"content\"></app-img>\n    <app-tab *ngSwitchCase=\"'tab'\" [content]=\"content\"></app-tab>\n    <app-box *ngSwitchCase=\"'box'\" [content]=\"content\"></app-box>\n    <app-btn *ngSwitchCase=\"'btn'\" [content]=\"content\"></app-btn>\n    <app-text *ngSwitchCase=\"'text'\" [content]=\"content\"></app-text>\n    <app-card *ngSwitchCase=\"'card'\" [content]=\"content\"></app-card>\n    <app-link *ngSwitchCase=\"'link'\" [content]=\"content\"></app-link>\n    <app-icon *ngSwitchCase=\"'icon'\" [content]=\"content\"></app-icon>\n    <app-flag *ngSwitchCase=\"'flag'\" [content]=\"content\"></app-flag>\n    <app-title *ngSwitchCase=\"'title'\" [content]=\"content\"></app-title>\n    <app-panel *ngSwitchCase=\"'panel'\" [content]=\"content\"></app-panel>\n    <app-share *ngSwitchCase=\"'share'\" [content]=\"content\"></app-share>\n    <app-swiper *ngSwitchCase=\"'swiper'\" [content]=\"content\"></app-swiper>\n    <app-bg-img *ngSwitchCase=\"'bg-img'\" [content]=\"content\"></app-bg-img>\n    <app-spinner *ngSwitchCase=\"'spinner'\" [content]=\"content\"></app-spinner>\n    <app-card1v1 *ngSwitchCase=\"'card-1v1'\" [content]=\"content\"></app-card1v1>\n    <app-card1v2 *ngSwitchCase=\"'card-1v2'\" [content]=\"content\"></app-card1v2>\n    <app-card1v3 *ngSwitchCase=\"'card-1v3'\" [content]=\"content\"></app-card1v3>\n    <app-calendar *ngSwitchCase=\"'calendar'\" [content]=\"content\"></app-calendar>\n    <app-textarea *ngSwitchCase=\"'textarea'\" [content]=\"content\" [form]=\"form\"></app-textarea>\n    <app-view-list *ngSwitchCase=\"'view-list'\" [content]=\"content\"></app-view-list>\n    <app-text-hero *ngSwitchCase=\"'text-hero'\" [content]=\"content\"></app-text-hero>\n    <app-menu-list *ngSwitchCase=\"'menu-list'\" [content]=\"content\"></app-menu-list>\n    <app-line-year *ngSwitchCase=\"'line-year'\" [content]=\"content\"></app-line-year>\n    <app-chip-list *ngSwitchCase=\"'chip-list'\" [content]=\"content\"></app-chip-list>\n    <app-input *ngSwitchCase=\"'input'\" [content]=\"content\" [form]=\"form\"></app-input>\n    <app-contact-us *ngSwitchCase=\"'contact-us'\" [content]=\"content\"></app-contact-us>\n    <app-media-list *ngSwitchCase=\"'media-list'\" [content]=\"content\"></app-media-list>\n    <app-select *ngSwitchCase=\"'select'\" [content]=\"content\" [form]=\"form\"></app-select>\n    <app-btn-animate *ngSwitchCase=\"'btn-animate'\" [content]=\"content\"></app-btn-animate>\n    <app-feature-box *ngSwitchCase=\"'feature-box'\" [content]=\"content\"></app-feature-box>\n    <app-content-box *ngSwitchCase=\"'content-box'\" [content]=\"content\"></app-content-box>\n    <app-font-change *ngSwitchCase=\"'font-change'\" [content]=\"content\"></app-font-change>\n    <app-testimonial *ngSwitchCase=\"'testimonial'\" [content]=\"content\"></app-testimonial>\n    <app-progress-bar *ngSwitchCase=\"'progress-bar'\" [content]=\"content\"></app-progress-bar>\n    <app-media-object *ngSwitchCase=\"'media-object'\" [content]=\"content\"></app-media-object>\n    <app-checkbox *ngSwitchCase=\"'checkbox'\" [content]=\"content\" [form]=\"form\"></app-checkbox>\n    <app-download *ngSwitchCase=\"'download'\" [content]=\"content\" [data]=\"data\"></app-download>\n    <app-dynamic-table *ngSwitchCase=\"'dynamic-table'\" [content]=\"content\"></app-dynamic-table>\n    <app-dropdown-menu *ngSwitchCase=\"'dropdown-menu'\" [content]=\"content\"></app-dropdown-menu>\n    <app-search-action *ngSwitchCase=\"'search-action'\" [content]=\"content\"></app-search-action>\n    <app-progress-group *ngSwitchCase=\"'progress-group'\" [content]=\"content\"></app-progress-group>\n    <app-datepicker *ngSwitchCase=\"'datepicker'\" [content]=\"content\" [form]=\"form\"></app-datepicker>\n    <app-inline-lightbox *ngSwitchCase=\"'inline-lightbox'\" [content]=\"content\"></app-inline-lightbox>\n    <app-media-object-group *ngSwitchCase=\"'media-object-group'\" [content]=\"content\"></app-media-object-group>\n    <app-content-text-center *ngSwitchCase=\"'content-text-center'\" [content]=\"content\"></app-content-text-center>\n    <app-text *ngSwitchDefault [content]=\"{'body':content}\"></app-text>\n  </ng-container>\n</ng-container>\n"
        },
        {
            "name": "FeatureBoxComponent",
            "id": "component-FeatureBoxComponent-89322c7382ce7f8bb5b2a93aef3f0127091a42d09f65b21e2c0cfde2cb9403802ade24c15d97f6b4c4a9e45a19f8840d8bace48b7c5f94bdddd2dc5932819a3e",
            "file": "src/app/uiux/widgets/feature-box/feature-box.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-feature-box",
            "styleUrls": [
                "./feature-box.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./feature-box.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "IFeatureBox",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "img",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "img",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { IFeatureBox } from '@core/interface/widgets/IFeatureBox';\nimport { Lightbox, LightboxConfig } from 'ngx-lightbox';\n@Component({\n  selector: 'app-feature-box',\n  templateUrl: './feature-box.component.html',\n  styleUrls: ['./feature-box.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FeatureBoxComponent implements OnInit {\n  @Input() content: IFeatureBox;\n  constructor(\n    private lightbox: Lightbox,\n    private lightboxConfig: LightboxConfig\n  ) {\n    this.lightboxConfig.disableScrolling = true;\n    this.lightboxConfig.centerVertically = true;\n    this.lightboxConfig.showRotate = true;\n  }\n\n  ngOnInit(): void {}\n\n  open(img: any): void {\n    this.lightbox.open([\n      {\n        src: img.src,\n        caption: img.alt || 'Lightbox',\n        thumb: img.src,\n      },\n    ]);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/theme/mixins/amixin\";\n.feature-inner {\n  position: relative;\n  &:before {\n    content: \"\";\n    height: 16px;\n    left: 10px;\n    position: absolute;\n    top: 10px;\n    width: 1px;\n    z-index: 1;\n    opacity: 0;\n    @include transition(all, 0.4s, ease);\n  }\n  &:after {\n    content: \"\";\n    height: 1px;\n    left: 10px;\n    position: absolute;\n    top: 10px;\n    width: 16px;\n    opacity: 0;\n    @include transition(all, 0.4s, ease);\n  }\n  .feature-inner-corners {\n    &:before {\n      content: \"\";\n      height: 16px;\n      right: 10px;\n      position: absolute;\n      bottom: 10px;\n      width: 1px;\n      z-index: 1;\n      opacity: 0;\n      @include transition(all, 0.4s, ease);\n    }\n    &:after {\n      content: \"\";\n      height: 1px;\n      right: 10px;\n      position: absolute;\n      bottom: 10px;\n      width: 16px;\n      opacity: 0;\n      @include transition(all, 0.4s, ease);\n    }\n  }\n  .feature-inner-btns {\n    position: absolute;\n    z-index: 1;\n    .mat-icon {\n      line-height: 40px;\n    }\n    @include middle-center();\n    > a {\n      display: inline-block;\n      height: 40px;\n      width: 40px;\n      line-height: 40px;\n      text-align: center;\n      font-size: 16px;\n      @include scale(0);\n      @include transition(all, 0.4s, ease);\n      @include border-radius(3px, 3px, 3px, 3px);\n      margin-right: 10px;\n      &:last-child {\n        margin-right: 0;\n      }\n    }\n  }\n  .feature-inner-ling {\n    position: relative;\n    display: block;\n    overflow: hidden;\n    border-top-left-radius: 2px;\n    border-top-right-radius: 2px;\n    &:before {\n      content: \"\";\n      height: 100%;\n      left: -15%;\n      position: absolute;\n      top: 0;\n      width: 130%;\n      @include transition(all, 0.4s, ease);\n    }\n    &:after {\n      width: 100%;\n      height: 100%;\n      position: absolute;\n      top: 0;\n      left: 0;\n      content: \"\";\n      opacity: 0;\n      @include transition(all, 0.4s, ease);\n    }\n  }\n  &:hover {\n    &:before,\n    &:after {\n      opacity: 1;\n      @include transition(all, 0.4s, ease);\n    }\n    .feature-inner-corners {\n      &:before,\n      &:after {\n        opacity: 1;\n        @include transition(all, 0.4s, ease);\n      }\n    }\n    .feature-inner-btns {\n      > a {\n        @include scale(1);\n        @include transition(all, 0.4s, ease);\n        &:hover {\n          z-index: 1;\n          @include transform(45deg, 1.3, 0, 0);\n          @include transition(all, 0.4s, ease);\n        }\n      }\n    }\n    .feature-inner-ling:after {\n      opacity: 0.8;\n      @include transition(all, 0.4s, ease);\n    }\n  }\n}\nimg {\n  width: 100%;\n  height: auto;\n}\n",
                    "styleUrl": "./feature-box.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "lightbox",
                        "type": "Lightbox",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "lightboxConfig",
                        "type": "LightboxConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "lightbox",
                        "type": "Lightbox",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lightboxConfig",
                        "type": "LightboxConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"feature-inner\" *ngIf=\"content\">\n  <div class=\"feature-inner-corners\">\n    <div class=\"feature-inner-btns\" *ngIf=\"content.hoverIcon;else noIcon\">\n      <a href=\"javascript:void(0)\" (click)=\"open(content.img)\" class=\"expand-image\" *ngIf=\"content.fullIcon\">\n        <mat-icon>{{content.fullIcon}}</mat-icon>\n      </a>\n      <a href=\"{{content.link}}\" class=\"icon-link\" *ngIf=\"content.openIcon\">\n        <mat-icon>{{content.openIcon}}</mat-icon>\n      </a>\n    </div>\n    <ng-template #noIcon>\n      <a *ngIf=\"content.link\" href=\"{{content.link}}\" class=\"feature-inner-btns width-100 height-100\"></a>\n    </ng-template>\n    <div class=\"feature-inner-ling\">\n      <div class=\"media\" [ngClass]=\"content.ratios || 'media-4-3'\">\n        <app-img *ngIf=\"content.img\" [content]=\"content.img\"></app-img>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "FixBarComponent",
            "id": "component-FixBarComponent-b2dcb3d4d36660218a7134cd1be9e13e527dfe65ce969e0a550ed9cfa9e677c0be549e28cc6490d5ca8c8c6f1628fef19f00eb4909903b4684cd88c68ec1c42c",
            "file": "src/app/core/branding/footer/fix-bar/fix-bar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-fix-bar",
            "styleUrls": [
                "./fix-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./fix-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-fix-bar',\n  templateUrl: './fix-bar.component.html',\n  styleUrls: ['./fix-bar.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FixBarComponent implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".fix-bar {\n  position: fixed;\n  bottom: 120px;\n  right: 20px;\n  z-index: 999;\n  border-radius: 2px;\n  box-shadow: 0 6px 15px 0 rgb(6 12 19 / 14%);\n  .label {\n    font-size: 12px;\n  }\n  .item {\n    position: relative;\n    padding: 8px;\n    line-height: 1.2;\n    width: 68px;\n    height: 68px;\n    &:hover {\n      ::ng-deep .fix-bar-popup {\n        display: block;\n      }\n    }\n  }\n  .item-popup {\n    cursor: pointer;\n  }\n}\n",
                    "styleUrl": "./fix-bar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"fix-bar\">\n  <div class=\"bar-inner\">\n    <ng-container *ngFor=\"let item of content\">\n      <ng-container [ngSwitch]=\"item.type\">\n        <div class=\"item\" [attr.id]=\"item.id\" *ngSwitchCase=\"'link'\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n          <a href=\"{{item.href}}\" target=\"{{item.target}}\">\n            <app-icon [content]=\"item.icon\"></app-icon>\n          </a>\n          <app-link class=\"label\" [content]=\"item\"></app-link>\n        </div>\n        <div class=\"item item-popup\" [attr.id]=\"item.id\" *ngSwitchCase=\"'popup'\" fxLayout=\"column\"\n          fxLayoutAlign=\"center center\">\n          <app-icon [content]=\"item.icon\"></app-icon>\n          <span class=\"label\">{{item.label}}</span>\n          <app-fix-bar-popup [content]=\"item.content\"></app-fix-bar-popup>\n        </div>\n      </ng-container>\n    </ng-container>\n  </div>\n</div>\n"
        },
        {
            "name": "FixBarPopupComponent",
            "id": "component-FixBarPopupComponent-f6025b925259991adaf8542ca4bb522162fbd0f1067aaf3b289c06e7cd9808dec80cb70a185011d1c97194d33b8b512e4ea1f36d7533ce16447f7b3bba841db9",
            "file": "src/app/core/branding/footer/fix-bar/fix-bar-popup/fix-bar-popup.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-fix-bar-popup",
            "styleUrls": [
                "./fix-bar-popup.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./fix-bar-popup.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-fix-bar-popup',\n  templateUrl: './fix-bar-popup.component.html',\n  styleUrls: ['./fix-bar-popup.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FixBarPopupComponent implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/theme/variable/breakpoint\";\n\n.fix-bar-popup {\n  position: absolute;\n  right: 68px;\n  bottom: 0;\n  display: none;\n  max-width: 300px;\n  max-height: 200px;\n  padding-right: 10px;\n  width: max-content;\n  .fix-bar-popup-content {\n    padding: 15px;\n    border-radius: 2px;\n    box-shadow: 0 6px 20px 2px rgb(0 0 0 / 18%);\n    overflow: hidden;\n  }\n  .arrow {\n    position: absolute;\n    right: 5px;\n    top: 50%;\n    width: 0;\n    height: 0;\n    border-top: 5px solid transparent;\n    border-left: 5px solid #fff;\n    border-bottom: 5px solid transparent;\n    font-size: 12px;\n  }\n  ::ng-deep .container {\n    padding: 0 !important;\n    max-width: none !important;\n  }\n  @media #{$lt-md} {\n    min-width: 60vw;\n  }\n}\n",
                    "styleUrl": "./fix-bar-popup.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"fix-bar-popup\" *ngIf=\"content\" [ngStyle]=\"content.style\">\n  <div class=\"fix-bar-popup-content\">\n    <app-text [content]=\"content\"></app-text>\n    <div class=\"arrow\"></div>\n  </div>\n</div>\n"
        },
        {
            "name": "FlagComponent",
            "id": "component-FlagComponent-ef77e65b1f33325d7dc9c9f080909d30d67611da9857eaee398b5239338d965185d426aff5ff80f48ff8c6e9e4871c53ef370428b243f1c12082f3f39533ee95",
            "file": "src/app/uiux/widgets/actions/flag/flag.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-flag",
            "styleUrls": [
                "./flag.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./flag.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "IFlag",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "flagging",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "nodeService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NodeService",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getFlagging",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPath",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFlag",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getApiParams",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getDeepValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getFormParams",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Params",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getParams",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getParamsState",
                    "args": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getUrlQuery",
                    "args": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "handlerPager",
                    "args": [
                        {
                            "name": "pager",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pager",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "initFormValueWithUrlQuery",
                    "args": [
                        {
                            "name": "query",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "controls",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "controls",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "row",
                    "args": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "padding",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'4rem'"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "padding",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'4rem'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  Input,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  OnDestroy,\n  Inject,\n} from '@angular/core';\nimport { NodeService } from '@core/service/node.service';\nimport { BaseComponent } from '@uiux/base/base.widget';\nimport { UserState } from '@core/mobx/user/UserState';\nimport { switchMap, takeUntil } from 'rxjs/operators';\nimport { ScreenService } from '@core/service/screen.service';\nimport { Subject } from 'rxjs';\nimport { IFlag } from '@core/interface/widgets/IFlag';\nimport { UtilitiesService } from '../../../../core/service/utilities.service';\nimport { CORE_CONFIG } from '@core/token/core.config';\nimport { ICoreConfig } from '@core/mobx/IAppConfig';\n\n@Component({\n  selector: 'app-flag',\n  templateUrl: './flag.component.html',\n  styleUrls: ['./flag.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FlagComponent extends BaseComponent implements OnInit, OnDestroy {\n  @Input() content: IFlag;\n  config: any;\n  flagging = false;\n\n  destroy$: Subject<boolean> = new Subject<boolean>();\n  constructor(\n    private cd: ChangeDetectorRef,\n    private screenService: ScreenService,\n    private userState: UserState,\n    public nodeService: NodeService,\n    private utiltiy: UtilitiesService,\n    @Inject(CORE_CONFIG) private coreConfig: ICoreConfig\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    if (this.screenService.isPlatformBrowser()) {\n      this.config = this.coreConfig?.actions?.flag;\n      if (this.config?.enable && this.userState.authenticated) {\n        this.getFlagging();\n      }\n    }\n  }\n\n  get flaggingParams(): any {\n    const params = [\n      `filter[uid.id]=${this.userState.currentUser.id}`,\n      `filter[entity_id]=${this.getDeepValue(\n        this.content,\n        'params.entity_id'\n      )}`,\n    ].join('&');\n    return params;\n  }\n\n  getFlagging(): void {\n    this.nodeService\n      .getNodes(\n        this.coreConfig.apiUrl.flaggingGetPath,\n        this.type,\n        this.flaggingParams,\n        this.userState.csrfToken\n      )\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((res) => {\n        if (res.data.length) {\n          this.flagging = true;\n          this.cd.detectChanges();\n        }\n      });\n  }\n\n  onFlag(): void {\n    if (!this.userState.authenticated) {\n      this.utiltiy.openSnackbar('请登录，再收藏！', 'x');\n      return;\n    }\n    if (!this.flagging) {\n      const data = {\n        data: {\n          type: this.getParams(this.content, 'type'),\n          attributes: {\n            entity_type: this.getParams(this.content, 'entity_type'),\n            entity_id: this.getParams(this.content, 'entity_id'),\n            global: false,\n          },\n          relationships: {\n            flagged_entity: {\n              data: {\n                type: this.getDeepValue(\n                  this.content,\n                  'params.relationships.flagged_entity.type'\n                ),\n                id: this.nodeId,\n              },\n            },\n            uid: {\n              data: {\n                type: 'user--user',\n                id: this.userState.currentUser.id,\n              },\n            },\n          },\n        },\n      };\n      this.nodeService\n        .flagging(this.path, JSON.stringify(data), this.userState.csrfToken)\n        .pipe(takeUntil(this.destroy$))\n        .subscribe((res) => {\n          this.flagging = true;\n          this.utiltiy.openSnackbar('已添加收藏！', 'x');\n          this.cd.detectChanges();\n        });\n    } else {\n      this.nodeService\n        .getNodes(\n          this.coreConfig.apiUrl.flaggingGetPath,\n          this.type,\n          this.flaggingParams\n        )\n        .pipe(\n          switchMap((res) => {\n            return this.nodeService.deleteFlagging(\n              this.path,\n              res.data,\n              this.userState.csrfToken\n            );\n          }),\n          takeUntil(this.destroy$)\n        )\n        .subscribe(() => {\n          this.flagging = false;\n          this.utiltiy.openSnackbar('已取消收藏！', 'x');\n          this.cd.detectChanges();\n        });\n    }\n  }\n\n  getPath(type: string): string {\n    return `/${type.replace('--', '/')}`;\n  }\n\n  get nodeId(): string {\n    return this.getDeepValue(\n      this.content,\n      'params.relationships.flagged_entity.id'\n    );\n  }\n\n  get path(): string {\n    return `/api/v1${this.getPath(this.getParams(this.content, 'type'))}`;\n  }\n\n  get type(): string {\n    return this.getParams(this.content, 'type').split('--')[1];\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "button {\n  ::ng-deep .mat-icon.mat-icon-inline {\n    width: 24px;\n  }\n}\n",
                    "styleUrl": "./flag.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userState",
                        "type": "UserState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utiltiy",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "coreConfig",
                        "type": "ICoreConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userState",
                        "type": "UserState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utiltiy",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "coreConfig",
                        "type": "ICoreConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "flaggingParams": {
                    "name": "flaggingParams",
                    "getSignature": {
                        "name": "flaggingParams",
                        "type": "any",
                        "returnType": "any",
                        "line": 53
                    }
                },
                "nodeId": {
                    "name": "nodeId",
                    "getSignature": {
                        "name": "nodeId",
                        "type": "string",
                        "returnType": "string",
                        "line": 151
                    }
                },
                "path": {
                    "name": "path",
                    "getSignature": {
                        "name": "path",
                        "type": "string",
                        "returnType": "string",
                        "line": 158
                    }
                },
                "type": {
                    "name": "type",
                    "getSignature": {
                        "name": "type",
                        "type": "string",
                        "returnType": "string",
                        "line": 162
                    }
                }
            },
            "templateData": "<button *ngIf=\"config?.enable\" (click)=\"onFlag()\" mat-button color=\"{{flagging?'primary':'default'}}\">\n  <app-icon [content]=\"config.icon\"></app-icon>\n  <span>{{flagging?'取消':''}}{{content.label}}</span>\n</button>\n"
        },
        {
            "name": "FontChangeComponent",
            "id": "component-FontChangeComponent-4a9f1668bc80cf30a81da6a52e13fe09557db290b6f98763c61855740da234724abf2affdabd9f264cb119e5e365905b998fe79ada27f884b926ead735b0361e",
            "file": "src/app/uiux/widgets/font-change/font-change.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-font-change",
            "styleUrls": [
                "./font-change.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./font-change.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "FormGroup",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'app-font-change',\n  templateUrl: './font-change.component.html',\n  styleUrls: ['./font-change.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FontChangeComponent implements OnInit {\n  constructor() {}\n  @Input() content: any;\n  @Input() form: FormGroup;\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".fontSize {\n  ::ng-deep .mat-form-field-infix {\n    width: 80px;\n  }\n}\n",
                    "styleUrl": "./font-change.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form *ngIf=\"content && content.enable\" class=\"fontSize\" [formGroup]=\"form\" fxLayoutAlign=\"end center\">\n  <app-dynamic-form-control [form]=\"form\" [control]=\"content.form[0]\"></app-dynamic-form-control>\n</form>\n"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-edf9265a68cb0ea6cd6eb93b91061b0bc67595125be55497d2c734a9549fbb9f99d3207289e44d8a1a52ae29e55225cbd9d1daf476780fb1aeb212ad33690d16",
            "file": "src/app/core/branding/footer/footer.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-footer",
            "styleUrls": [
                "./footer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "accordion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatAccordion",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatAccordion"
                        }
                    ]
                },
                {
                    "name": "branding",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BrandingState",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "goTop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'goTop'"
                        }
                    ]
                },
                {
                    "name": "panelOpenState",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "screen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScreenState",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "gotoTop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onScroll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Inject,\n  OnInit,\n  ViewChild,\n  ElementRef,\n  AfterViewInit,\n  OnDestroy,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { MatAccordion } from '@angular/material/expansion';\nimport { BrandingState } from '../../mobx/BrandingState';\nimport { ScreenState } from '../../mobx/screen/ScreenState';\nimport { ScreenService } from '@core/service/screen.service';\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterComponent implements OnInit, AfterViewInit, OnDestroy {\n  content: any;\n  panelOpenState = false;\n\n  @ViewChild(MatAccordion) accordion: MatAccordion;\n  @ViewChild('goTop') goTop: ElementRef;\n\n  constructor(\n    public screen: ScreenState,\n    private screenService: ScreenService,\n    public branding: BrandingState,\n    @Inject(DOCUMENT) private document: Document\n  ) {}\n\n  ngOnInit(): void {}\n\n  gotoTop(): void {\n    this.screenService.gotoTop();\n  }\n\n  onScroll(): void {\n    if (this.screenService.isPlatformBrowser()) {\n      this.screen.scroll$.subscribe(() => {\n        if (this.document.body.getBoundingClientRect().top < -100) {\n          this.goTop.nativeElement.style.bottom = '7rem';\n        } else {\n          this.goTop.nativeElement.style.bottom = '-10rem';\n        }\n      });\n    }\n  }\n\n  ngAfterViewInit(): void {\n    this.onScroll();\n  }\n\n  ngOnDestroy(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/theme/variable/variable\";\n\n.footer {\n  position: relative;\n\n  a {\n    &:hover,\n    &:focus {\n      text-decoration: none;\n    }\n  }\n}\n\n#go-to-top {\n  z-index: 99999;\n  text-align: center;\n  width: 43px;\n  height: 43px;\n  padding: 8px 4px;\n  position: fixed;\n  bottom: -10rem;\n  right: 2rem;\n  cursor: pointer;\n  overflow: hidden;\n  border-radius: 3px;\n  transition: all 0.4s ease-in;\n  box-sizing: border-box;\n}\n",
                    "styleUrl": "./footer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "screen",
                        "type": "ScreenState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "branding",
                        "type": "BrandingState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "screen",
                        "type": "ScreenState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "branding",
                        "type": "BrandingState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"footer\" *ngIf=\"branding.ready\">\n  <app-light *ngIf=\"branding.footer?.params?.mode === 'light' \" [content]=\"branding.footer\"></app-light>\n  <app-inverse *ngIf=\"branding.footer?.params?.mode === 'inverse' \" [content]=\"branding.footer\">\n  </app-inverse>\n  <app-space-between *ngIf=\"branding.footer?.params?.mode === 'space-betwenn' \" [content]=\"branding.footer\">\n  </app-space-between>\n  <app-fix-bar [content]=\"branding.footer.fixBar\" *ngIf=\"branding.footer?.fixBar\"></app-fix-bar>\n  <div id=\"go-to-top\" #goTop (click)=\"gotoTop()\">\n    <mat-icon>expand_less</mat-icon>\n  </div>\n</div>\n"
        },
        {
            "name": "FullCalendarComponent",
            "id": "component-FullCalendarComponent-f2163a6d437d7e903c779eeb301cf078636735757f5b0b59d5ff41dd6131198589c5b74f542e9ab58607aa88e3e777bbc718168e33071e29010fbf76f0bf384d",
            "file": "src/app/uiux/combs/calendar/full-calendar/full-calendar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-full-calendar",
            "styleUrls": [
                "./full-calendar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./full-calendar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CalendarOptions",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | null",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "theme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "viewApi",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewApi",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "visiable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getEvents",
                    "args": [
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleDates",
                    "args": [
                        {
                            "name": "dates",
                            "type": "DatesSetArg",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dates",
                            "type": "DatesSetArg",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initCalendar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getApiParams",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getDeepValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getFormParams",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Params",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getParams",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getParamsState",
                    "args": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getUrlQuery",
                    "args": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "handlerPager",
                    "args": [
                        {
                            "name": "pager",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pager",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "initFormValueWithUrlQuery",
                    "args": [
                        {
                            "name": "query",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "controls",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "controls",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "row",
                    "args": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "padding",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'4rem'"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "padding",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'4rem'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ScreenService } from '@core/service/screen.service';\nimport { FormService } from '@core/service/form.service';\nimport { NodeService } from '@core/service/node.service';\nimport { BaseComponent } from '@uiux/base/base.widget';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  map,\n  takeUntil,\n} from 'rxjs/operators';\nimport { EMPTY, Subject } from 'rxjs';\nimport {\n  CalendarOptions,\n  DatesSetArg,\n  EventApi,\n  ViewApi,\n} from '@fullcalendar/angular';\nimport { CalendarState } from '@core/mobx/CalendarState';\nimport { formatDate } from '@angular/common';\n\n@Component({\n  selector: 'app-full-calendar',\n  templateUrl: './full-calendar.component.html',\n  styleUrls: ['./full-calendar.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FullCalendarComponent\n  extends BaseComponent\n  implements OnInit, OnDestroy\n{\n  @Input() content: any;\n  selected: Date | null;\n  options: CalendarOptions;\n  theme: any;\n  form: FormGroup;\n  loading: boolean;\n  visiable = false;\n  viewApi: ViewApi;\n  destroy$: Subject<boolean> = new Subject<boolean>();\n\n  constructor(\n    private cd: ChangeDetectorRef,\n    private formService: FormService,\n    private screenService: ScreenService,\n    private nodeService: NodeService,\n    private calendarState: CalendarState\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    if (this.screenService.isPlatformBrowser()) {\n      this.initForm();\n      this.getEvents();\n    }\n  }\n\n  initCalendar(): void {\n    this.options = Object.assign(\n      this.calendarState.default,\n      this.content.calendar.option,\n      {\n        datesSet: this.handleDates.bind(this),\n      }\n    );\n    this.theme = this.content?.calendar?.theme || {};\n    this.cd.detectChanges();\n  }\n\n  initForm(): void {\n    const calendarForm: any[] = [\n      {\n        key: 'date',\n        value: '',\n      },\n      {\n        key: 'date-type',\n      },\n    ];\n    this.form = this.formService.toFormGroup(\n      calendarForm.concat(this.content.sidebar)\n    );\n    this.form.valueChanges\n      .pipe(\n        map((data) => {\n          if (Object.keys(data).includes('datepicker') && data.datepicker) {\n            this.viewApi.calendar.changeView('timeGridDay', data.datepicker);\n            this.form.controls.datepicker.setValue('');\n            return EMPTY;\n          }\n          return data;\n        }),\n        debounceTime(1000),\n        distinctUntilChanged(),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((value) => {\n        if (value) {\n          this.getEvents(value);\n        }\n      });\n  }\n\n  getEvents(options?: any): void {\n    const state = this.getParamsState(this.form.value, options);\n    const params = this.getApiParams(state);\n    const api = this.content?.calendar?.options?.api;\n    this.initCalendar();\n    if (api || params || this.options?.events) {\n      this.loading = true;\n      this.nodeService.search(api, params).subscribe((data) => {\n        if (this.options) {\n          this.options.events = data.map((item: any) => {\n            // events attr see EventApi\n            const type = item.type;\n            const event = item.event;\n            return {\n              title: item.label,\n              event,\n              type,\n              start: item.date,\n              url: item.url,\n              end: item.end || null,\n              user: item.user,\n              className: `${this.theme[type]} ${this.theme[event]} type-${type} event-${event}`,\n              // custom event style bg, border\n            };\n          });\n          this.visiable = true;\n          this.loading = false;\n          this.cd.detectChanges();\n        }\n      });\n    }\n  }\n\n  handleDates(dates: DatesSetArg): void {\n    this.viewApi = dates.view;\n    switch (dates.view.type) {\n      case 'dayGridMonth':\n        this.form.patchValue({\n          'date-type': 'month',\n          date: `${formatDate(dates.view.currentStart, 'y-MM-dd', 'en-US')}`,\n        });\n        break;\n\n      case 'timeGridWeek':\n        const endDate = this.calendarState.getPreviousDay(dates.end);\n        console.log(endDate);\n        this.form.patchValue({\n          'date-type': 'week',\n          date: `${formatDate(dates.startStr, 'y-MM-dd', 'en-US')}`,\n        });\n        break;\n\n      case 'timeGridDay':\n        this.form.patchValue({\n          'date-type': 'day',\n          date: formatDate(dates.startStr, 'y-MM-dd', 'en-US'),\n        });\n        break;\n\n      case 'listWeek':\n        this.form.patchValue({\n          'date-type': 'week',\n          date: `${formatDate(dates.startStr, 'y-MM-dd', 'en-US')}`,\n        });\n        break;\n\n      default:\n        this.getEvents({ 'date-type': 'month' });\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".main {\n  border-radius: 20px;\n}\n",
                    "styleUrl": "./full-calendar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "calendarState",
                        "type": "CalendarState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "calendarState",
                        "type": "CalendarState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"full-calendar position-relative\" *ngIf=\"content\">\n  <div class=\"container\">\n    <div class=\"inner p-y\" fxLayout=\"row wrap\">\n      <div class=\"sidebar p-x-sm\" fxFlex.gt-sm=\"25\" fxFlex.lt-md=\"100\">\n        <app-dynamic-widgets [content]=\"item\" [form]=\"form\" *ngFor=\"let item of content.sidebar\"></app-dynamic-widgets>\n      </div>\n      <div class=\"main p-x-sm p-y-sm\" fxFlex.gt-sm=\"75\" fxFlex.lt-md=\"100\">\n        <div class=\"calendar width-100\">\n          <app-calendar *ngIf=\"visiable\" [content]=\"content.calendar.options\" [loading]=\"loading\" [options]=\"options\">\n          </app-calendar>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "HeaderBannerComponent",
            "id": "component-HeaderBannerComponent-e68140c8146e75742f7dc4d85f9ac96f8e5d183009e9237e4ab6f3364a4527aaef84cd1b4667074520d1339db6e8cead61505ae865423cb2c800d05c07983615",
            "file": "src/app/core/branding/header/header-banner/header-banner.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header-banner",
            "styleUrls": [
                "./header-banner.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header-banner.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-header-banner',\n  templateUrl: './header-banner.component.html',\n  styleUrls: ['./header-banner.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HeaderBannerComponent implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host ::ng-deep {\n  sup {\n    font-size: 16px;\n    top: -40px;\n  }\n}\n",
                    "styleUrl": "./header-banner.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"header-banner position-relative\">\n  <app-dynamic-combs [content]=\"content\"></app-dynamic-combs>\n</div>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-a557eec14f72c438a8033301f4d6ce023e0a1844a3b06ec2b38794a612acc31735ae78a5ee10071b230c8c20d699eb914554e69d07ade54adb371da8efb464cc",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n\n.welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-84e6fd76ae851de27dfeeca8adc6fa4176d17b619e1536b24d4ff9e52bda2a0106add4f1df74e61df0ce3bb0dfc308f417f2e20800eef5e74d15e320d36a4384-1",
            "file": "src/app/core/branding/header/header.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "appState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AppState",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "branding",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BrandingState",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'header', {read: ElementRef}"
                        }
                    ]
                },
                {
                    "name": "menu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'menu', {read: ElementRef}"
                        }
                    ]
                },
                {
                    "name": "screen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScreenState",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "screenService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScreenService",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "screenState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScreenState",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showBanner",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "sticky",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "initBanner",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "listenSticky",
                    "args": [
                        {
                            "name": "state",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "windowScroll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  ViewChild,\n  ElementRef,\n  AfterViewInit,\n  Inject,\n  OnDestroy,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { ScreenService } from '../../service/screen.service';\nimport { ScreenState } from '../../mobx/screen/ScreenState';\nimport { BrandingState } from '../../mobx/BrandingState';\nimport { AppState } from '../../mobx/AppState';\nimport { DOCUMENT } from '@angular/common';\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HeaderComponent implements OnInit, AfterViewInit, OnDestroy {\n  sticky = false;\n  showBanner: boolean;\n\n  @ViewChild('header', { read: ElementRef }) header: ElementRef;\n  @ViewChild('menu', { read: ElementRef }) menu: ElementRef;\n\n  constructor(\n    public screenService: ScreenService,\n    public screenState: ScreenState,\n    public branding: BrandingState,\n    public appState: AppState,\n    public screen: ScreenState,\n    private cd: ChangeDetectorRef,\n    @Inject(DOCUMENT) private doc: Document\n  ) {}\n\n  ngOnInit(): void {}\n\n  ngAfterViewInit(): void {\n    if (this.screenService.isPlatformBrowser()) {\n      this.screenState.scroll$.subscribe(() => {\n        this.sticky = this.screenService.isElementOutTopViewport(\n          this.menu.nativeElement\n        );\n        this.cd.detectChanges();\n        this.listenSticky(this.sticky);\n        if (this.appState?.pageConfig?.headerMode?.transparent) {\n          this.windowScroll();\n        }\n      });\n      this.initBanner();\n    }\n  }\n\n  listenSticky(state: boolean): void {\n    if (state) {\n      this.screenState.stickyMenu$.next(true);\n    } else {\n      this.screenState.stickyMenu$.next(false);\n    }\n  }\n\n  windowScroll(): void {\n    const style = this.appState.pageConfig.headerMode.style;\n    if (\n      this.doc.body.scrollTop > 50 ||\n      this.doc.documentElement.scrollTop > 50\n    ) {\n      this.header.nativeElement.classList.add('header-sticky');\n      this.header.nativeElement.classList.remove(style);\n    } else {\n      this.header.nativeElement.classList.remove('header-sticky');\n      this.header.nativeElement.classList.add(style);\n    }\n  }\n\n  initBanner(): void {\n    const banner = this.branding.header.banner;\n    if (!banner) {\n      this.showBanner = false;\n    } else {\n      this.screenState.mqAlias$().subscribe((mq) => {\n        this.showBanner = mq.includes(banner.breakpoint || 'gt-md');\n        this.cd.detectChanges();\n      });\n    }\n  }\n\n  ngOnDestroy(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".static {\n  position: relative;\n  z-index: 1001;\n}\n\n.sticky {\n  position: fixed;\n  left: 0;\n  top: 0;\n  right: 0;\n  opacity: 0;\n  transition: transform 0ms 0ms cubic-bezier(0.4, 0, 0.6, 1), opacity 0s 300ms;\n  z-index: 9990;\n  transform: translateY(-70px);\n}\n\n.sticking {\n  position: fixed;\n  opacity: 1;\n  transform: translateY(0);\n  transition: transform 300ms 300ms cubic-bezier(0.4, 0, 0.2, 1),\n    opacity 0ms 300ms, background-color 150ms 0ms cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.transparent-mode {\n  position: fixed;\n  right: 0;\n  left: 0;\n  top: 0;\n  z-index: 9999;\n  border: 0;\n  -webkit-transition: all 0.5s ease;\n  transition: all 0.5s ease;\n}\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screenState",
                        "type": "ScreenState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "branding",
                        "type": "BrandingState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appState",
                        "type": "AppState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screen",
                        "type": "ScreenState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "doc",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screenState",
                        "type": "ScreenState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "branding",
                        "type": "BrandingState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appState",
                        "type": "AppState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screen",
                        "type": "ScreenState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "doc",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnDestroy"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<ng-container *ngIf=\"branding?.ready\">\n  <header *ngIf=\"!appState.pageConfig?.headerMode?.transparent;else transparent\">\n    <div class=\"static\" [class.header-inverse]=\"branding.isInverse\">\n      <app-header-banner *ngIf=\"showBanner\" [content]=\"branding.header.banner\">\n      </app-header-banner>\n      <app-header-top *ngIf=\"branding.header?.top\" [content]=\"branding.header.top\"></app-header-top>\n      <app-menu #menu [content]=\"branding.header\"></app-menu>\n    </div>\n    <app-menu class=\"sticky\" [class.sticking]=\"sticky\" [class.header-inverse]=\"branding.isInverse\"\n      [content]=\"branding.header\"></app-menu>\n  </header>\n  <ng-template #transparent>\n    <header #header class=\"transparent-mode\" [class.header-inverse]=\"branding.isInverse\"\n      [ngClass]=\"appState.pageConfig.headerMode.style\">\n      <div class=\"static\">\n        <app-header-top *ngIf=\"branding.header?.top\" [content]=\"branding.header.top\"></app-header-top>\n        <app-menu #menu [content]=\"branding.header\"></app-menu>\n      </div>\n    </header>\n  </ng-template>\n</ng-container>\n"
        },
        {
            "name": "HeaderTopComponent",
            "id": "component-HeaderTopComponent-db7ce49457f4646c3b7af4437c765644804e44c5b17f5ea160e6a5750765dc1c97db309c7e2666d230df3a5162b9a2bbcd62dd1d7e0215c125f16873674da909",
            "file": "src/app/core/branding/header/header-top/header-top.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header-top",
            "styleUrls": [
                "./header-top.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header-top.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "showNoXs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { ScreenState } from '@core/mobx/screen/ScreenState';\nimport { ScreenService } from '@core/service/screen.service';\n\n@Component({\n  selector: 'app-header-top',\n  templateUrl: './header-top.component.html',\n  styleUrls: ['./header-top.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HeaderTopComponent implements OnInit {\n  @Input() content: any;\n  showNoXs: boolean;\n  constructor(\n    private screen: ScreenState,\n    private screenService: ScreenService,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    if (this.screenService.isPlatformBrowser()) {\n      this.screen.mqAlias$().subscribe((mq) => {\n        this.showNoXs = mq.includes('gt-xs');\n        this.cd.detectChanges();\n      });\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/theme/mixins/amixin\";\n.header-top {\n  padding: 3px 0;\n}\n.hotline {\n  .item {\n    font-size: 13px;\n    .mat-icon {\n      margin-right: 5px;\n    }\n  }\n}\n.inv-icon {\n  &.style-v1 {\n    display: inline-block;\n    font-size: 14px;\n    height: 32px;\n    line-height: 34px;\n    outline: medium none;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    width: 32px;\n    z-index: 1;\n    @include transition(all, 0.4s, ease);\n    span.soc-name {\n      opacity: 0;\n      display: block;\n      font-size: 12px;\n      height: 32px;\n      left: 14px;\n      line-height: 31px;\n      position: absolute;\n      top: 0;\n      z-index: 0;\n      white-space: nowrap;\n      font-style: italic;\n      @include transition(all, 0.4s, ease);\n      @include border-radius(5px, 5px, 5px, 5px);\n      &:before,\n      &:after {\n        content: \"\";\n        display: block;\n        height: 32px;\n        position: absolute;\n        top: 0;\n        width: 32px;\n        z-index: -1;\n        @include transition(all, 0.4s, ease);\n        @include border-radius(3px, 3px, 3px, 3px);\n      }\n      &:before {\n        left: -14px;\n      }\n      &:after {\n        right: -12px;\n        @include transition(all, 0.4s, ease);\n      }\n    }\n    span.soc-icon-bg {\n      @include border-radius(3px, 3px, 3px, 3px);\n      display: block;\n      content: \"\";\n      width: 32px;\n      height: 32px;\n      line-height: 32px;\n      position: absolute;\n      top: 0;\n      left: 0;\n      z-index: 1;\n      opacity: 0;\n      @include border-radius(3px, 3px, 3px, 3px);\n      @include transition(all, 0.4s, ease);\n    }\n    .mat-icon {\n      position: relative;\n      z-index: 1;\n      width: 14px;\n      height: 14px;\n    }\n    &:hover {\n      z-index: 10;\n\n      span.soc-name {\n        width: auto;\n        padding-left: 28px;\n        opacity: 1;\n        white-space: nowrap;\n        @include transition(all, 0.4s, ease);\n      }\n      span.soc-icon-bg {\n        top: 0px;\n        left: 0px;\n        opacity: 1;\n      }\n    }\n    &:last-child {\n      > span.soc-name {\n        right: 11px;\n        left: auto;\n        &:before {\n          display: none;\n        }\n      }\n      &:hover > span.soc-name {\n        padding-left: 12px;\n        padding-right: 28px;\n      }\n    }\n  }\n}\n\n.right {\n  .link {\n    margin-right: 24px;\n    ::ng-deep a {\n      font-size: 12px;\n    }\n  }\n}\n",
                    "styleUrl": "./header-top.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "screen",
                        "type": "ScreenState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "screen",
                        "type": "ScreenState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"showNoXs\">\n  <div class=\"header-top\" *ngIf=\"content\">\n    <div class=\"container\">\n      <div fxLayoutAlign=\"space-between center\">\n        <div class=\"left\">\n          <div class=\"hotline\" fxLayout fxLayoutGap=\"2rem\">\n            <div class=\"item\" fxLayout *ngFor=\"let item of content.banner?.left\">\n              <mat-icon [inline]=\"true\">{{item.icon}}</mat-icon>\n              <div>{{item.label}}</div>\n            </div>\n          </div>\n        </div>\n        <div class=\"right\">\n          <ng-container *ngFor=\"let item of content.banner?.right\">\n            <a class=\"inv-icon style-v1\" *ngIf=\"item?.svg;else link\" href=\"{{item.href}}\" target=\"_blank\">\n              <span class=\"soc-name\">{{item.label}}</span>\n              <span class=\"soc-icon-bg\"></span>\n              <mat-icon [inline]=\"true\" [svgIcon]=\"item.svg\"></mat-icon>\n            </a>\n            <ng-template #link>\n              <app-link class=\"link\" [content]=\"item\"></app-link>\n            </ng-template>\n          </ng-container>\n\n        </div>\n      </div>\n    </div>\n  </div>\n</ng-container>\n"
        },
        {
            "name": "Hero1v1Component",
            "id": "component-Hero1v1Component-e61b1d60ba5bbb48b40c2f13dee10ac546265e38d1df80a1307b8510962cfbea3508cd9363466b585c0085e75a69674e2b5a6f3e15076cf0b5cb857a4ef6b1fb",
            "file": "src/app/uiux/combs/hero/hero1v1/hero1v1.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-hero1v1",
            "styleUrls": [
                "./hero1v1.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./hero1v1.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-hero1v1',\n  templateUrl: './hero1v1.component.html',\n  styleUrls: ['./hero1v1.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class Hero1v1Component implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/theme/variable/breakpoint\";\n.hero-1-v1 {\n  height: calc(100vh - 50px);\n  overflow: hidden;\n  ::ng-deep {\n    .swiper-container {\n      position: absolute;\n      left: 0;\n      top: 0;\n      width: 100%;\n      height: 100%;\n    }\n    .position-relative {\n      position: static;\n    }\n    .base-text {\n      padding: 0 2rem;\n    }\n  }\n  @media #{$gt-sm} {\n    height: calc(100vh - 110px);\n    min-height: 700px;\n    ::ng-deep {\n      .base-text {\n        overflow: visible;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./hero1v1.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"hero-1-v1 position-relative\" *ngIf=\"content\" [ngClass]=\"content.classes\">\n  <a class=\"anchor\" *ngIf=\"content.id\" [id]=\"content.id\"></a>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n  <div class=\"container\">\n    <app-swiper [content]=\"content.sliders\"></app-swiper>\n  </div>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n</div>\n"
        },
        {
            "name": "Hero1v2Component",
            "id": "component-Hero1v2Component-4c2f014a5c7db9479e4d8a28a4ea72f040a3740564f0bbdc4b186c76ab070cae608f7961d1a162665e3b4db93b5fdb3462f0584ddbfe3f81c72c3b5e641f96df",
            "file": "src/app/uiux/combs/hero/hero1v2/hero1v2.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-hero1v2",
            "styleUrls": [
                "./hero1v2.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./hero1v2.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "defaultConfig",
                    "defaultValue": "{\n    navigation: {\n      nextEl: '.swiper-button-next',\n      prevEl: '.swiper-button-prev',\n    },\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SwiperConfigInterface",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "mediaConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SwiperConfigInterface",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "textConfig",
                    "defaultValue": "{\n    slidesPerView: 1,\n    autoplay: true,\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SwiperConfigInterface",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { SwiperConfigInterface } from 'ngx-swiper-wrapper';\n\n@Component({\n  selector: 'app-hero1v2',\n  templateUrl: './hero1v2.component.html',\n  styleUrls: ['./hero1v2.component.scss'],\n})\nexport class Hero1v2Component implements OnInit {\n  @Input() content: any;\n  index: number;\n  mediaConfig: SwiperConfigInterface;\n  defaultConfig: SwiperConfigInterface = {\n    navigation: {\n      nextEl: '.swiper-button-next',\n      prevEl: '.swiper-button-prev',\n    },\n  };\n\n  textConfig: SwiperConfigInterface = {\n    slidesPerView: 1,\n    autoplay: true,\n  };\n  constructor() {}\n\n  ngOnInit(): void {\n    this.setConfig();\n  }\n\n  setConfig(): void {\n    this.mediaConfig = Object.assign(\n      this.defaultConfig,\n      this.content.sliders.params\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../../theme/variable/breakpoint\";\n.swiper-media {\n  width: 100%;\n  .swiper-button-next,\n  .swiper-button-prev {\n    width: 40px;\n    height: 40px;\n    box-sizing: border-box;\n    &:after {\n      font-size: 16px;\n    }\n  }\n  .swiper-button-next {\n    left: 80px;\n    bottom: 20px;\n    top: auto;\n  }\n  .swiper-button-prev {\n    left: 20px;\n    bottom: 20px;\n    top: auto;\n  }\n  .swiper-pagination {\n    text-align: right;\n    padding-right: 20px;\n    box-sizing: border-box;\n  }\n}\n.swiper-text {\n  .title {\n    font-size: 36px;\n    line-height: 42px;\n  }\n}\n\n@media #{$gt-xs} {\n  .swiper-media {\n    position: relative;\n    top: 75px;\n    width: 66%;\n    margin: 0 0 0 34%;\n  }\n  .swiper-text {\n    position: absolute;\n    z-index: 2;\n    width: 50%;\n    bottom: 0;\n  }\n}\n",
                    "styleUrl": "./hero1v2.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 23
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"hero-1-v2 position-relative p-top-xl\" ngClass.gt-sm=\"m-bottom-xl\" *ngIf=\"content\">\n  <app-bg-img [content]=\"content.bg\"></app-bg-img>\n  <div class=\"container position-relative\">\n    <div class=\"swiper-media\">\n      <div #media class=\"swiper-container\" [swiper]=\"mediaConfig\" [(index)]=\"index\">\n        <div class=\"swiper-wrapper\">\n          <div class=\"swiper-slide\" *ngFor=\"let slide of content.sliders.elements\">\n            <app-img [content]=\"slide.img\"></app-img>\n          </div>\n        </div>\n        <div class=\"swiper-pagination\"></div>\n        <div class=\"swiper-button-prev\"></div>\n        <div class=\"swiper-button-next\"></div>\n      </div>\n    </div>\n    <div class=\"swiper-text p-y-sm p-x-sm\">\n      <div #text class=\"swiper-container\" [swiper]=\"textConfig\" [(index)]=\"index\">\n        <div class=\"swiper-wrapper\">\n          <div class=\"swiper-slide\" *ngFor=\"let slide of content.sliders.elements\">\n            <h2 class=\"title\" [innerHTML]=\"slide.title\"></h2>\n            <app-btn [content]=\"slide.btn\"></app-btn>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "Hero2v1Component",
            "id": "component-Hero2v1Component-59369568f329841f8e9cfa07fc7b028e7195df5c48f7214103d71c6a11b519e2e473bcb82f67f688b908e3ab816d1bcb2f1616c8096c1c7349567e3bd6064f41",
            "file": "src/app/uiux/combs/hero/hero2v1/hero2v1.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-hero2v1",
            "styleUrls": [
                "./hero2v1.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./hero2v1.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { ScreenState } from '@core/mobx/screen/ScreenState';\n\n@Component({\n  selector: 'app-hero2v1',\n  templateUrl: './hero2v1.component.html',\n  styleUrls: ['./hero2v1.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class Hero2v1Component implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/theme/variable/breakpoint\";\n.hero-2-v1 {\n  overflow: hidden;\n  ::ng-deep .base-text {\n    overflow: visible;\n    position: static;\n  }\n  @media #{$lt-md} {\n    min-height: 600px;\n    height: 80vh;\n    ::ng-deep {\n      .base-text {\n        .inner {\n          .title {\n            .title-header {\n              font-size: 22px !important;\n            }\n          }\n        }\n      }\n    }\n  }\n  @media #{$lt-sm} {\n    ::ng-deep {\n      .base-text {\n        .inner {\n          .title {\n            .title-header {\n              font-size: 18px !important;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./hero2v1.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-text-hero [content]=\"content\"></app-text-hero>\n"
        },
        {
            "name": "Hero2v2Component",
            "id": "component-Hero2v2Component-16b519d73ef7e4926f10d789bffb38bf12bead16093eb85283b3b50c267ba797c0c761acc6da8b69adcdf96e39149540b28ee7ad309f9c79f259a1e08ac7d7cb",
            "file": "src/app/uiux/combs/hero/hero2v2/hero2v2.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-hero2v2",
            "styleUrls": [
                "./hero2v2.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./hero2v2.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  Input,\n  ChangeDetectionStrategy,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-hero2v2',\n  templateUrl: './hero2v2.component.html',\n  styleUrls: ['./hero2v2.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class Hero2v2Component implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".hero-2-v2 {\n  overflow: hidden;\n  .box {\n    border-radius: 6px;\n  }\n}\n",
                    "styleUrl": "./hero2v2.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"hero-2-v2 position-relative p-y-xl\">\n  <a class=\"anchor\" [id]=\"content.id||''\"></a>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n  <app-bg [content]=\"content.bg\" *ngIf=\"content.bg\">\n    <app-img [content]=\"content.bg.img\" *ngIf=\"content.bg.img\"></app-img>\n  </app-bg>\n  <div class=\"container position-relative\">\n    <div class=\"inner\" fxFlex.lt-md=\"100\" fxFlex.gt-sm=\"58\" fxFlexOffset.gt-sm=\"42\">\n      <div class=\"box p-x\">\n        <app-text [content]=\"content.body\"></app-text>\n      </div>\n    </div>\n  </div>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n</div>\n"
        },
        {
            "name": "Hero2v3Component",
            "id": "component-Hero2v3Component-81ee6da4a560df8b30fd66a0b284ce9835603b45554ea317efe4be7e946d6322eb073283ba581d7e98a0b5353f9f07b3c8dcda0aa9720f637de58762297ea905",
            "file": "src/app/uiux/combs/hero/hero2v3/hero2v3.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-hero2v3",
            "styleUrls": [
                "./hero2v3.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./hero2v3.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "appState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AppState",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "screen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScreenState",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showGtXs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getApiParams",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getDeepValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getFormParams",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Params",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getParams",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getParamsState",
                    "args": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getUrlQuery",
                    "args": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "handlerPager",
                    "args": [
                        {
                            "name": "pager",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pager",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "initFormValueWithUrlQuery",
                    "args": [
                        {
                            "name": "query",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "controls",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "controls",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "row",
                    "args": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "padding",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'4rem'"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "padding",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'4rem'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, ChangeDetectorRef } from '@angular/core';\nimport { ScreenState } from '@core/mobx/screen/ScreenState';\nimport { BaseComponent } from '@uiux/base/base.widget';\nimport { AppState } from '@core/mobx/AppState';\nimport { ScreenService } from '@core/service/screen.service';\n\n@Component({\n  selector: 'app-hero2v3',\n  templateUrl: './hero2v3.component.html',\n  styleUrls: ['./hero2v3.component.scss'],\n})\nexport class Hero2v3Component extends BaseComponent implements OnInit {\n  @Input() content: any;\n  showGtXs: boolean;\n  constructor(\n    public appState: AppState,\n    public screen: ScreenState,\n    private screenService: ScreenService,\n    private cd: ChangeDetectorRef\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    if (this.screenService.isPlatformBrowser()) {\n      this.screen.mqAlias$().subscribe((mq) => {\n        this.showGtXs = mq.includes('gt-xs');\n        this.cd.detectChanges();\n      });\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".hero-2-v3 {\n  overflow: hidden;\n  ::ng-deep .base-text {\n    max-width: 800px;\n    margin: 0 auto;\n  }\n  .card {\n    border-radius: 6px;\n    .card-media {\n      width: 80px;\n      height: 80px;\n      border-radius: 50%;\n      margin: 0 auto;\n      ::ng-deep img {\n        width: 45px;\n        height: 45px;\n      }\n    }\n    .title {\n      font-size: 18px;\n    }\n  }\n}\n.container {\n  z-index: 2;\n}\n",
                    "styleUrl": "./hero2v3.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "appState",
                        "type": "AppState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screen",
                        "type": "ScreenState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "appState",
                        "type": "AppState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screen",
                        "type": "ScreenState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"hero-2-v3 position-relative p-y-md\">\n  <a class=\"anchor\" *ngIf=\"content.id\" [id]=\"content.id\"></a>\n  <app-spacer *ngIf=\"appState.pageConfig?.headerMode?.transparent && showGtXs\" [size]=\"'xl'\"></app-spacer>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n  <app-bg [content]=\"content.bg\" *ngIf=\"content.bg\">\n    <app-img [content]=\"content.bg.img\" *ngIf=\"content.bg.img\"></app-img>\n  </app-bg>\n  <div class=\"container position-relative\">\n    <div class=\"hero-body text-center\" fxLayout=\"row wrap\" fxLayoutAlign=\"center center\">\n      <app-text [content]=\"content.text\"></app-text>\n      <div fxFlex=\"100\" class=\"box m-top-md\" fxLayout=\"row wrap\" fxLayoutAlign=\"center center\">\n        <div class=\"item\" fxFlex.lt-md=\"50\" fxFlex.gt-sm=\"33.33\" fxFlex.gt-md=\"{{row(content, '0rem')}}\"\n          *ngFor=\"let item of content.elements\">\n          <div class=\"card m-y-xs m-x-xs\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n            <div class=\"card-inner p-y-sm p-x-sm\">\n              <div class=\"card-media\" fxLayoutAlign=\"center center\">\n                <app-img [content]=\"item.img\"></app-img>\n              </div>\n              <div class=\"card-content m-top-sm\">\n                <h3 class=\"title mat-h3 bold m-bottom-0 text-center\">\n                  <app-link [content]=\"item.link\"></app-link>\n                </h3>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n  <app-shape *ngIf=\"content.shape\"></app-shape>\n</div>\n"
        },
        {
            "name": "IconComponent",
            "id": "component-IconComponent-4f78744c22311e5acd88e6123d1a40fa32baee843f4f5a9e0ee77442060bcb37dd058a8a318852cf1d1da4489e69f5ade443baeae2bafcda736197b2951a2d65",
            "file": "src/app/uiux/widgets/icon/icon.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-icon",
            "styleUrls": [
                "./icon.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./icon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "IIcon",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { IIcon } from '@core/interface/widgets/IIcon';\n\n@Component({\n  selector: 'app-icon',\n  templateUrl: './icon.component.html',\n  styleUrls: ['./icon.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class IconComponent implements OnInit {\n  @Input() content: IIcon;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".custom {\n  width: 24px;\n  height: 24px;\n  line-height: 24px;\n}\n",
                    "styleUrl": "./icon.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"content\">\n  <mat-icon color=\"{{content.color}}\" *ngIf=\"!content.svg\" [inline]=\"content.inline\">{{content.name}}</mat-icon>\n  <mat-icon class=\"custom\" color=\"{{content.color}}\" *ngIf=\"content.svg\" [inline]=\"content.inline\"\n    [svgIcon]=\"content.svg\"></mat-icon>\n</ng-container>\n"
        },
        {
            "name": "ImgComponent",
            "id": "component-ImgComponent-25e30fdb84cc2a2810b4b6646bebf5c18645724a7fe44204cbd01a81fb3c0669da2e941f1c5587b506ae7045f7cdd2f8df04130e830cc885f027372c1161a1f8",
            "file": "src/app/uiux/widgets/img/img.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-img",
            "styleUrls": [
                "./img.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./img.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "IImg",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "coreConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICoreConfig",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "CORE_CONFIG"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "hostClasses",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ]
                },
                {
                    "name": "screen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScreenState",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "any",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Inject,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { IImg } from '@core/interface/widgets/IImg';\nimport { ICoreConfig } from '@core/mobx/IAppConfig';\nimport { ScreenState } from '@core/mobx/screen/ScreenState';\nimport { ScreenService } from '@core/service/screen.service';\nimport { CORE_CONFIG } from '@core/token/core.config';\n\n@Component({\n  selector: 'app-img',\n  templateUrl: './img.component.html',\n  styleUrls: ['./img.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ImgComponent implements OnInit {\n  @Input() content: IImg;\n  @HostBinding('class') hostClasses: any;\n\n  constructor(\n    public screen: ScreenState,\n    private screenService: ScreenService,\n    @Inject(CORE_CONFIG) public coreConfig: ICoreConfig\n  ) {}\n\n  ngOnInit(): void {\n    if (this.screenService.isPlatformBrowser()) {\n      if (this.content.hostClasses) {\n        this.hostClasses = this.content.hostClasses;\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/theme/variable/breakpoint\";\n\nimg {\n  max-width: 100%;\n}\n\n// will deprecated, user .object-fit\n:host(.bg-center) {\n  @media #{$lt-md} {\n    img {\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      right: 0;\n      left: 0;\n      object-fit: cover;\n      width: 100vw;\n      height: 100%;\n    }\n  }\n  @media #{$gt-sm} {\n    position: absolute;\n    top: -50%;\n    left: -50%;\n    width: 200% !important;\n    height: 200% !important;\n    max-width: none !important;\n    img {\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      right: 0;\n      left: 0;\n      margin: auto;\n      min-height: 50%;\n      min-width: 50%;\n    }\n  }\n}\n",
                    "styleUrl": "./img.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "screen",
                        "type": "ScreenState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "coreConfig",
                        "type": "ICoreConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "screen",
                        "type": "ScreenState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "coreConfig",
                        "type": "ICoreConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- https://github.com/angular/flex-layout/wiki/imgSrc-API -->\n\n<ng-container *ngIf=\"content\">\n  <ng-container *ngIf=\"!content.href;else withLink\">\n    <img loading=\"lazy\" [ngStyle]=\"content.style\" [ngClass]=\"content?.classes\"\n      src=\"{{content.src || coreConfig.defaultThumb}}\"\n      src.lt-md=\"{{content.mobile?content.mobile:content.src || coreConfig.defaultThumb}}\" [alt]=\"content.alt||''\">\n  </ng-container>\n  <ng-template #withLink>\n    <a href=\"{{content.href}}\" target=\"{{content.target}}\">\n      <img loading=\"lazy\" [ngClass]=\"content?.classes\" src=\"{{content.src || coreConfig.defaultThumb}}\"\n        src.lt-md=\"{{content.mobile?content.mobile:content.src || coreConfig.defaultThumb}}\" [ngStyle]=\"content.style\"\n        [alt]=\"content.alt||''\">\n    </a>\n  </ng-template>\n</ng-container>\n"
        },
        {
            "name": "InlineLightboxComponent",
            "id": "component-InlineLightboxComponent-ea84c2568255241e2ba8f6f835c8f9001e2e31f4a62b67c3526f31b53f3b90e13a2c5b63a306733363d9310e98d10399b85a8d3d2895cba528ba30d78c81d991",
            "file": "src/app/uiux/widgets/lightbox/inline-lightbox/inline-lightbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-inline-lightbox",
            "styleUrls": [
                "./inline-lightbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./inline-lightbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "IInlineLightbox",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { Lightbox } from 'ngx-lightbox';\nimport { UtilitiesService } from '@core/service/utilities.service';\nimport { IInlineLightbox } from '@uiux/widgets/IWidgets';\n\n@Component({\n  selector: 'app-inline-lightbox',\n  templateUrl: './inline-lightbox.component.html',\n  styleUrls: ['./inline-lightbox.component.scss'],\n})\nexport class InlineLightboxComponent implements OnInit {\n  @Input() content: IInlineLightbox;\n  constructor(private lightbox: Lightbox, private util: UtilitiesService) {}\n\n  ngOnInit(): void {}\n\n  onClick(i: number): void {\n    const src = this.content.elements[i].src;\n    if (this.util.getFileType(src) === 'picture') {\n      this.lightbox.open(this.content.elements, i);\n    } else {\n      window.open(src, '_blank');\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./inline-lightbox.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "lightbox",
                        "type": "Lightbox",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "util",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "lightbox",
                        "type": "Lightbox",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "util",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"inline-lightbox\" *ngIf=\"content\">\n  <a class=\"{{isFirst?'':'p-x-xs'}}\" href=\"javascript:void(0)\" (click)=\"onClick(i)\"\n    *ngFor=\"let item of content.label;first as isFirst; index as i\">{{item}}</a>\n</div>\n"
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-c40aafa7abc57c2c9d8e091b75817f159c6d9d9197219242eec8c3850ad7d02d5e101a232e9593dba9a3d5b49575c6e9beb0f04ff2de57dfdeefeb6ee4b75ab9",
            "file": "src/app/uiux/widgets/form/input/input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-input",
            "styleUrls": [
                "./input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "IControl",
                    "decorators": []
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "FormGroup",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "autoLists",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "displayFn",
                    "args": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAutoList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { IControl } from '@core/interface/widgets/IControl';\nimport { FormState } from '@core/mobx/FormState';\n@Component({\n  selector: 'app-input',\n  templateUrl: './input.component.html',\n  styleUrls: ['./input.component.scss'],\n})\nexport class InputComponent implements OnInit {\n  @Input() content: IControl;\n  @Input() form: FormGroup;\n  autoLists: any[];\n  constructor(private formState: FormState) {}\n\n  ngOnInit(): void {\n    if (this.content.mode === 'autocomplete') {\n      this.form.controls[this.content.key].setValue({\n        label: this.content.value,\n      });\n      this.getAutoList();\n    }\n  }\n\n  get isValid(): boolean {\n    return this.form.controls[this.content.key].valid;\n  }\n\n  getAutoList(): void {\n    this.formState.autoList$.subscribe((res: any[]) => {\n      this.autoLists = res;\n      console.log(this.autoLists);\n    });\n  }\n\n  displayFn(item: any): string {\n    return item.label;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formState",
                        "type": "FormState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "formState",
                        "type": "FormState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "isValid": {
                    "name": "isValid",
                    "getSignature": {
                        "name": "isValid",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 25
                    }
                }
            },
            "templateData": "<ng-container *ngIf=\"content\">\n  <ng-container [ngSwitch]=\"content.mode\">\n\n    <!-- autocomplete -->\n    <mat-form-field *ngSwitchCase=\"'autocomplete'\" class=\"width-100\" [formGroup]=\"form\"\n      [appearance]=\"content.appearance || 'fill'\">\n      <mat-label>{{content.label}}</mat-label>\n      <mat-icon matSuffix>{{content.icon}}</mat-icon>\n      <input #input type=\"{{content.controlType || 'text'}}\" placeholder=\"{{content.placeholder}}\" aria-label=\"Number\"\n        value=\"{{content.value}}\" matInput formControlName=\"{{content.key}}\" [matAutocomplete]=\"auto\"\n        [id]=\"content.key\">\n      <span matSuffix *ngIf=\"content.suffix\">{{content.suffix}}</span>\n      <button *ngIf=\"input.value && content.clear\" matSuffix mat-icon-button aria-label=\"Clear\"\n        (click)=\"input.value=''\">\n        <mat-icon>close</mat-icon>\n      </button>\n\n      <mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"displayFn\">\n        <mat-option *ngFor=\"let option of autoLists\" [value]=\"option\">\n          {{option.label}}\n        </mat-option>\n      </mat-autocomplete>\n      <mat-error *ngIf=\"!isValid\">{{content.errorMes}}</mat-error>\n    </mat-form-field>\n\n    <!-- default input -->\n    <mat-form-field *ngSwitchDefault class=\"width-100\" [formGroup]=\"form\" [appearance]=\"content.appearance || 'fill'\">\n      <mat-label>{{content.label}}</mat-label>\n      <mat-icon matSuffix>{{content.icon}}</mat-icon>\n      <input #input matInput type=\"{{content.controlType || 'text'}}\" formControlName=\"{{content.key}}\"\n        placeholder=\"{{content.placeholder}}\" value=\"{{content.value}}\" [id]=\"content.key\">\n\n      <span matSuffix *ngIf=\"content.suffix\">{{content.suffix}}</span>\n      <button *ngIf=\"input.value && content.clear\" matSuffix mat-icon-button aria-label=\"Clear\"\n        (click)=\"input.value=''\">\n        <mat-icon>close</mat-icon>\n      </button>\n      <mat-error *ngIf=\"!isValid\">{{content.errorMes}}</mat-error>\n    </mat-form-field>\n  </ng-container>\n</ng-container>\n"
        },
        {
            "name": "InverseComponent",
            "id": "component-InverseComponent-85e82f026ec0e8cd00959304db8020172ab6e2c82cf2250e521a3539716b60cf2d3f5f92f9d9e904bc6a74e96422bf11779b00e7e9649145002a429b55f78885",
            "file": "src/app/core/branding/footer/inverse/inverse.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-inverse",
            "styleUrls": [
                "./inverse.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./inverse.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "formService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormService",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "submited",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "success",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectorRef, Component, Input, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormService } from '../../../service/form.service';\nimport { UtilitiesService } from '@core/service/utilities.service';\n\n@Component({\n  selector: 'app-inverse',\n  templateUrl: './inverse.component.html',\n  styleUrls: ['./inverse.component.scss'],\n})\nexport class InverseComponent implements OnInit {\n  @Input() content: any;\n  form: FormGroup;\n  success = false;\n  submited = false;\n\n  constructor(\n    private cd: ChangeDetectorRef,\n    public formService: FormService,\n    private utilitiesService: UtilitiesService\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.formService.toFormGroup(\n      this.content.footerNewsletter.forms\n    );\n  }\n\n  onSubmit(): void {\n    if (this.form.invalid) {\n      return;\n    }\n    this.submited = true;\n    const data = this.formService.getwebFormData(\n      this.content.footerNewsletter.params,\n      this.form\n    );\n    this.formService.submitWebForm(data).subscribe(\n      (res) => {\n        this.submited = false;\n        this.success = true;\n        this.utilitiesService.openSnackbar('成功订阅！');\n        this.cd.detectChanges();\n      },\n      (error) => {\n        this.submited = false;\n        this.utilitiesService.openSnackbar(`Error: ${error.message}`);\n      }\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../common.scss\";\n.footer-inverse {\n  z-index: 2;\n}\n\n.item-header {\n  height: 48px;\n  line-height: 16px;\n  font-size: 14px;\n  font-weight: bold;\n  display: flex;\n  align-items: center;\n}\n\n.left {\n  font-size: 14px;\n}\n",
                    "styleUrl": "./inverse.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"shape-inner position-relative p-y-lg m-top-lg\" *ngIf=\"content?.params?.shape\">\n  <div class=\"shape shape-{{content?.params?.style === 'light'?'inverse-light':'inverse'}}\">\n    <svg viewBox=\"0 0 2880 250\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path d=\"M720 125L2160 0H2880V250H0V125H720Z\" fill=\"currentColor\"></path>\n    </svg>\n  </div>\n</div>\n<div class=\"footer-{{content?.params?.style === 'light'?'inverse-light':'inverse'}} position-relative\" *ngIf=\"content\">\n  <div class=\"container\">\n    <div class=\"p-y-lg\">\n      <div *ngIf=\"content?.footerBrand\" fxLayout.lt-md=\"column\" fxLayout.gt-sm=\"row\">\n        <div fxFlex.lt-md=\"100\" fxFlex.gt-sm=\"0 0 25\" class=\"brand\" fxLayout=\"column\">\n          <app-img [content]=\"content.footerBrand.logo.img\" *ngIf=\"content.footerBrand.logo\"></app-img>\n          <p class=\"m-y-sm\" [innerHTML]=\"content.footerBrand?.summary|safeHtml\" *ngIf=\"content.footerBrand?.summary\">\n          </p>\n          <div class=\"social\" fxLayout=\"row\" *ngIf=\"content?.footerBrand?.social\">\n            <a class=\"item\" fxLayoutAlign=\"center center\" *ngFor=\"let item of content.footerBrand.social\"\n              href=\"{{item.href}}\" target=\"_blank\" title=\"{{item.label}}\">\n              <mat-icon [inline]=\"true\" [svgIcon]=\"item.svg\"></mat-icon>\n            </a>\n          </div>\n        </div>\n        <div fxFlex.lt-md=\"100\" fxFlex.gt-sm=\"0 0 50\" *ngIf=\"content.mainMenu\">\n          <app-menu-item [content]=\"content?.mainMenu\" [mobileMenu]=\"content.mobileMenu\"></app-menu-item>\n        </div>\n        <div fxFlex.lt-md=\"100\" fxFlex.gt-sm=\"0 0 25\" *ngIf=\"content.footerNewsletter\">\n          <form (ngSubmit)=\"onSubmit()\" [formGroup]=\"form\" fxLayout=\"row wrap\">\n            <div fxFlex=\"100\" class=\"item-header\">\n              {{content.footerNewsletter.label}}\n            </div>\n            <p fxFlex=\"100\" class=\"m-y-xs\" [innerHTML]=\"content.footerNewsletter.summary|safeHtml\"></p>\n            <app-dynamic-widgets *ngFor=\"let item of content.footerNewsletter.forms\" [content]=\"item\" [form]=\"form\">\n            </app-dynamic-widgets>\n            <div fxFlex.lt-md=\"100\" fxFlex.gt-sm=\"50\" fxLayout=\"row wrap\">\n              <button fxFlex=\"100\" *ngIf=\"content.footerNewsletter.action\" class=\"m-top-xs\" type=\"submit\"\n                mat-raised-button color=\"primary\">\n                <div fxLayoutAlign=\"center center\">\n                  <div class=\"p-x-xs\">{{content.footerNewsletter.action.label}}</div>\n                </div>\n              </button>\n              <div fxFlex=\"auto\" fxLayoutAlign=\"center center\">\n                <app-spinner [content]=\"{color:'primary', size:36}\" *ngIf=\"submited\"></app-spinner>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"footer-bottom p-y-sm\">\n    <div class=\"container\">\n      <div class=\"inner\" fxLayout.lt-md=\"column\" fxLayout.gt-sm=\"row\" fxLayoutAlign.lt-md=\"center center\"\n        fxLayoutAlign.gt-sm=\"space-between center\">\n        <div class=\"left\" [ngClass.lt-md]=\"'text-center'\" *ngIf=\"content?.footerBottom?.left\"\n          [innerHTML]=\"content.footerBottom.left | safeHtml\"></div>\n        <div class=\"right\" *ngIf=\"content?.footerBottom?.right\">\n          <div fxLayout=\"row\">\n            <app-link class=\"item\" *ngFor=\"let item of content.footerBottom.right\" [content]=\"item\"></app-link>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "ItemMenuComponent",
            "id": "component-ItemMenuComponent-f3c83564fd735e8ece6b2faf46fd28606d4a7b19e48927e5a39c5c6a77f2027b95e5a92f6984d94b7442d8aed3e1da5b83a3f4e2e9224bbb6f2790afe3f8a1ef",
            "file": "src/app/core/branding/header/menu/item-menu/item-menu.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-item-menu",
            "styleUrls": [
                "./item-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./item-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "params",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isMegaMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getApiParams",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getDeepValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getFormParams",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Params",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getParams",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getParamsState",
                    "args": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getUrlQuery",
                    "args": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "handlerPager",
                    "args": [
                        {
                            "name": "pager",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pager",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "initFormValueWithUrlQuery",
                    "args": [
                        {
                            "name": "query",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "controls",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "controls",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "row",
                    "args": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "padding",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'4rem'"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "padding",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'4rem'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { ScreenService } from '@core/service/screen.service';\nimport { BaseComponent } from '@uiux/base/base.widget';\n\n@Component({\n  selector: 'app-item-menu',\n  templateUrl: './item-menu.component.html',\n  styleUrls: ['./item-menu.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ItemMenuComponent extends BaseComponent implements OnInit {\n  @Input() content: any;\n  @Input() params: any;\n  isMegaMenu: boolean;\n\n  constructor(private screenService: ScreenService) {\n    super();\n  }\n\n  ngOnInit(): void {\n    if (this.screenService.isPlatformBrowser()) {\n      this.isMegaMenu = !!this.params.isMegaMenu;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host ::ng-deep .top {\n  a {\n    position: relative;\n    display: block;\n    white-space: nowrap;\n    font-size: 1.5rem;\n    font-weight: 700;\n    padding: 2.7rem 1.5rem;\n    line-height: 1;\n    &.active {\n      &:after {\n        position: absolute;\n        content: \"\";\n        height: 2px;\n        bottom: -2px;\n        width: 100%;\n        left: 0;\n        display: block;\n        z-index: 2;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./item-menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"item-menu\" #itemMenu *ngIf=\"content\">\n  <ng-container *ngIf=\"(!isMegaMenu) && content.child && content.child.length >0\">\n    <app-link class=\"top\" [content]=\"content\" [matMenuTriggerFor]=\"menu.childMenu\"></app-link>\n    <app-sub-menu #menu [content]=\"content\"></app-sub-menu>\n  </ng-container>\n  <ng-container *ngIf=\"isMegaMenu && content.child && content.child.length >0\">\n    <app-mega-menu [content]=\"content\"></app-mega-menu>\n  </ng-container>\n  <app-link class=\"top\" *ngIf=\"!content.child || content.child.length === 0\" [content]=\"content\"></app-link>\n</div>\n"
        },
        {
            "name": "JobComponent",
            "id": "component-JobComponent-a630b1f46046e2b518fe7f06fadf523a3ded645981ca84fb2e15b4e7c0d0dd1751783954fce0872330b1fc824f9eb41449620c6519cb32c802c8360a2fb1bd38",
            "file": "src/app/uiux/combs/node/job/job.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-job",
            "styleUrls": [
                "./job.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./job.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 152,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "AMap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 159
                },
                {
                    "name": "amapState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AMapState",
                    "optional": false,
                    "description": "",
                    "line": 168,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "autoList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 154
                },
                {
                    "name": "feature",
                    "defaultValue": "feature",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 163
                },
                {
                    "name": "geocoder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 160
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 158
                },
                {
                    "name": "nodes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 153
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 162
                },
                {
                    "name": "selectedId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 161
                },
                {
                    "name": "selectedSkill",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 156
                },
                {
                    "name": "selectedTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 157
                },
                {
                    "name": "show",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 165
                },
                {
                    "name": "skills",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 155
                }
            ],
            "methodsClass": [
                {
                    "name": "getJobsNodes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSkill",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 236,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getWelfare",
                    "args": [
                        {
                            "name": "lists",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IChipList[]",
                    "typeParameters": [],
                    "line": 221,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lists",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "jobParams",
                    "args": [
                        {
                            "name": "params",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveBox",
                    "args": [
                        {
                            "name": "show",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 264,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "show",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 287,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onScroll",
                    "args": [
                        {
                            "name": "event",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 260,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSearch",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 269,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSearchJob",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 305,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelected",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 251,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSkillChange",
                    "args": [
                        {
                            "name": "skill",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 297,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "skill",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "paramsInit",
                    "args": [
                        {
                            "name": "params",
                            "type": "Params",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 191,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateList",
                    "args": [
                        {
                            "name": "lists",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 315,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lists",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { NodeService } from '@core/service/node.service';\nimport { IChipList } from './IJob';\nimport { map } from 'lodash-es';\nimport { AMapState } from '@core/mobx/amap/AMapState';\nimport { RouteService } from '@core/service/route.service';\nimport { Params, ActivatedRoute } from '@angular/router';\nimport { TagsService } from '@core/service/tags.service';\nimport { ScreenService } from '@core/service/screen.service';\n\nconst feature = {\n  type: 'showcase-3v6',\n  id: '',\n  title: {\n    type: 'text',\n    spacer: 'sm',\n    title: {\n      label: '职位招聘',\n      style: 'style-v1',\n    },\n    body: '<p class=\"text-center\">免费推送相关职位信息，关注公众号随时随地了解职位情况。</p>',\n  },\n  bg: {\n    classes: 'bg-light bg-fill-width',\n  },\n  row: '3',\n  elements: [\n    {\n      img: {\n        src: '/assets/images/logo/codepen.svg',\n        style: {\n          width: '45px',\n          height: '45px',\n        },\n        alt: 'logo',\n      },\n      css3: true,\n      link: {\n        label: '前端开发工程师',\n        classes: 'bold',\n        href: '#',\n      },\n      subTitle: '字节跳动，北京',\n    },\n    {\n      img: {\n        src: '/assets/images/logo/codepen.svg',\n        style: {\n          width: '45px',\n          height: '45px',\n        },\n        alt: 'logo',\n      },\n      css3: true,\n      link: {\n        label: '前端架构师',\n        classes: 'bold',\n        href: '#',\n      },\n      subTitle: '美团，广州',\n    },\n    {\n      img: {\n        src: '/assets/images/logo/codepen.svg',\n        style: {\n          width: '45px',\n          height: '45px',\n        },\n        alt: 'logo',\n      },\n      css3: true,\n      link: {\n        label: '后端开发',\n        classes: 'bold',\n        href: '#',\n      },\n      subTitle: '微软，北京',\n    },\n    {\n      img: {\n        src: '/assets/images/logo/codepen.svg',\n        style: {\n          width: '45px',\n          height: '45px',\n        },\n        alt: 'logo',\n      },\n      css3: true,\n      link: {\n        label: 'UI 设计师',\n        classes: 'bold',\n        href: '#',\n      },\n      subTitle: '腾讯，深圳',\n    },\n    {\n      img: {\n        src: '/assets/images/logo/codepen.svg',\n        style: {\n          width: '45px',\n          height: '45px',\n        },\n        alt: 'logo',\n      },\n      css3: true,\n      link: {\n        label: 'IOS 开发',\n        classes: 'bold',\n        href: '#',\n      },\n      subTitle: '华为，深圳',\n    },\n    {\n      img: {\n        src: '/assets/images/logo/codepen.svg',\n        style: {\n          width: '45px',\n          height: '45px',\n        },\n        alt: 'logo',\n      },\n      css3: true,\n      link: {\n        label: '游戏开发',\n        classes: 'bold',\n        href: '#',\n      },\n      subTitle: '腾讯，成都',\n    },\n  ],\n  action: {\n    label: '查看更多',\n    href: '#',\n    style: 'style-v1',\n    icon: 'open_in_new',\n  },\n};\n\n@Component({\n  selector: 'app-job',\n  templateUrl: './job.component.html',\n  styleUrls: ['./job.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class JobComponent implements OnInit {\n  @Input() content: any;\n  nodes: any[];\n  autoList: any[];\n  skills: string[];\n  selectedSkill: string;\n  selectedTitle: string;\n  loading: boolean;\n  AMap: any;\n  geocoder: any;\n  selectedId: string;\n  selected: any;\n  feature = feature;\n\n  show = false;\n  constructor(\n    private nodeService: NodeService,\n    public amapState: AMapState,\n    private tagsService: TagsService,\n    private routerService: RouteService,\n    private route: ActivatedRoute,\n    private screenService: ScreenService,\n    private cd: ChangeDetectorRef\n  ) {\n    this.nodes = [];\n  }\n\n  ngOnInit(): void {\n    this.tagsService.setTitle('内推职位列表');\n    if (this.screenService.isPlatformBrowser()) {\n      this.loading = true;\n      this.getJobsNodes();\n      this.getSkill();\n      this.route.queryParamMap.subscribe((res) => {\n        this.paramsInit(res);\n      });\n      this.cd.detectChanges();\n    }\n  }\n\n  paramsInit(params: Params): void {\n    this.selectedId = params.params.id;\n    this.cd.detectChanges();\n  }\n\n  jobParams(params = ''): any {\n    return [\n      'fields[node--job]=drupal_internal__nid,title,created,changed,body,deadline,number,salary,work_experience,skill,education,company',\n      'include=skill,education,company,company.logo',\n      'fields[node--company]=title,address,phone,welfare,logo',\n      'fields[taxonomy_term--skill]=name',\n      'fields[taxonomy_term--education]=name',\n      'fields[file--file]=uri',\n      `${params}`,\n      'sort=-deadline',\n      'jsonapi_include=1',\n    ].join('&');\n  }\n\n  getJobsNodes(): void {\n    // 以下参数没有顺序关系\n    // fields[{{type}}] type 为该实体类型\n    // include 为 relationships 相关资源，支持嵌套如company,company.log\n    const params = this.jobParams();\n    const path = this.nodeService.apiUrlConfig.nodeGetPath;\n    this.nodeService.getNodes(path, 'job', params).subscribe((res) => {\n      this.updateList(res.data);\n    });\n  }\n\n  getWelfare(lists: string[]): IChipList[] {\n    return lists\n      .map((list) => {\n        return {\n          color: 'primary',\n          label: list,\n        };\n      })\n      .slice(0, 4);\n  }\n\n  get nodePath(): string {\n    return this.nodeService.apiUrlConfig.taxonomyGetPath;\n  }\n\n  getSkill(): void {\n    const params = ['jsonapi_included=1'].join('&');\n\n    this.nodeService\n      .getNodes(this.nodePath, 'skill', params)\n      .subscribe((res) => {\n        this.skills = res.data.map((item: any) => {\n          return {\n            name: item.attributes.name,\n          };\n        });\n        this.cd.detectChanges();\n      });\n  }\n\n  onSelected(obj: any): void {\n    this.selected = obj.item;\n    this.selectedId = obj.item.nid;\n    this.amapState.markers$.next(obj);\n    const query: Params = { id: this.selectedId };\n    this.routerService.updateQueryParams(query);\n    this.cd.detectChanges();\n  }\n\n  onScroll(event: boolean): void {\n    this.moveBox(false);\n  }\n\n  moveBox(show: boolean): void {\n    this.selected = show;\n    this.cd.detectChanges();\n  }\n\n  onSearch(key: string): void {\n    this.nodeService.searchByKey(key).subscribe((res) => {\n      this.autoList = res;\n      this.cd.detectChanges();\n    });\n  }\n\n  get getFilterParams(): any {\n    const options = [];\n    if (this.selectedTitle) {\n      options.push(`filter[title]=${this.selectedTitle}`);\n    }\n    if (this.selectedSkill && this.selectedSkill !== 'all') {\n      options.push(`filter[skill.name]=${this.selectedSkill}`);\n    }\n    return this.jobParams(options.join('&'));\n  }\n\n  onClear(): void {\n    this.selectedTitle = '';\n    this.nodeService\n      .getNodes(this.nodePath, 'job', this.getFilterParams)\n      .subscribe((res) => {\n        this.updateList(res.data);\n      });\n    this.cd.detectChanges();\n  }\n\n  onSkillChange(skill: string): void {\n    this.selectedSkill = skill;\n    this.nodeService.getNodes('job', this.getFilterParams).subscribe((res) => {\n      this.updateList(res.data);\n    });\n    this.cd.detectChanges();\n  }\n\n  onSearchJob(title: string): void {\n    this.selectedTitle = title;\n    this.nodeService\n      .getNodes(this.nodePath, 'job', this.getFilterParams)\n      .subscribe((res) => {\n        this.updateList(res.data);\n      });\n    this.cd.detectChanges();\n  }\n\n  updateList(lists: any): void {\n    this.loading = false;\n    this.nodes = map(lists, (item) => {\n      return {\n        nid: item.id,\n        title: item.title,\n        number: item.number,\n        salary: item.salary,\n        skill: map(item.skill, (skill) => {\n          return { label: skill.name };\n        }),\n        deadline: item.deadline,\n        work_experience: item.work_experience,\n        body: item.body.value,\n        params: {\n          address: item.company.address.address_line1,\n          title: item.company.title,\n        },\n        company: {\n          id: item.company.id,\n          logo: {\n            src: item.company.logo.uri.url,\n            alt: item.company.title,\n            style: {\n              height: '80px',\n              width: '80px',\n            },\n          },\n          title: item.company.title,\n          welfare: map(item.company.welfare, (welfare) => {\n            return { label: welfare };\n          }),\n          address: item.company.address.address_line1,\n          phone: item.company.phone,\n        },\n      };\n    });\n    this.cd.detectChanges();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/theme/variable/variable\";\n\n@media #{$gt-xs} {\n  .sidebar {\n    z-index: 112;\n  }\n}\n\n.map-wrapper {\n  height: calc(100vh - 60px);\n\n  @media #{$xs} {\n    height: 60vh;\n    width: 100%;\n    padding: 1rem;\n  }\n}\n\n.job-details {\n  display: block;\n  position: absolute;\n  top: 20px;\n  left: 20px;\n  bottom: 20px;\n  right: 20px;\n  z-index: 111;\n  padding: 20px;\n  border-radius: 10px;\n  overflow: auto;\n}\n",
                    "styleUrl": "./job.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "amapState",
                        "type": "AMapState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tagsService",
                        "type": "TagsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "routerService",
                        "type": "RouteService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 165,
                "jsdoctags": [
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "amapState",
                        "type": "AMapState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tagsService",
                        "type": "TagsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "routerService",
                        "type": "RouteService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "nodePath": {
                    "name": "nodePath",
                    "getSignature": {
                        "name": "nodePath",
                        "type": "string",
                        "returnType": "string",
                        "line": 232
                    }
                },
                "getFilterParams": {
                    "name": "getFilterParams",
                    "getSignature": {
                        "name": "getFilterParams",
                        "type": "any",
                        "returnType": "any",
                        "line": 276
                    }
                }
            },
            "templateData": "<div class=\"container-fluid map-list-common\">\n  <div class=\"job position-relation\" fxFill fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"start stretch\">\n    <div class=\"sidebar position-relative p-x-xs\" fxFlex.xs=\"100%\" fxFlex.gt-xs=\"500px\">\n      <div class=\"m-y\" *ngIf=\"loading\" fxLayoutAlign=\"center center\">\n        <app-spinner class=\"m-y\" [content]=\"{color:'primary', size:40}\"></app-spinner>\n      </div>\n      <app-job-filter [content]=\"nodes\" [autoList]=\"autoList\" [skills]=\"skills\" (searchChange)=\"onSearch($event)\"\n        (clear)=\"onClear()\" (selectedChange)=\"onSearchJob($event)\" (skillChange)=\"onSkillChange($event)\">\n      </app-job-filter>\n      <div class=\"m-y\" *ngIf=\"nodes.length == 0\" fxLayoutAlign=\"center center\">\n        暂无相关数据\n      </div>\n      <app-job-list (selected)=\"onSelected($event)\" (scroller)=\"onScroll($event)\" *ngIf=\"nodes.length > 0\"\n        [content]=\"nodes\" [selectedId]=\"selectedId\">\n      </app-job-list>\n    </div>\n    <div class=\"map-wrapper position-relative\" fxFlex.xs=\"100%\" fxFlex.gt-xs=\"100%\">\n      <app-job-node fxFlex.xs=\"100\" fxFlex.gt-xs=\"500px\" *ngIf=\"selected\" class=\"job-details\" [content]=\"selected\">\n      </app-job-node>\n      <app-map fxFlex=\"100%\" *ngIf=\"nodes.length > 0\" [content]=\"nodes\"></app-map>\n      <div class=\"m-y\" *ngIf=\"loading\" fxLayoutAlign=\"center center\">\n        <app-spinner class=\"m-y\" [content]=\"{color:'primary', size:40}\"></app-spinner>\n      </div>\n    </div>\n  </div>\n  <app-showcase3v6 [content]=\"feature\"></app-showcase3v6>\n</div>\n"
        },
        {
            "name": "JobFilterComponent",
            "id": "component-JobFilterComponent-72eb285fb7a4e00f9341b4d702519fd5b5ad2b5e098f1143dedb092382a448a6d4d47fc994d72f69d0ba588943ed6c66605e56c5871ec9191825302e5fc9b041",
            "file": "src/app/uiux/combs/node/job/job-filter/job-filter.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-job-filter",
            "styleUrls": [
                "./job-filter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./job-filter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "skills",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "any[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "clear",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "EventEmitter"
                },
                {
                    "name": "searchChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "EventEmitter"
                },
                {
                    "name": "selectedChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "EventEmitter"
                },
                {
                    "name": "skillChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {read: ElementRef}"
                        }
                    ]
                },
                {
                    "name": "search",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'search', {read: ElementRef}"
                        }
                    ]
                },
                {
                    "name": "selectedValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "titleControl",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSelected",
                    "args": [
                        {
                            "name": "auto",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "auto",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectSkill",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  Output,\n  OnInit,\n  EventEmitter,\n  ViewChild,\n  ElementRef,\n  AfterViewInit,\n  OnDestroy,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  map,\n  debounceTime,\n  distinctUntilChanged,\n  startWith,\n  takeUntil,\n} from 'rxjs/operators';\nimport { FormControl } from '@angular/forms';\nimport { fromEvent, Subject, Subscription } from 'rxjs';\nimport { ScreenService } from '@core/service/screen.service';\n\n@Component({\n  selector: 'app-job-filter',\n  templateUrl: './job-filter.component.html',\n  styleUrls: ['./job-filter.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class JobFilterComponent implements OnInit, AfterViewInit, OnDestroy {\n  @Input() content: any;\n  @Input() autoList: any[];\n  @Input() skills: any[];\n  @Output() selectedChange = new EventEmitter();\n  @Output() skillChange = new EventEmitter();\n  @Output() searchChange = new EventEmitter();\n  @Output() clear = new EventEmitter();\n\n  @ViewChild('search', { read: ElementRef }) search: ElementRef;\n  @ViewChild('input', { read: ElementRef }) input: ElementRef;\n\n  selectedValue = '';\n  titleControl = new FormControl();\n  destroy$: Subject<boolean> = new Subject<boolean>();\n\n  constructor(\n    private screenService: ScreenService,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {}\n\n  onSelected(auto: any): void {\n    this.selectedChange.emit(auto.option.value);\n  }\n\n  onClear(): void {\n    this.input.nativeElement.value = '';\n    this.clear.emit();\n    this.cd.detectChanges();\n  }\n\n  ngAfterViewInit(): void {\n    if (this.screenService.isPlatformBrowser()) {\n      const $input = fromEvent<any>(this.search.nativeElement, 'input').pipe(\n        map((event) => event.target.value),\n        startWith(''),\n        debounceTime(200),\n        distinctUntilChanged()\n      );\n\n      $input.pipe(takeUntil(this.destroy$)).subscribe((key) => {\n        this.searchChange.emit(key);\n      });\n    }\n  }\n\n  onSelectSkill(event: any): void {\n    this.skillChange.emit(event.value);\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// override material form field\n.search-form-field {\n  ::ng-deep .mat-form-field-appearance-fill {\n    .mat-form-field-flex {\n      border-radius: 4px;\n    }\n\n    .mat-form-field-underline {\n      display: none;\n    }\n  }\n}\n",
                    "styleUrl": "./job-filter.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnDestroy"
            ],
            "templateData": "<div fxLayoutAlign=\"end center\" fxLayoutGap=\"1rem\" class=\"search-form-field m-top-sm\">\n  <mat-form-field #search fxFlex=\"100\" class=\"\" appearance=\"fill\">\n    <mat-label>搜索职位</mat-label>\n    <input #input type=\"text\" matInput [matAutocomplete]=\"auto\">\n    <button mat-button *ngIf=\"input.value\" matSuffix mat-icon-button aria-label=\"Clear\" (click)=\"onClear()\">\n      <mat-icon>close</mat-icon>\n    </button>\n    <mat-autocomplete (optionSelected)=\"onSelected($event)\" autoActiveFirstOption #auto=\"matAutocomplete\">\n      <mat-option *ngFor=\"let item of autoList\" [value]=\"item.value\">\n        {{item.value}}\n      </mat-option>\n    </mat-autocomplete>\n    <mat-icon matSuffix *ngIf=\"!input.value\">search</mat-icon>\n  </mat-form-field>\n  <mat-form-field fxFlex=\"30\" appearance=\"fill\">\n    <mat-label>技能</mat-label>\n    <mat-select (selectionChange)=\"onSelectSkill($event)\">\n      <mat-option value=\"all\">全部</mat-option>\n      <mat-option *ngFor=\"let item of skills\" value=\"{{item.name}}\">\n        {{item.name}}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n</div>\n"
        },
        {
            "name": "JobListComponent",
            "id": "component-JobListComponent-40d790c92e6a538d4dda278e316eeb3dbd6927c4834a316408ee67de0079fedaddfc117334a0c014ee40a53a40b2e6133be012b354b87e6150ccfdf2ed313acf",
            "file": "src/app/uiux/combs/node/job/job-list/job-list.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-job-list",
            "styleUrls": [
                "./job-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./job-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "selectedId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "scroller",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                },
                {
                    "name": "selected",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "scrolling",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "getMarker",
                    "args": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onScroll",
                    "args": [
                        {
                            "name": "event",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  OnInit,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IMark } from '@core/interface/IAmap';\n\n@Component({\n  selector: 'app-job-list',\n  templateUrl: './job-list.component.html',\n  styleUrls: ['./job-list.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class JobListComponent implements OnInit {\n  @Input() content: any;\n  @Input() selectedId: string;\n  @Output() selected = new EventEmitter();\n  @Output() scroller = new EventEmitter();\n\n  scrolling = false;\n  constructor(private cd: ChangeDetectorRef) {}\n\n  ngOnInit(): void {}\n\n  onClick(item: any, i: number): void {\n    const obj: IMark = {\n      index: i,\n      item,\n      marker: this.getMarker(item),\n    };\n    this.selected.emit(obj);\n  }\n\n  getMarker(item: any): any {\n    return `\n    <div class=\"mark-card p-y-xs p-x-xs\">\n      <div class=\"media\">\n        <img src=\"${item.company.logo.src}\" />\n      </div>\n      <div class=\"media-body m-left-xs\">\n        <div class=\"mat-h4 m-bottom-xs text-base\">${item.company.title}</div>\n        <div class=\"mat-h4 m-bottom-xs text-dark title\">${item.title}</div>\n        <div class=\"mat-h3 m-bottom-0 text-primary\">\n        ${item.salary.from} - ${item.salary.to} k\n        </div>\n      </div>\n      <div class=\"top arrow\"></div>\n    </div>\n    `;\n  }\n\n  onScroll(event: number): void {\n    this.scrolling = !!event;\n    this.scroller.emit(true);\n    this.cd.detectChanges();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/theme/variable/variable\";\n@import \"~@angular/material/theming\";\n\n.job-header {\n  .scroll {\n    position: absolute;\n    width: 100%;\n    left: 0;\n    bottom: 0;\n    height: 4px;\n    &.scrolling {\n      z-index: 2;\n    }\n  }\n}\n.job-list {\n  .viewport {\n    height: calc(100vh - 210px);\n    overflow: auto;\n  }\n  .item {\n    border-radius: 10px;\n    cursor: pointer;\n    margin-bottom: 2rem;\n    .title {\n      font-size: 1.6rem;\n    }\n\n    .position {\n      font-size: 1.6rem;\n    }\n\n    @media #{$xs} {\n      padding: 1rem !important;\n\n      .title {\n        margin-bottom: 1rem;\n        font-size: 1.4rem;\n      }\n\n      .position {\n        font-size: 1.4rem;\n      }\n    }\n  }\n}\n\n.result {\n  font-size: 1.6rem;\n\n  @media #{$xs} {\n    font-size: 1.6rem;\n  }\n}\n\n.media {\n  width: 10rem;\n  height: 10rem;\n  margin-right: 1rem;\n  border-radius: 4px;\n\n  ::ng-deep img {\n    max-width: 100%;\n    padding: 1rem;\n  }\n}\n\n.media-footer-right {\n  font-size: small;\n}\n\n.wage {\n  font-size: 1.6rem;\n}\n\n.mini {\n  mat-chip {\n    font-size: 12px;\n    padding: 0px 6px;\n    min-height: 20px;\n  }\n}\n\n.selected {\n  &:after,\n  &:before {\n    content: \"\";\n    position: absolute;\n    width: 4px;\n    height: 50%;\n    top: 0;\n    transform: translateY(50%);\n  }\n\n  &:after {\n    left: 0;\n    border-top-right-radius: 4px;\n    border-bottom-right-radius: 4px;\n  }\n\n  &:before {\n    left: auto;\n    right: 0;\n    border-top-left-radius: 4px;\n    border-bottom-left-radius: 4px;\n  }\n}\n",
                    "styleUrl": "./job-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"job-list\" *ngIf=\"content\" fxLayout=\"column\">\n  <div class=\"job-header position-relative\">\n    <div class=\"result p-y-xs\">总计 <span class=\"result-total\">{{content.length}}</span> 个职位\n    </div>\n    <div class=\"scroll\" [class.scrolling]=\"scrolling\"></div>\n  </div>\n  <cdk-virtual-scroll-viewport (scrolledIndexChange)=\"onScroll($event)\" [itemSize]=\"5\" class=\"viewport\">\n    <div class=\"item m-y-sm p-y-sm m-x-xs p-x-sm\" [class.selected]=\"item.nid == selectedId\" matRipple\n      [matRippleColor]=\"'rgba(0, 0, 0, 0.04)'\" *cdkVirtualFor=\"let item of content; index as i\" fxLayout\n      (click)=\"onClick(item, i)\">\n      <div class=\"media\" fxLayoutAlign=\"center center\" *ngIf=\"item?.company\">\n        <app-img [content]=\"item.company.logo\"> </app-img>\n      </div>\n      <div class=\"media-body\" fxLayout=\"column\" fxFlex=\"100\" fxLayoutGap=\"1rem\">\n        <div class=\"m-bottom-xs\" fxLayoutAlign=\"start center\" fxLayout=\"row wrap\" fxLayoutGap=\"1rem\">\n          <div class=\"title\" *ngIf=\"item?.company\">\n            {{item.company.title}}</div>\n          <app-chip-list [content]=\"item.company.welfare\" [classes]=\"'mini primary'\"></app-chip-list>\n        </div>\n        <div class=\"info\" fxLayout=\"row wrap\" fxLayoutAlign=\"space-between center\">\n          <div class=\"position m-y-xs\">{{item.title}}</div>\n          <div class=\"wage bold\" *ngIf=\"item.salary\">{{item.salary.from}} -\n            {{item.salary.to}} k\n          </div>\n        </div>\n        <div class=\"media-footer\" fxLayout=\"row wrap\" fxLayoutAlign=\"space-between center\">\n          <div class=\"media-footer-left\" fxLayout *ngIf=\"item.skill\">\n            <app-chip-list [content]=\"item.skill\" [classes]=\"'mini'\"></app-chip-list>\n          </div>\n          <div class=\"media-footer-right\" *ngIf=\"item.deadline\">\n            {{item.deadline}}\n          </div>\n        </div>\n      </div>\n    </div>\n  </cdk-virtual-scroll-viewport>\n</div>\n"
        },
        {
            "name": "JobNodeComponent",
            "id": "component-JobNodeComponent-3e65cc643260eb340649fd6c788c78515d9203eec12fe19afabaa7028be4921a7b48dffb4d88c783b27a9e8120d866dfbad5eab87375f0e7aa6e94411f635c4a",
            "file": "src/app/uiux/combs/node/job/job-node/job-node.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-job-node",
            "styleUrls": [
                "./job-node.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./job-node.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-job-node',\n  templateUrl: './job-node.component.html',\n  styleUrls: ['./job-node.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class JobNodeComponent implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".job-body {\n  line-height: 1.5;\n}\n",
                    "styleUrl": "./job-node.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"content\">\n  <div class=\"job-header\" fxLayout fxLayoutGap=\"2rem\">\n    <app-img class=\"media\" fxFlex=\"0 1 70px\" [content]=\"content.company.logo\"></app-img>\n    <div class=\"job-header-right\">\n      <h2 class=\"title\">{{content.company.title}}</h2>\n      <h3 class=\"position m-y-xs\">{{content.title}} {{content.number}} 名</h3>\n      <div class=\"wage bold m-y-xs\" fxLayoutAlign=\"start center\" *ngIf=\"content.salary\">\n        <mat-icon color=\"primary\">attach_money</mat-icon> {{content.salary.from}} - {{content.salary.to}} k\n      </div>\n      <div class=\"m-y-xs\" fxLayoutAlign=\"start center\">\n        <mat-icon color=\"primary\">place</mat-icon>{{content.company.address}}\n      </div>\n      <div class=\"m-y-xs\" fxLayoutAlign=\"start center\" *ngIf=\"content.deadline\">\n        <mat-icon color=\"primary\">timelapse</mat-icon>{{content.deadline}}\n      </div>\n    </div>\n  </div>\n  <div class=\"job-content m-y-sm\" fxLayout=\"row wrap\">\n    <div class=\"item m-y-xs\" fxFlex=\"50\">\n      <div class=\"label m-bottom-xs\" *ngIf=\"content.company.welfare\">诱惑福利</div>\n      <app-chip-list [content]=\"content?.company.welfare\" [classes]=\"'mini'\"></app-chip-list>\n    </div>\n    <div class=\"item m-y-xs\" fxFlex=\"50\" *ngIf=\"content.work_experience\">\n      <div class=\"label bold m-bottom-xs\">工作经验</div>\n      <div>{{content.work_experience.from}} 到 {{content.work_experience.to}} 年</div>\n    </div>\n    <div class=\"item m-y-xs\" fxFlex=\"50\" *ngIf=\"content.skill\">\n      <div class=\"label bold m-bottom-xs\">技能</div>\n      <app-chip-list [content]=\"content.skill\" [classes]=\"'mini'\"></app-chip-list>\n    </div>\n    <div class=\"item m-y-xs\" fxFlex=\"50\" *ngIf=\"content.company.phone\">\n      <div class=\"label bold m-bottom-xs\">电话</div>\n      <div>{{content.company.phone}}</div>\n    </div>\n  </div>\n  <div class=\"job-body\" [innerHTML]=\"content.body | safeHtml\"></div>\n</ng-container>\n"
        },
        {
            "name": "LawCardComponent",
            "id": "component-LawCardComponent-6e0568bec7837e7387a676c95e922be92f18eefc2fafd381dd364246a85bf61a2d1ecd787cc6c2b2a0fb4769b75cd4251d9b5af4d485a517a771698aaba96892",
            "file": "src/app/uiux/combs/node/law/law-card/law-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-law-card",
            "styleUrls": [
                "./law-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./law-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-law-card',\n  templateUrl: './law-card.component.html',\n  styleUrls: ['./law-card.component.scss'],\n})\nexport class LawCardComponent implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".law-card {\n  .card-item {\n    position: relative;\n    height: auto;\n    ::ng-deep {\n      .mat-card {\n        height: 100%;\n        box-sizing: border-box;\n        .mat-progress-bar {\n          position: absolute;\n          left: 0;\n          bottom: 0;\n          width: 100%;\n        }\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./law-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"law-card\">\n  <app-title [content]=\"content.title\"></app-title>\n  <div class=\"wrapper\">\n    <div fxLayout=\"row wrap\" fxLayoutAlign=\"start start\" fxFlex=\"100%\">\n      <app-card class=\"card-item m-x-sm m-bottom-sm\" fxFlex.xs=\"0 0 calc(100% - 4rem)\" fxFlex.sm=\"0 0 calc(50% - 4rem)\"\n        fxFlex.gt-sm=\"0 0 calc(33% - 4rem)\" *ngFor=\"let card of content.elements\" [content]=\"card\">\n      </app-card>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "LawCaseComponent",
            "id": "component-LawCaseComponent-dbda3f42e036f3bdd2ec36183d52545d966d6943cde72dffec92d4d3400949b5f137eb45ae25f8ba3196684b841da433740ffc2b637e58f5cc9529df69619827",
            "file": "src/app/uiux/combs/node/law/law-case/law-case.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-law-case",
            "styleUrls": [
                "./law-case.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./law-case.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "ICase",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "appState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AppState",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "comments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "contentState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ContentState",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "first",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "initCommentContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "nodeService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NodeService",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "userState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserState",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "NodeComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getCaseParams",
                    "args": [
                        {
                            "name": "value",
                            "type": "ICasePrams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "ICasePrams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getComments",
                    "args": [
                        {
                            "name": "timeStamp",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "timeStamp",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLawyerParams",
                    "args": [
                        {
                            "name": "lawyer",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lawyer",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getlawyers",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleLawyer",
                    "args": [
                        {
                            "name": "apiParams",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "apiParams",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initForm",
                    "args": [
                        {
                            "name": "form",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateNode",
                    "args": [
                        {
                            "name": "apiParams",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "apiParams",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  OnInit,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  AfterViewInit,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ICase, ICasePrams } from '@core/interface/node/INode';\nimport { AppState } from '@core/mobx/AppState';\nimport { FormState } from '@core/mobx/FormState';\nimport { UserState } from '@core/mobx/user/UserState';\nimport { FormService } from '@core/service/form.service';\nimport { NodeService } from '@core/service/node.service';\nimport { UtilitiesService } from '@core/service/utilities.service';\nimport { NodeComponent } from '@uiux/base/node.widget';\nimport { Subject } from 'rxjs';\nimport { ScreenService } from '@core/service/screen.service';\nimport { ContentState } from '@core/mobx/ContentState';\nimport {\n  takeUntil,\n  debounceTime,\n  distinctUntilChanged,\n  startWith,\n} from 'rxjs/operators';\n// import data from './data.json';\n\n@Component({\n  selector: 'app-law-case',\n  templateUrl: './law-case.component.html',\n  styleUrls: ['./law-case.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LawCaseComponent\n  extends NodeComponent\n  implements OnInit, AfterViewInit\n{\n  @Input() content: ICase;\n  comments: any[];\n  initCommentContent: string;\n  form: FormGroup;\n  first = true;\n  destroy$: Subject<boolean> = new Subject<boolean>();\n  constructor(\n    public appState: AppState,\n    public userState: UserState,\n    public nodeService: NodeService,\n    private cd: ChangeDetectorRef,\n    private formService: FormService,\n    private uti: UtilitiesService,\n    private formState: FormState,\n    private screenService: ScreenService,\n    public contentState: ContentState\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {}\n\n  ngAfterViewInit(): void {\n    if (this.content?.form?.length) {\n      this.initForm(this.content.form);\n    }\n    // this.getlawyers();\n    this.getComments();\n    if (this.screenService.isPlatformBrowser()) {\n      this.contentState.commentChange$\n        .pipe(takeUntil(this.destroy$))\n        .subscribe((state) => {\n          if (state) {\n            this.getComments(+new Date());\n          }\n        });\n    }\n  }\n\n  initForm(form: any[]): void {\n    this.form = this.formService.toFormGroup(form);\n    this.form.valueChanges\n      .pipe(\n        startWith({}),\n        debounceTime(1000),\n        distinctUntilChanged(),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((value) => {\n        if (!this.first) {\n          const apiParams = this.getCaseParams(value);\n          this.updateNode(apiParams);\n        }\n        this.first = false;\n      });\n  }\n\n  handleLawyer(apiParams: any): any {\n    if (!apiParams.data.relationships.lawyer.data.length) {\n      delete apiParams.data.relationships.lawyer;\n      return apiParams;\n    }\n    return apiParams;\n  }\n\n  updateNode(apiParams: any): void {\n    const uuid = this.appState.pageConfig.node.uuid;\n    this.nodeService\n      .updateLawCase(apiParams, uuid, this.userState.csrfToken)\n      .subscribe((res) => {\n        this.uti.openSnackbar('已更新！', '✓');\n      });\n  }\n\n  getlawyers(): void {\n    this.nodeService.getNodes('/api/v1/node', 'handler').subscribe((res) => {\n      const autoList = res.data.map((item: any) => {\n        return {\n          label: item.attributes.title,\n          value: item.id,\n        };\n      });\n      this.formState.autoList$.next(autoList);\n    });\n  }\n\n  getComments(timeStamp = 1): void {\n    this.cd.detectChanges();\n    this.nodeService\n      .getCommentsWitchChild(\n        this.content,\n        this.userState.currentUser.csrf_token,\n        timeStamp\n      )\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((res) => {\n        this.comments = res;\n        this.cd.detectChanges();\n      });\n  }\n\n  getCaseParams(value: ICasePrams): any {\n    return {\n      data: {\n        type: 'node--case',\n        id: this.appState.pageConfig?.node?.uuid,\n        attributes: {\n          transaction_level: value.transaction_level,\n        },\n        relationships: {\n          case_procedure: {\n            data: {\n              type: 'taxonomy_term--case_procedure',\n              id: value.case_procedure,\n            },\n          },\n        },\n      },\n    };\n  }\n\n  getLawyerParams(lawyer: any): any {\n    if (lawyer.value) {\n      const multi = lawyer.value.split(',');\n      return multi.map((item: string) => {\n        return {\n          type: 'user-user',\n          id: item,\n        };\n      });\n    } else {\n      return [];\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".date {\n  opacity: 0.6;\n  font-size: 14px;\n}\n",
                    "styleUrl": "./law-case.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "appState",
                        "type": "AppState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userState",
                        "type": "UserState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "uti",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formState",
                        "type": "FormState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "contentState",
                        "type": "ContentState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "appState",
                        "type": "AppState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userState",
                        "type": "UserState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "uti",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formState",
                        "type": "FormState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "contentState",
                        "type": "ContentState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "NodeComponent",
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"law-case position-relative p-y\">\n  <div class=\"container\">\n    <ngx-skeleton-loader *ngIf=\"!content\" count=\"20\" appearance=\"line\"></ngx-skeleton-loader>\n    <ng-container *ngIf=\"content\">\n      <app-law-header [content]=\"content\"></app-law-header>\n      <div class=\"content m-y-sm\">\n        <div class=\"block\" ngClass.gt-sm=\"p-y p-x\" ngClass.lt-md=\"p-y-xs p-x-xs\" *ngFor=\"let item of content.block\">\n          <ng-container [ngSwitch]=\"item.type\">\n            <law-showcase *ngSwitchCase=\"'showcase'\" [content]=\"item\" [form]=\"form\">\n            </law-showcase>\n            <app-law-files *ngSwitchCase=\"'files'\" [content]=\"item\"></app-law-files>\n            <app-law-table *ngSwitchCase=\"'table'\" [content]=\"item\">\n            </app-law-table>\n            <app-law-card *ngSwitchCase=\"'card'\" [content]=\"item\"></app-law-card>\n            <app-text *ngSwitchDefault [content]=\"item\"></app-text>\n          </ng-container>\n        </div>\n      </div>\n      <div class=\"comment-wrapper\" ngClass.gt-sm=\"m-y-sm p-y p-x\" ngClass.lt-md=\"m-y-xs p-y-xs p-x-xs\">\n        <app-comment-form *ngIf=\"content?.params?.comment\" [content]=\"content\" [type]=\"'add'\">\n        </app-comment-form>\n        <app-comment-list [comments]=\"comments\" [content]=\"content\">\n        </app-comment-list>\n      </div>\n    </ng-container>\n  </div>\n</div>\n"
        },
        {
            "name": "LawFilesComponent",
            "id": "component-LawFilesComponent-3a4aec5cdd6559e390d373ef4626980f39e26257412f2fe08c90e1a621c839fce961ad05fbb4f52caf294f4622af9c53130c19f9e4c46f2b5f6a62ee8a9811ee",
            "file": "src/app/uiux/combs/node/law/law-files/law-files.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-law-files",
            "styleUrls": [
                "./law-files.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./law-files.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { element } from 'protractor';\n\n@Component({\n  selector: 'app-law-files',\n  templateUrl: './law-files.component.html',\n  styleUrls: ['./law-files.component.scss'],\n})\nexport class LawFilesComponent implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".box {\n  border-radius: 10px;\n  .inner {\n    height: 100%;\n    box-sizing: border-box;\n  }\n}\n",
                    "styleUrl": "./law-files.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"law-files\">\n  <app-title [content]=\"content.title\"></app-title>\n  <div class=\"wrapper\" fxLayout=\"row wrap\">\n    <div class=\"box m-y-xs m-x-xs\" fxFlex.lt-sm=\"100\" fxFlex.gt-xs=\"0 0 calc(50% - 2rem)\"\n      *ngFor=\"let box of content.elements\">\n      <div class=\"inner p-x-sm p-y-sm\">\n        <div class=\"label mat-h3 bold\">{{box.label}}</div>\n        <div class=\"li one-line\" *ngFor=\"let file of box.elements\">\n          <app-dynamic-widgets [content]=\"file\"></app-dynamic-widgets>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "LawHeaderComponent",
            "id": "component-LawHeaderComponent-f77cbe25f87167491f8705ad70e342b3a9a7b923da5951ba5774add3a0de1dc10ec3a68f26c136b448e8b55342fe550d7b54efb1f1c042eb1bb0ed8ea5d56b58",
            "file": "src/app/uiux/combs/node/law/law-header/law-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-law-header",
            "styleUrls": [
                "./law-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./law-header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\n@Component({\n  selector: 'app-law-header',\n  templateUrl: './law-header.component.html',\n  styleUrls: ['./law-header.component.scss'],\n})\nexport class LawHeaderComponent implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".date {\n  font-size: 14px;\n}\n",
                    "styleUrl": "./law-header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"case-header\">\n  <div class=\"title\">\n    <h2 class=\"m-bottom-xs bold\" ngClass.gt-sm=\"mat-display-1\">{{content.title}}</h2>\n  </div>\n  <div class=\"title-banner\" fxLayout=\"row warp\" fxLayoutAlign=\"space-between center\">\n    <div class=\"date\">\n      <div *ngFor=\"let date of content.date\">\n        <span>{{date.label}} | </span>\n        <span>{{date.value}}</span>\n      </div>\n    </div>\n    <div class=\"actions p-y-sm\" *ngIf=\"content.actions\">\n      <div class=\"inner\" fxLayout=\"row\" fxLayoutGap=\"1rem\">\n        <app-dynamic-widgets [content]=\"action\" *ngFor=\"let action of content.actions\"></app-dynamic-widgets>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "LawShowcaseComponent",
            "id": "component-LawShowcaseComponent-de2d31c73c0243cfd9210260792b94f6faec65854e91c447ccff1e320d2ac5415fe26cc41970b5e7d6bd975496d975e190f7ebda909ec0e485980c15779f5491",
            "file": "src/app/uiux/combs/node/law/law-showcase/law-showcase.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "law-showcase",
            "styleUrls": [
                "./law-showcase.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./law-showcase.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "FormGroup",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'law-showcase',\n  templateUrl: './law-showcase.component.html',\n  styleUrls: ['./law-showcase.component.scss'],\n})\nexport class LawShowcaseComponent implements OnInit {\n  @Input() content: any;\n  @Input() form: FormGroup;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".law-showcase::ng-deep {\n  table {\n    thead {\n      display: none;\n    }\n    tbody {\n      tr {\n        td:nth-child(2n + 1) {\n          padding-left: 0;\n          text-align: center;\n          font-weight: 500;\n        }\n        td:nth-child(2n) {\n          width: 50%;\n          padding-left: 2rem;\n          padding-right: 2rem;\n        }\n      }\n      .mat-form-field-underline {\n        display: none;\n      }\n    }\n    .mat-form-field-wrapper {\n      padding-bottom: 0;\n    }\n    .mat-form-field-infix {\n      border-top: 0;\n    }\n  }\n}\n",
                    "styleUrl": "./law-showcase.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"law-showcase\" *ngIf=\"content\">\n  <div fxLayout=\"row wrap\">\n    <app-dynamic-table fxFlex.lt-sm=\"100\" fxFlex.gt-xs=\"100\" *ngFor=\"let table of content.elements\" [content]=\"table\"\n      [form]=\"form\"></app-dynamic-table>\n  </div>\n</div>\n"
        },
        {
            "name": "LawTableComponent",
            "id": "component-LawTableComponent-2b928906087092f145bea46f3ba8ee0d693b1b9505aef2150a0dc0c8375256b3a74ec3738bfc63f75a441621e1b73805d79555de97fe7c700b540cb8eaae671e",
            "file": "src/app/uiux/combs/node/law/law-table/law-table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-law-table",
            "styleUrls": [
                "./law-table.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./law-table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-law-table',\n  templateUrl: './law-table.component.html',\n  styleUrls: ['./law-table.component.scss'],\n})\nexport class LawTableComponent implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".law-case-table {\n  ::ng-deep {\n    .sub {\n      font-size: small;\n      opacity: 0.5;\n    }\n    .mat-cell {\n      line-height: 1;\n    }\n    .mat-header-cell {\n      font-size: 14px;\n      color: inherit;\n    }\n  }\n}\n",
                    "styleUrl": "./law-table.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"law-table\">\n  <app-title [content]=\"content.title\"></app-title>\n  <app-dynamic-table [content]=\"content\"></app-dynamic-table>\n</div>\n"
        },
        {
            "name": "LightComponent",
            "id": "component-LightComponent-3910f4a99c1961b005a91b8f4aa7907465af911497be50502949c1d65dd5f1361e99dbb273bf2b0d71ea512479eb444eff02445a508be581faf195b349ce4e8e",
            "file": "src/app/core/branding/footer/light/light.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-light",
            "styleUrls": [
                "./light.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./light.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "screen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScreenState",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "utilities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UtilitiesService",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { UtilitiesService } from '@core/service/utilities.service';\nimport { ScreenState } from '../../../mobx/screen/ScreenState';\n\n@Component({\n  selector: 'app-light',\n  templateUrl: './light.component.html',\n  styleUrls: ['./light.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LightComponent implements OnInit {\n  @Input() content: any;\n  constructor(public screen: ScreenState, public utilities: UtilitiesService) {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./light.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "screen",
                        "type": "ScreenState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilities",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "screen",
                        "type": "ScreenState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilities",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"footer-light\">\n  <div class=\"container\">\n    <app-menu-item [content]=\"content.mainMenu\" [mobileMenu]=\"content.mobileMenu\"></app-menu-item>\n  </div>\n  <div class=\"footer-bottom text-center p-y-sm\">\n    <div class=\"container\">\n      <div class=\"brand\" fxLayoutAlign=\"space-between center\">\n        <h2 class=\"mat-h2 m-bottom-0\">{{content.logo.label}}</h2>\n        <p>©{{utilities.fullYear}} <span [innerHTML]=\"content.copyRight|safeHtml\"></span></p>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "LineYearComponent",
            "id": "component-LineYearComponent-04dd43a44a8fd8438b9c0241d300e11f908dd8922cf6185dbf29231a3a29bb3f34aa479c277e0e77acff4a6735bfc1d2535a296fd29b97f810ba170c60375351",
            "file": "src/app/uiux/widgets/line-year/line-year.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-line-year",
            "styleUrls": [
                "./line-year.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./line-year.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "ILineYear",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { ILineYear } from '@core/interface/widgets/ILineYear';\n\n@Component({\n  selector: 'app-line-year',\n  templateUrl: './line-year.component.html',\n  styleUrls: ['./line-year.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LineYearComponent implements OnInit {\n  @Input() content: ILineYear;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/theme/variable/breakpoint\";\n\n.line-year {\n  margin-bottom: 10px;\n  padding: 10px 0;\n  font-size: 18px;\n  line-height: 1.333;\n  margin-top: 20px;\n  &:before {\n    content: \"\";\n    width: 18px;\n    height: 18px;\n    display: block;\n    z-index: 3;\n    position: relative;\n\n    left: 5px;\n    top: -20px;\n    border-radius: 65px;\n  }\n}\n\n@media #{$gt-md} {\n  .line-year {\n    font-size: 30px;\n    margin-bottom: 0;\n  }\n}\n",
                    "styleUrl": "./line-year.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"content\">\n  <h3 class=\"line-year\">\n    {{content.title}}\n  </h3>\n  <div class=\"content y-p-sm\">\n    <p [innerHTML]=\"content.body | safeHtml\"></p>\n  </div>\n</ng-container>\n"
        },
        {
            "name": "LinkComponent",
            "id": "component-LinkComponent-bb409bb774cc469409744d5bb8c9e0ec3ab50a0ee47a3b8cc132ae81b1ddb0b80b1c9381a49e1ab84f79ad903d375c3ca4c9d249a74f140bdadd09bab3e0396c",
            "file": "src/app/uiux/widgets/link/link.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-link",
            "styleUrls": [
                "./link.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./link.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "ILink",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "href",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "routeService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RouteService",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getClasses",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isAbsolute",
                    "args": [
                        {
                            "name": "href",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "href",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { ILink } from '@core/interface/widgets/ILink';\nimport { RouteService } from '@core/service/route.service';\nimport { UtilitiesService } from '@core/service/utilities.service';\n@Component({\n  selector: 'app-link',\n  templateUrl: './link.component.html',\n  styleUrls: ['./link.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent implements OnInit {\n  @Input() content: ILink;\n  classes: any;\n  href: string;\n  constructor(\n    public routeService: RouteService,\n    private util: UtilitiesService\n  ) {}\n\n  ngOnInit(): void {\n    if (!this.content) {\n      return;\n    }\n    this.getClasses();\n  }\n\n  isAbsolute(href: string): boolean {\n    return this.routeService.isAbsolute(href);\n  }\n\n  getClasses(): void {\n    const obj: any = {};\n    if (this.content.classes) {\n      obj[this.content.classes] = true;\n    }\n    if (this.content.href) {\n      const type = this.util.getFileType(this.content.href);\n      obj[type] = type || false;\n    }\n    this.classes = obj;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "a {\n  &:hover {\n    cursor: pointer;\n    opacity: 0.85;\n  }\n}\n\n.excel,\n.pdf,\n.txt,\n.word,\n.picture {\n  &:before {\n    content: \"\";\n    display: inline-block;\n    margin-right: 6px;\n    vertical-align: text-top;\n    width: 16px;\n    background-size: contain;\n    height: 16px;\n  }\n}\n\n.pdf {\n  &:before {\n    background-image: url(\"/assets/icons/file-pdf.svg\");\n  }\n}\n.excel {\n  &:before {\n    background-image: url(\"/assets/icons/file-excel.svg\");\n  }\n}\n.txt {\n  &:before {\n    background-image: url(\"/assets/icons/file-txt.svg\");\n  }\n}\n.word {\n  &:before {\n    background-image: url(\"/assets/icons/file-word.svg\");\n  }\n}\n.picture {\n  &:before {\n    background-image: url(\"/assets/icons/file-image.svg\");\n  }\n}\n",
                    "styleUrl": "./link.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "routeService",
                        "type": "RouteService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "util",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "routeService",
                        "type": "RouteService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "util",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"content\">\n  <a *ngIf=\"isAbsolute(this.content.href); else relative\" [ngClass]=\"classes\"\n    [href]=\"this.content.href || 'javascript:void(0);'\" [target]=\"content?.target || '_self'\"\n    [innerHTML]=\"content?.label | safeHtml\" title=\"{{content.label}}\" rel=\"noopener\"></a>\n  <ng-template #relative>\n    <a *ngIf=\"content.href;else void\" [routerLink]=\"[this.content.href]\" [routerLinkActive]=\"['active']\"\n      [target]=\"content?.target || '_self'\" [routerLinkActiveOptions]=\"{exact: true}\"\n      [queryParams]=\"content.queryParams\" [fragment]=\"content.fragment\" [ngClass]=\"classes\"\n      [innerHTML]=\"content?.label | safeHtml\" title=\"{{content.label}}\"></a>\n    <ng-template #void>\n      <a [ngClass]=\"classes\" href=\"javascript:void(0);\" [target]=\"content?.target || '_self'\"\n        [innerHTML]=\"content?.label | safeHtml\" title=\"{{content.label}}\"></a>\n    </ng-template>\n  </ng-template>\n</ng-container>\n"
        },
        {
            "name": "ListComponent",
            "id": "component-ListComponent-ab5822d5bd7c3ccc5cb85816af290a5b2d2b961be6e65e7c909a697639cfd98802f7196a89deb89ea58309d2d399ee974a988f9d1118f05c0404818a10326b41",
            "file": "src/app/uiux/combs/list/list/list.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-list",
            "styleUrls": [
                "./list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "links",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "pager",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "pageChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "p",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPageChange",
                    "args": [
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackByFn",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  Output,\n  OnInit,\n  EventEmitter,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { ScreenService } from '@core/service/screen.service';\n\n@Component({\n  selector: 'app-list',\n  templateUrl: './list.component.html',\n  styleUrls: ['./list.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ListComponent implements OnInit {\n  @Input() content: any;\n  @Input() links: any;\n  @Input() pager: any;\n  @Input() loading: boolean;\n  @Output() pageChange: EventEmitter<string> = new EventEmitter();\n  p = 1;\n\n  constructor(private screenService: ScreenService) {}\n\n  ngOnInit(): void {}\n\n  onPageChange(link: string): void {\n    this.pageChange.emit(link);\n    this.screenService.gotoTop();\n  }\n\n  trackByFn(index: number, item: any): number {\n    return index;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/theme/variable/breakpoint\";\n.list {\n  @media #{$lt-md} {\n    ::ng-deep {\n      .feature-inner {\n        margin-left: -20px;\n        margin-right: -20px;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"list\">\n  <div *ngIf=\"loading\" class=\"m-y\" fxLayoutAlign=\"center center\">\n    <app-spinner [content]=\"{color:'primary', size:40}\"></app-spinner>\n  </div>\n  <ng-container *ngIf=\"!loading\">\n    <ng-container *ngIf=\"links\">\n      <app-showcase3v3 [content]=\"item\" *ngFor=\"let item of content; trackBy: trackByFn\">\n      </app-showcase3v3>\n      <app-pagination-simple (pageChange)=\"onPageChange($event)\" [links]=\"links\"></app-pagination-simple>\n    </ng-container>\n    <ng-container *ngIf=\"pager\">\n      <app-showcase3v3 [content]=\"item\" *ngFor=\"let item of content | paginate: { itemsPerPage: pager.itemsPerPage || 20, currentPage: p }; trackBy:\n        trackByFn\">\n      </app-showcase3v3>\n      <app-pagination (pageChange)=\"p = $event\"></app-pagination>\n    </ng-container>\n  </ng-container>\n</div>\n"
        },
        {
            "name": "ListThinComponent",
            "id": "component-ListThinComponent-72465b8f0854556f6dad8f88692474226b95c3aed92587cb57de937efd0ee29eb7924e58aa678c5e9af6618af7c464856bdd844a7bb79383d50ffffe9ecd638a",
            "file": "src/app/uiux/combs/list/list/list-thin/list-thin.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-list-thin",
            "styleUrls": [
                "./list-thin.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list-thin.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "pager",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "pageChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "p",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPageChange",
                    "args": [
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackByFn",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { ScreenService } from '@core/service/screen.service';\n@Component({\n  selector: 'app-list-thin',\n  templateUrl: './list-thin.component.html',\n  styleUrls: ['./list-thin.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ListThinComponent implements OnInit {\n  @Input() content: any;\n  @Input() loading: boolean;\n  @Input() pager: any;\n\n  @Output() pageChange: EventEmitter<string> = new EventEmitter();\n  p = 1;\n  constructor(private screenService: ScreenService) {}\n\n  ngOnInit(): void {}\n\n  onPageChange(link: string): void {\n    this.pageChange.emit(link);\n    this.screenService.gotoTop();\n  }\n\n  trackByFn(index: number, item: any): number {\n    return index;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".item-bottom {\n  font-size: 14px;\n}\n",
                    "styleUrl": "./list-thin.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"list-thin\" *ngIf=\"content\">\n  <div *ngIf=\"loading\" class=\"m-y\" fxLayoutAlign=\"center center\">\n    <app-spinner [content]=\"{color:'primary', size:40}\"></app-spinner>\n  </div>\n  <ng-container *ngIf=\"content?.length;else empty\">\n    <div fxLayout=\"column\" class=\"item m-bottom-sm p-y-xs p-x-xs\"\n      *ngFor=\"let item of content | paginate: { itemsPerPage: pager.itemsPerPage || 20, currentPage: p }; trackBy: trackByFn\">\n      <app-link [content]=\"item.link\"></app-link>\n      <div class=\"item-bottom\" fxLayout=\"row wrap\" fxLayoutAlign=\"start center\">\n        <div class=\"meta m-right-sm\" fxLayoutGap=\"1rem\" fxLayout>\n          <div *ngFor=\"let item of item.meta\">\n            {{item.label | ucfirst}}\n          </div>\n        </div>\n        <div class=\"actions\" *ngIf=\"item?.actions?.length\">\n          <app-dynamic-widgets [data]=\"action?.params\" [content]=\"action\" *ngFor=\"let action of item.actions\">\n          </app-dynamic-widgets>\n        </div>\n      </div>\n    </div>\n    <app-pagination (pageChange)=\"p = $event\"></app-pagination>\n  </ng-container>\n  <ng-template #empty>\n    <div fxLayoutAlign=\"center center\" class=\"p-y m-y\">\n      没有数据\n    </div>\n  </ng-template>\n</div>\n"
        },
        {
            "name": "LocationComponent",
            "id": "component-LocationComponent-d001f2d5684b6434d5f161eaf87350cb7d7b590d5eee1617e4ae533c8cb5b47a17fd24067aaba8fba6806ad0f2f4762b66cdcc0af18fda1146a40a4308edfcd7",
            "file": "src/app/uiux/combs/map/location/location.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-location",
            "styleUrls": [
                "./location.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./location.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-location',\n  templateUrl: './location.component.html',\n  styleUrls: ['./location.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LocationComponent implements OnInit {\n  @Input() content: any;\n\n  constructor() {}\n\n  ngOnInit(): void {\n    this.content.elements = this.content.elements.map((item: any) => {\n      return {\n        params: item.company,\n      };\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./location.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"position-relative\" *ngIf=\"content\">\n  <a class=\"anchor\" *ngIf=\"content.id\" [id]=\"content.id\"></a>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n  <app-title [content]=\"content.title\" *ngIf=\"content.title\"></app-title>\n  <app-map class=\"display-block\" [ngStyle]=\"content.style\" *ngIf=\"content\" [content]=\"content\">\n  </app-map>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n</div>\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-0fe9fca5165c8e42ff59578cf75bb9eeb0148b2dc6bf4ded7587851305c494ab7e096fee4d7d686348736e43a0130ea79c1eb3dfef8a581c7e722968a8ee39ef",
            "file": "src/app/modules/user/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "appState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AppState",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "coreConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICoreConfig",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "CORE_CONFIG"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "hide",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "phoneForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "screenState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScreenState",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "userForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "userService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserService",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "userState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserState",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getCode",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loginByPhone",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  Inject,\n} from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { UserState } from '@core/mobx/user/UserState';\nimport { ScreenState } from '@core/mobx/screen/ScreenState';\nimport { AppState } from '@core/mobx/AppState';\nimport { TagsService } from '@core/service/tags.service';\nimport { UserService } from '@core/service/user.service';\nimport { ScreenService } from '@core/service/screen.service';\nimport { CORE_CONFIG } from '@core/token/core.config';\nimport { ICoreConfig } from '@core/mobx/IAppConfig';\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent implements OnInit, AfterViewInit, OnDestroy {\n  hide = true;\n  error: string;\n  userForm: FormGroup;\n  phoneForm: FormGroup;\n\n  config: any;\n\n  constructor(\n    private fb: FormBuilder,\n    public userState: UserState,\n    private router: Router,\n    private route: ActivatedRoute,\n    public screenState: ScreenState,\n    private tagsService: TagsService,\n    public appState: AppState,\n    public userService: UserService,\n    private screenService: ScreenService,\n    @Inject(CORE_CONFIG) public coreConfig: ICoreConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.tagsService.setTitle('欢迎登录！');\n    this.userForm = this.fb.group({\n      name: ['', Validators.required],\n      pass: ['', Validators.required],\n    });\n\n    this.phoneForm = this.fb.group({\n      phone: [\n        '',\n        [\n          Validators.required,\n          Validators.pattern('1(3|4|5|7|8)\\\\d{9}'),\n          Validators.minLength(11),\n          Validators.maxLength(11),\n        ],\n      ],\n      code: ['', Validators.required],\n    });\n    if (this.screenService.isPlatformBrowser()) {\n      this.userState.user$.subscribe((user) => {\n        if (user.authenticated) {\n          setTimeout(() => {\n            window.location.href =\n              this.route.snapshot.queryParams.returnUrl ||\n              this.coreConfig.login.loginRedirect;\n          }, 2000);\n        }\n      });\n    }\n  }\n\n  ngAfterViewInit(): void {}\n\n  get f(): any {\n    return this.userForm.controls;\n  }\n\n  get formPhone(): any {\n    return this.phoneForm.controls;\n  }\n\n  login(): void {\n    if (this.userForm.invalid) {\n      return;\n    }\n\n    this.userState.login(this.userForm.value.name, this.userForm.value.pass);\n  }\n\n  loginByPhone(): void {\n    this.userState.loginByPhone(\n      this.phoneForm.value.phone,\n      this.phoneForm.value.code\n    );\n  }\n\n  getCode(event: any): any {\n    event.preventDefault();\n    if (!this.phoneForm.value.phone) {\n      this.error = '请输入手机号码';\n      return false;\n    }\n    this.userService.getCode(this.phoneForm.value.phone).subscribe((code) => {\n      this.config = {\n        leftTime: 60,\n        format: 'ss',\n      };\n    });\n  }\n\n  ngOnDestroy(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/theme/variable/breakpoint\";\n\n.login-container {\n  max-height: 500px;\n  min-height: calc(100vh - 76px);\n\n  ::ng-deep .mat-tab-label {\n    min-width: auto !important;\n  }\n}\n\n:host-context(.mat-dialog-container) {\n  .login-container {\n    max-height: none;\n    min-height: auto;\n    padding: 4rem 0;\n  }\n}\n\n.login-wrapper {\n  max-width: 800px;\n  max-height: 600px;\n  border-radius: 10px;\n\n  .login-form {\n    padding: 2rem;\n    z-index: 2;\n    overflow: hidden;\n    .form-scroll {\n      // top: 500px;\n      position: relative;\n    }\n    &.is-login {\n      .form-scroll {\n        top: 0;\n      }\n    }\n  }\n\n  @media #{$xs} {\n    .login-form {\n      width: 80vw;\n    }\n  }\n\n  @media #{$gt-xs} {\n    .login-form {\n      padding: 6rem 4rem;\n      min-width: 400px;\n      min-height: 400px;\n    }\n\n    border-radius: 20px;\n    overflow: hidden;\n  }\n}\n\n.login-second {\n  min-width: 300px;\n\n  img {\n    max-width: 100%;\n    max-height: 100%;\n    width: 100%;\n    border-top-left-radius: 20px;\n    border-bottom-left-radius: 20px;\n  }\n}\n\ninput.example-right-align::-webkit-outer-spin-button,\ninput.example-right-align::-webkit-inner-spin-button {\n  display: none;\n}\n\ninput.example-right-align {\n  -moz-appearance: textfield;\n}\n\n.error {\n  border-radius: 4px;\n}\n\n.mark-bg {\n  width: 0;\n  height: 100%;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: auto;\n  z-index: 1;\n}\n\n.code {\n  padding: 0px 10px;\n  position: absolute;\n  top: -33px;\n  right: 0;\n}\n",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userState",
                        "type": "UserState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screenState",
                        "type": "ScreenState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tagsService",
                        "type": "TagsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appState",
                        "type": "AppState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "coreConfig",
                        "type": "ICoreConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userState",
                        "type": "UserState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screenState",
                        "type": "ScreenState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tagsService",
                        "type": "TagsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appState",
                        "type": "AppState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "coreConfig",
                        "type": "ICoreConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnDestroy"
            ],
            "accessors": {
                "f": {
                    "name": "f",
                    "getSignature": {
                        "name": "f",
                        "type": "any",
                        "returnType": "any",
                        "line": 79
                    }
                },
                "formPhone": {
                    "name": "formPhone",
                    "getSignature": {
                        "name": "formPhone",
                        "type": "any",
                        "returnType": "any",
                        "line": 83
                    }
                }
            },
            "templateData": "<div class=\"login-container\" fxLayoutAlign=\"center center\">\n  <div class=\"login-wrapper m-x position-relative\" fxLayout>\n    <div *ngIf=\"!screenState.eq('xs')\" class=\"login-second position-relative\" fxFlex.xs=\"100\" fxFlex.gt-xs=\"50\"\n      fxLayoutAlign=\"center center\">\n      <app-dynamic-widgets *ngIf=\"coreConfig.login.left;else default\" [content]=\"coreConfig.login.left\">\n      </app-dynamic-widgets>\n    </div>\n    <ng-template #default>\n      <img src=\"/assets/images/login-second.png\" alt=\"\">\n    </ng-template>\n    <div class=\"login-form position-relative\" [class.is-login]=\"userState.authenticated\" fxFlex.xs=\"100\"\n      fxFlex.gt-xs=\"50\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n      <div class=\"width-100 form-scroll\" *ngIf=\"!userState.loading\">\n        <ng-container *ngIf=\"!userState.authenticated\">\n          <div *ngIf=\"userState.error||error\" class=\"error p-y-xs p-x-xs m-bottom-xs\">{{userState.error}}{{error}}\n          </div>\n          <mat-tab-group animationDuration=\"0ms\" [disablePagination]=\"true\">\n            <mat-tab label=\"{{coreConfig.login.phoneLogin.tabLabel || '手机登录'}}\"\n              *ngIf=\"coreConfig.login?.phoneLogin?.enable\">\n              <form class=\"p-y-sm\" fxLayout=\"column\" [formGroup]=\"phoneForm\" (ngSubmit)=\"loginByPhone()\">\n                <mat-form-field appearance=\"fill\">\n                  <mat-label>请输入手机号码</mat-label>\n                  <mat-icon matSuffix>phone_iphone</mat-icon>\n                  <input type=\"text\" matInput formControlName=\"phone\">\n                  <mat-error *ngIf=\"formPhone.phone.errors?.pattern\">\n                    {{coreConfig.login.phoneLogin.error || '请输入正确的手机号码'}}</mat-error>\n                </mat-form-field>\n                <mat-form-field appearance=\"fill\">\n                  <mat-label>验证码</mat-label>\n                  <input matInput type=\"text\" formControlName=\"code\">\n                  <button disabled=\"{{formPhone.phone.errors? true: false}}\" (click)=\"getCode($event)\" class=\"code\"\n                    matSuffix color=\"primary\" mat-raised-button aria-label=\"code\">\n                    <small>\n                      发送验证码\n                      <ng-container *ngIf=\"config?.leftTime\">\n                        (<countdown #cd [config]=\"config\"></countdown>)\n                      </ng-container>\n                    </small>\n                  </button>\n                </mat-form-field>\n                <button type=\"submit\" mat-raised-button color=\"primary\">\n                  <div fxLayoutAlign=\"center center\">\n                    <div class=\"p-x-xs\">{{coreConfig.login.phoneLogin.submitLabel}}</div>\n                  </div>\n                </button>\n              </form>\n            </mat-tab>\n            <mat-tab label=\"{{coreConfig.login.pswLogin.tabLabel || '密码登录'}}\"\n              *ngIf=\"coreConfig.login?.pswLogin?.enable\">\n              <form class=\"p-y-sm\" fxLayout=\"column\" [formGroup]=\"userForm\" (ngSubmit)=\"login()\">\n                <mat-form-field appearance=\"fill\">\n                  <mat-label>用户名</mat-label>\n                  <mat-icon matSuffix>person</mat-icon>\n                  <input matInput formControlName=\"name\" autocomplete=\"username\">\n                </mat-form-field>\n                <mat-form-field appearance=\"fill\">\n                  <mat-label>密码</mat-label>\n                  <input matInput [type]=\"hide ? 'password' : 'text'\" formControlName=\"pass\"\n                    autocomplete=\"current-password\">\n                  <button mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\"\n                    [attr.aria-pressed]=\"hide\">\n                    <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\n                  </button>\n                </mat-form-field>\n                <button type=\"submit\" mat-raised-button color=\"primary\">\n                  <div fxLayoutAlign=\"center center\">\n                    <div class=\"p-x-xs\">{{coreConfig.login.pswLogin.submitLabel}}</div>\n                  </div>\n                </button>\n              </form>\n            </mat-tab>\n          </mat-tab-group>\n        </ng-container>\n        <ng-container *ngIf=\"userState.authenticated\">\n          <h1 class=\"mat-h1 text-base\">\n            Hi, {{userState.currentUser.display_name}}\n          </h1>\n          <mat-divider></mat-divider>\n          <p class=\"text-base m-top-xs\">欢迎。</p>\n        </ng-container>\n      </div>\n      <mat-spinner diameter=\"50\" color=\"accent\" *ngIf=\"userState.loading\"></mat-spinner>\n    </div>\n    <div class=\"mark-bg position-absolute\"></div>\n  </div>\n</div>\n"
        },
        {
            "name": "LoopWidgetsComponent",
            "id": "component-LoopWidgetsComponent-5d09ed6e2e052e66ad197cc691640933f4ebe7b1de94e875ca2e6150e62d348715838760486d52bd2f1dd565719dd1f0665656d2d9dacb99bd4d78a4cfb17e2c",
            "file": "src/app/uiux/widgets/loop-widgets/loop-widgets.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-loop-widgets",
            "styleUrls": [
                "./loop-widgets.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./loop-widgets.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-loop-widgets',\n  templateUrl: './loop-widgets.component.html',\n  styleUrls: ['./loop-widgets.component.scss'],\n})\nexport class LoopWidgetsComponent implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./loop-widgets.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"content\">\n  <ng-container *ngFor=\"let item of content\">\n    <app-dynamic-widgets [content]=\"item\"></app-dynamic-widgets>\n  </ng-container>\n</ng-container>\n"
        },
        {
            "name": "ManageBlockComponent",
            "id": "component-ManageBlockComponent-c18ad67baeccf82aa31122f1674bd62e541ee6274a5ac22fe76327830e758ab1c43c3d0658e49033a5b8c8850ba82ce12db45bb1b5b8c8c92acc140ff0d33efc",
            "file": "src/app/modules/manage/manage-block/manage-block.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-manage-block",
            "styleUrls": [
                "./manage-block.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./manage-block.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "blocks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDynamicTable",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "manageSerive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ManageService",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ManageService } from '@core/service/manage.service';\nimport { IDynamicTable } from '@uiux/widgets/IWidgets';\nimport { of } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n// import data from './block.json';\n@Component({\n  selector: 'app-manage-block',\n  templateUrl: './manage-block.component.html',\n  styleUrls: ['./manage-block.component.scss'],\n})\nexport class ManageBlockComponent implements OnInit {\n  blocks: IDynamicTable;\n  constructor(public manageSerive: ManageService) {}\n\n  ngOnInit(): void {\n    const header = [\n      {\n        label: '序号',\n        key: 'index',\n      },\n      {\n        label: '名称',\n        key: 'label',\n      },\n      {\n        label: 'id',\n        key: 'id',\n      },\n      {\n        label: '描述',\n        key: 'description',\n      },\n    ];\n    this.manageSerive\n      .getBlock()\n      // .pipe(\n      //   map((res: any) => {\n      //     if (!res.data.length) {\n      //       return data;\n      //     }\n      //     return {};\n      //   })\n      // )\n      .subscribe((blocks: any) => {\n        console.log(blocks);\n        if (!blocks.data.length) {\n          return;\n        }\n        this.blocks = {\n          header,\n          elements: blocks.data.map((block: any, index: number) => {\n            const attr = block.attributes;\n            return {\n              index: index + 1,\n              label: attr.label,\n              description: attr.description,\n              id: attr.drupal_internal__id,\n            };\n          }),\n        };\n      });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./manage-block.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "manageSerive",
                        "type": "ManageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "manageSerive",
                        "type": "ManageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"manage-block\">\n  <app-spacer [size]=\"'md'\"></app-spacer>\n  <div class=\"container\">\n    <app-dynamic-table [content]=\"blocks\" *ngIf=\"blocks\"></app-dynamic-table>\n  </div>\n  <app-spacer [size]=\"'md'\"></app-spacer>\n</div>\n"
        },
        {
            "name": "ManageMediaComponent",
            "id": "component-ManageMediaComponent-316bbdb7ef68ed3aabc0e97a0a2c549b76f1aca916b45e047cbf4dea28166c30aa86635297ebfefe8ee7894a90ef99849fec1fccfd94fe66abf1dde33882ac60",
            "file": "src/app/modules/manage/manage-media/manage-media.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-manage-media",
            "styleUrls": [
                "./manage-media.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./manage-media.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "getFiles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { ManageService } from '@core/service/manage.service';\nimport { UtilitiesService } from '@core/service/utilities.service';\n\n@Component({\n  selector: 'app-manage-media',\n  templateUrl: './manage-media.component.html',\n  styleUrls: ['./manage-media.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ManageMediaComponent implements OnInit {\n  content: any;\n  constructor(\n    private manageService: ManageService,\n    private cd: ChangeDetectorRef,\n    private utli: UtilitiesService\n  ) {}\n\n  ngOnInit(): void {\n    this.getFiles();\n  }\n\n  getFiles(): void {\n    this.manageService.getFiles().subscribe((files) => {\n      console.log(files);\n      const iconPath = '/assets/icons';\n      this.content = files.data.map((item: any) => {\n        const attr = item.attributes;\n        const type = this.utli.getFileType(attr.uri.url);\n        if (type === 'picture') {\n          return {\n            type: 'feature-box',\n            width: '20',\n            fullIcon: 'fullscreen',\n            ratios: 'media-4-3',\n            hoverIcon: true,\n            img: {\n              classes: 'object-fit',\n              src: attr.uri.url,\n              alt: attr.filename,\n            },\n          };\n        } else {\n          return {\n            type: 'feature-box',\n            width: '20',\n            fullIcon: 'fullscreen',\n            ratios: 'media-4-3',\n            hoverIcon: true,\n            openIcon: 'file_download',\n            link: attr.uri.url,\n            img: {\n              classes: 'object-fill',\n              src:\n                type === 'pdf'\n                  ? `${iconPath}/file-pdf.svg`\n                  : type === 'excel'\n                  ? `${iconPath}/fil-excel.svg`\n                  : `${iconPath}/file-word.svg`,\n              alt: attr.filename,\n            },\n          };\n        }\n      });\n      this.cd.detectChanges();\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./manage-media.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "manageService",
                        "type": "ManageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utli",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "manageService",
                        "type": "ManageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utli",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"manage-media position-relative m-y\" *ngIf=\"content\">\n  <div class=\"container\">\n    <div class=\"inner\" fxLayout=\"row wrap\">\n      <div class=\"masonry-item\" *ngFor=\"let item of content\" fxFlex=\"0 0 25\">\n        <app-dynamic-widgets class=\"display-block\" [content]=\"item\"></app-dynamic-widgets>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "MapComponent",
            "id": "component-MapComponent-b22b047e99a056572fd22eb75b014c405306d0c9abc1e3c9e9c8ba6256f6205bae5c85c21a17bb331043b1cfd48fd3152f3d959b3d64749491be26192a19354e",
            "file": "src/app/uiux/widgets/map/map.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-map",
            "styleUrls": [
                "./map.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./map.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "AMap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "center",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "geocoder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "map",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "markers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "getMarkers",
                    "args": [
                        {
                            "name": "lists",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lists",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPosition",
                    "args": [
                        {
                            "name": "lists",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lists",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initMap",
                    "args": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onMarkers",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "renderMap",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setFitView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setMarkers",
                    "args": [
                        {
                            "name": "lists",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lists",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "simpleMarkerTem",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  Input,\n  OnDestroy,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport { IMark } from '@core/interface/IAmap';\nimport { AMapState } from '@core/mobx/amap/AMapState';\nimport { AppState } from '@core/mobx/AppState';\nimport { AmapService } from '@core/service/amap.service';\nimport { isArray } from 'lodash-es';\nimport { CORE_CONFIG } from '@core/token/core.config';\nimport { ICoreConfig } from '@core/mobx/IAppConfig';\n@Component({\n  selector: 'app-map',\n  templateUrl: './map.component.html',\n  styleUrls: ['./map.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MapComponent implements OnInit, OnDestroy {\n  @Input() content: any;\n  AMap: any;\n  markers: any[];\n  geocoder: any;\n  map: any;\n  center: any;\n\n  constructor(\n    private amapState: AMapState,\n    private amapService: AmapService,\n    private appState: AppState,\n    @Inject(CORE_CONFIG) private coreConfig: ICoreConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.initMap(this.content);\n  }\n\n  initMap(content: any): void {\n    this.amapService.load().subscribe(\n      (AMap: any) => {\n        this.AMap = AMap;\n        this.geocoder = new AMap.Geocoder({\n          city: this.content?.city || this.coreConfig?.amap?.city || '全国',\n        });\n        let lists = [];\n        if (isArray(content)) {\n          lists = content;\n        } else {\n          lists = content.elements;\n        }\n        this.getPosition(lists);\n        this.getMarkers(lists);\n      },\n      (error) => {\n        console.log(error);\n      }\n    );\n  }\n\n  // https://lbs.amap.com/demo/javascript-api/example/geocoder/geocoding\n  getPosition(lists: any): void {\n    if (lists.length > 0) {\n      lists.forEach((item: any, index: number) => {\n        const address = item.params.address;\n        this.geocoder.getLocation(address, (status: any, result: any) => {\n          if (status === 'complete' && result.info === 'OK') {\n            const location = result.geocodes[0].location;\n            item.params.position = [location.lng, location.lat];\n            if (item.params.setCenter) {\n              this.center = [location.lng, location.lat];\n            }\n            if (lists.length === index + 1) {\n              this.amapState.position$.next(true);\n            }\n          }\n        });\n      });\n    }\n  }\n\n  renderMap(): void {\n    const themeStyle = this.appState.theme;\n    const amapConfig = this.coreConfig?.amap;\n    const mapStyle: any = amapConfig.mapStyle;\n    const options = this.content?.params;\n    const defaultOptions = {\n      resizeEnable: true,\n      zoom: amapConfig.zoom,\n      center: this.center || amapConfig.center,\n      mapStyle: themeStyle === 'dark-theme' ? mapStyle.dark : mapStyle.light,\n      features: amapConfig.features,\n    };\n    this.map = new this.AMap.Map(\n      'map',\n      Object.assign({}, defaultOptions, options)\n    );\n    this.appState.switchChange$.subscribe((theme) => {\n      const newMapStyle =\n        theme === 'dark-theme' ? mapStyle.dark : mapStyle.light;\n      this.map.setMapStyle(newMapStyle);\n    });\n  }\n\n  getMarkers(lists: any[]): void {\n    this.amapState.position$.subscribe((res) => {\n      this.renderMap();\n      this.onMarkers();\n      this.setMarkers(lists);\n    });\n  }\n\n  setMarkers(lists: any[]): void {\n    this.markers = lists.map((item: any) => {\n      return new this.AMap.Marker({\n        content: this.simpleMarkerTem(),\n        position: item.params.position,\n        title: item.params.title,\n      });\n    });\n    this.map.add(this.markers);\n  }\n\n  simpleMarkerTem(): any {\n    return `\n      <div class=\"mark\"></div>\n    `;\n  }\n\n  onMarkers(): void {\n    this.amapState.markers$.subscribe((marker: IMark) => {\n      const position = this.map\n        .getAllOverlays('marker')\n        [marker.index].getPosition();\n      const popup = new this.AMap.InfoWindow({\n        content: marker.marker,\n        isCustom: true,\n        offset: new this.AMap.Pixel(15, -2),\n      });\n      popup.open(this.map, position);\n      this.map.setCenter(position);\n    });\n  }\n\n  setFitView(): void {\n    this.map.setFitView();\n  }\n\n  ngOnDestroy(): void {\n    this.appState.switchChange$?.unsubscribe();\n    this.amapState.position$?.unsubscribe();\n    this.amapState.markers$?.unsubscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/theme/variable/variable\";\n\n:host ::ng-deep {\n  .mark-card {\n    padding: $spacer / 4;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: flex-start;\n    white-space: normal;\n    word-break: keep-all;\n    position: relative;\n    border-radius: 6px;\n    min-width: 200px;\n\n    .media {\n      img {\n        width: 7rem;\n        height: auto;\n      }\n    }\n\n    .arrow {\n      position: absolute;\n      display: block;\n      width: 0;\n      height: 0;\n      border-color: transparent;\n      border-style: solid;\n      border-width: 11px;\n\n      &.top {\n        bottom: -11px;\n        left: 50%;\n        border-width: 11px;\n        margin-left: -11px;\n\n        border-bottom-width: 0;\n\n        &:after {\n          bottom: 1px;\n          margin-left: -10px;\n          content: \" \";\n          border-bottom-width: 0;\n        }\n      }\n\n      &:after {\n        position: absolute;\n        display: block;\n        width: 0;\n        height: 0;\n        border-color: transparent;\n        border-style: solid;\n        border-width: 10px;\n      }\n    }\n\n    .media-body {\n      width: 100%;\n\n      div[class^=\"mat-h\"] {\n        line-height: 1;\n      }\n\n      .title {\n        white-space: nowrap;\n      }\n    }\n\n    @media #{$xs} {\n      min-width: 150px;\n\n      .media {\n        img {\n          width: 4rem;\n        }\n      }\n    }\n  }\n  .mark {\n    border-radius: 50%;\n    width: 50px;\n    height: 50px;\n    position: relative;\n    &:after {\n      content: \"\";\n      display: block;\n      width: 13px;\n      height: 13px;\n      position: absolute;\n      left: 50%;\n      top: 50%;\n      border-radius: 50%;\n      transform: translate(-50%, -50%);\n    }\n  }\n}\n\n.set-fit-view {\n  position: absolute;\n  right: 2rem;\n  bottom: 8rem;\n  z-index: 2;\n}\n",
                    "styleUrl": "./map.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "amapState",
                        "type": "AMapState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "amapService",
                        "type": "AmapService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appState",
                        "type": "AppState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "coreConfig",
                        "type": "ICoreConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "amapState",
                        "type": "AMapState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "amapService",
                        "type": "AmapService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appState",
                        "type": "AppState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "coreConfig",
                        "type": "ICoreConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div id=\"map\" fxFill></div>\n<button (click)=\"setFitView()\" class=\"set-fit-view\" mat-fab color=\"primary\">\n  <mat-icon>filter_center_focus</mat-icon>\n</button>\n"
        },
        {
            "name": "MapListV1Component",
            "id": "component-MapListV1Component-0378be90d8bdf20116fa343bc946ef0b2c6d804de043bbcbe98ac3e14f4a35ba3936d30909f60bdc4c8bc1d324e91608af72552d058427fe1b8a6206f3c8e464",
            "file": "src/app/uiux/combs/map/map-list-v1/map-list-v1.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-map-list-v1",
            "styleUrls": [
                "./map-list-v1.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./map-list-v1.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "selectedId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "markerTem",
                    "args": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "IMark",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IMark",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { AMapState } from '@core/mobx/amap/AMapState';\nimport { IMark } from '@core/interface/IAmap';\n\n@Component({\n  selector: 'app-map-list-v1',\n  templateUrl: './map-list-v1.component.html',\n  styleUrls: ['./map-list-v1.component.scss'],\n})\nexport class MapListV1Component implements OnInit {\n  @Input() content: any;\n  loading: boolean;\n  selectedId: number;\n  constructor(private amapState: AMapState) {}\n\n  ngOnInit(): void {}\n  onClick(event: IMark): void {\n    const obj: IMark = {\n      index: event.index,\n      marker: this.markerTem(event.item),\n    };\n    this.amapState.markers$.next(obj);\n  }\n\n  markerTem(item: any): any {\n    return `\n      <div class=\"mark-card p-y-xs p-x-xs\">\n      <div class=\"media-body\">\n        <div class=\"mat-h4 m-bottom-xs text-base\">${item.title}</div>\n        <div class=\"mat-h4 m-bottom-xs text-dark title\">${item.params.address}</div>\n        <div class=\"mat-h3 m-bottom-0 text-primary\">\n        </div>\n      </div>\n      <div class=\"top arrow\"></div>\n    </div>\n    `;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/theme/variable/variable\";\n@import \"/src/theme//mixins/amixin\";\n\n@media #{$gt-xs} {\n  .sidebar {\n    z-index: 112;\n  }\n}\n.map-list-common {\n  position: relative;\n}\n\n.map-wrapper {\n  height: calc(100vh - 60px);\n\n  @media #{$xs} {\n    height: 60vh;\n    width: 100%;\n    padding: 1rem;\n  }\n}\n\n.sidebar-right {\n  z-index: 10;\n  right: 0;\n  top: 0;\n  height: 100%;\n  overflow: auto;\n  ::ng-deep .media {\n    .media-content {\n      @include line-clamp(3);\n    }\n  }\n}\n",
                    "styleUrl": "./map-list-v1.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "amapState",
                        "type": "AMapState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "amapState",
                        "type": "AMapState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container-fluid map-list-common\">\n  <div class=\"map-list-v1 position-relation\" fxFill fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"start stretch\">\n    <div class=\"sidebar position-relative p-x-xs\" fxFlex.xs=\"100%\" fxFlex.gt-xs=\"500px\">\n      <div class=\"m-y\" *ngIf=\"loading\" fxLayoutAlign=\"center center\">\n        <app-spinner class=\"m-y\" [content]=\"{color:'primary', size:40}\"></app-spinner>\n      </div>\n      <div class=\"m-y\" *ngIf=\"content?.elements?.length == 0\" fxLayoutAlign=\"center center\">\n        暂无相关数据\n      </div>\n      <div class=\"map-list-head p-x-sm p-y-sm\">\n        <app-title [content]=\"content.title\"></app-title>\n        <div class=\"meta\" *ngIf=\"content?.meta\">\n          <div class=\"item\" *ngFor=\"let item of content.meta\">\n            <span>{{item.label}}: </span>\n            <span>{{item.value}}\n              <mat-icon color=\"primary\" inline *ngIf=\"item.label === '地址'\">place</mat-icon>\n            </span>\n          </div>\n        </div>\n      </div>\n      <div class=\"map-lists\">\n        <app-card1v3 [content]=\"content.map\" (selected)=\"onClick($event)\"></app-card1v3>\n      </div>\n    </div>\n    <div class=\"map-wrapper position-relative\" fxFlex.xs=\"100%\" fxFlex.gt-xs=\"100%\">\n      <app-map fxFlex=\"100%\" *ngIf=\"content?.map\" [content]=\"content.map\"></app-map>\n      <div class=\"m-y\" *ngIf=\"loading\" fxLayoutAlign=\"center center\">\n        <app-spinner class=\"m-y\" [content]=\"{color:'primary', size:40}\"></app-spinner>\n      </div>\n    </div>\n    <div class=\"sidebar-right  p-x-sm p-y-sm\" *ngIf=\"content.sidebarRight\" fxFlex.gt-sm=\"400px\" fxFlex.gt-md=\"600px\"\n      ngClass.gt-sm=\"position-absolute\">\n      <app-dynamic-widgets [content]=\"item\" *ngFor=\"let item of content.sidebarRight\"></app-dynamic-widgets>\n    </div>\n  </div>\n</div>\n<app-spacer></app-spacer>\n"
        },
        {
            "name": "MediaListComponent",
            "id": "component-MediaListComponent-ec2007df1dd6cddfeb7c398a3c3c65085e11ebdf61bbd61744bdd2a34417fea22aec5ddb4f0f3439d3b520fdad86e5c930652a19a0a8d989a79e91829a9a40bf",
            "file": "src/app/uiux/widgets/media/media-list/media-list.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-media-list",
            "styleUrls": [
                "./media-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./media-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "IMediaList",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { IMediaList } from '@core/interface/widgets/IMediaList';\n\n@Component({\n  selector: 'app-media-list',\n  templateUrl: './media-list.component.html',\n  styleUrls: ['./media-list.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaListComponent implements OnInit {\n  @Input() content: IMediaList;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/theme/mixins/amixin\";\n.recent-posts {\n  .block-title {\n    font-size: 15px;\n    font-weight: 500;\n    letter-spacing: 1px;\n    margin-bottom: 20px;\n    text-transform: uppercase;\n    word-spacing: 1px;\n  }\n  .list {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n    .item {\n      list-style-type: none;\n      clear: both;\n      min-height: 60px;\n      margin-bottom: 29px;\n      .post-img {\n        float: left;\n        margin-right: 18px;\n        display: block;\n        overflow: hidden;\n        position: relative;\n        &:before {\n          content: \"\";\n          width: 100%;\n          height: 100%;\n          position: absolute;\n          top: 0;\n          left: 0;\n          opacity: 0;\n          @include transition(all, 200ms, ease-in-out);\n          @include border-radius(3px, 3px, 3px, 3px);\n        }\n        .mat-icon {\n          font-size: 20px;\n          opacity: 0;\n          @include middle-center();\n          @include transition(all, 200ms, ease-in-out);\n        }\n        &:hover:before,\n        &:hover .mat-icon {\n          cursor: pointer;\n          opacity: 1;\n        }\n        ::ng-deep img {\n          width: 90px;\n          height: 60px;\n          @include border-radius(3px, 3px, 3px, 3px);\n        }\n      }\n      .blog-title ::ng-deep a {\n        display: block;\n        font-size: 13px;\n        margin-bottom: 7px;\n        margin-top: -3px;\n        margin-left: 108px;\n      }\n      .blog-date,\n      .blog-categories {\n        margin-bottom: 5px;\n        display: block;\n        font-size: 12px;\n        font-style: italic;\n        margin-left: 108px;\n      }\n      &.no-img {\n        .blog-title ::ng-deep a,\n        .blog-date {\n          margin-left: 0;\n        }\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./media-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"recent-posts\" *ngIf=\"content\">\n  <h2 class=\"block-title\">{{content.title}}</h2>\n  <div class=\"list\">\n    <div class=\"item {{item.img?.src ? '':'no-img'}}\" *ngFor=\"let item of content.elements\">\n      <a *ngIf=\"item.img?.src\" [href]=\"item.link.href\" class=\"post-img\">\n        <app-img [content]=\"item.img\"></app-img>\n        <mat-icon>open_in_new</mat-icon>\n      </a>\n      <div class=\"blog-title\">\n        <app-link [content]=\"item.link\"></app-link>\n        <div class=\"blog-date\" [innerHTML]=\"item.changed\">\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "MediaMetaComponent",
            "id": "component-MediaMetaComponent-22bb07c0a7c331c9e3d3acffd75bc85c55c905561549c36b3d3adbb2ca6948a23671a8ff59cdc520ea91facda2b34c086c1276789487a3e5adb5e38e727912ea",
            "file": "src/app/uiux/widgets/media/media-meta/media-meta.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-media-meta",
            "styleUrls": [
                "./media-meta.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./media-meta.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "IMediaMeta",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "showGtsm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "showLtmd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  OnInit,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { ScreenState } from '@core/mobx/screen/ScreenState';\nimport { ScreenService } from '@core/service/screen.service';\nimport { IMediaMeta } from '../../../../core/interface/widgets/IMediaMeta';\n\n@Component({\n  selector: 'app-media-meta',\n  templateUrl: './media-meta.component.html',\n  styleUrls: ['./media-meta.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaMetaComponent implements OnInit {\n  @Input() content: IMediaMeta;\n  showGtsm: boolean;\n  showLtmd: boolean;\n  constructor(\n    private screen: ScreenState,\n    private screenService: ScreenService,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    if (this.screenService.isPlatformBrowser()) {\n      this.screen.mqAlias$().subscribe((mq) => {\n        this.showGtsm = mq.includes('gt-sm');\n        this.showLtmd = mq.includes('lt-md');\n        this.cd.detectChanges();\n      });\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".top {\n  font-size: 60px;\n  line-height: 1;\n}\n",
                    "styleUrl": "./media-meta.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "screen",
                        "type": "ScreenState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "screen",
                        "type": "ScreenState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"media-meta p-y\" *ngIf=\"content\" fxLayout=\"row wrap\">\n  <div class=\"meta\" *ngIf=\"showGtsm\" fxLayout=\"column\" fxLayoutGap=\"1rem\" fxLayoutAlign=\"center center\"\n    fxFlex.lt-md=\"100\" fxFlex.gt-sm=\"0 0 10\">\n    <div class=\"top\">{{content.date| date:'d'}}</div>\n    <div class=\"middle\">\n      {{content.date| date:'y-M'}}\n    </div>\n    <div class=\"more\">\n      <a mat-button href=\"{{content.more.href}}\" target=\"_blank\">{{content.more.label}}</a>\n    </div>\n  </div>\n  <div class=\"wrapper\" fxFlex.lt-md=\"100\" fxFlex.gt-sm=\"0 0 90\">\n    <div class=\"title\">\n      <h2>\n        <app-link [content]=\"content.link\"></app-link>\n      </h2>\n      <div class=\"time\" *ngIf=\"showLtmd\">{{content.date}}</div>\n      <div class=\"content\" [innerHTML]=\"content.body|stripTags|trim|shorten:150:'...'\"></div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "MediaObjectComponent",
            "id": "component-MediaObjectComponent-b62f9537c3fe163e5411e80bdcb10dfdd062f7af414f00179b75aeb3fd1700fc4b940542a2a8fa85ea93e8704943d05921fa2a07a0e5ca1e67e9a55c9085a8bd",
            "file": "src/app/uiux/widgets/media/media-object/media-object.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-media-object",
            "styleUrls": [
                "./media-object.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./media-object.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "IMediaObject",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { IMediaObject } from '@core/interface/widgets/IMediaObject';\n\n@Component({\n  selector: 'app-media-object',\n  templateUrl: './media-object.component.html',\n  styleUrls: ['./media-object.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaObjectComponent implements OnInit {\n  @Input() content: IMediaObject;\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  get align(): string {\n    if (this.content.align) {\n      return this.content.align;\n    }\n    return this.content.content ? 'start start' : 'center center';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".title {\n  font-size: 14px;\n}\n.sub-title {\n  font-size: small;\n  line-height: 1;\n}\n\n.media-body {\n  > div:only-child {\n    margin-bottom: 0 !important;\n  }\n}\n\n.box-animate {\n  padding: 10px;\n  margin: 10px;\n  transition: all 0.3s ease;\n  border-radius: 6px;\n  ::ng-deep .mat-icon {\n    height: 45px;\n    width: 45px;\n    line-height: 45px;\n    border-radius: 50%;\n  }\n\n  &:hover {\n    transform: scale(1.05);\n  }\n}\n\n.media-left {\n  app-icon {\n    padding: 10px;\n    border-radius: 5px;\n    width: 50px;\n    display: inline-block;\n    font-size: 24px;\n    height: 50px;\n    box-sizing: border-box;\n  }\n}\n",
                    "styleUrl": "./media-object.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "align": {
                    "name": "align",
                    "getSignature": {
                        "name": "align",
                        "type": "string",
                        "returnType": "string",
                        "line": 21
                    }
                }
            },
            "templateData": "<div class=\"media\" [class.box-animate]=\"content.css3\" fxLayout [fxLayoutAlign]=\"align\" *ngIf=\"content\">\n  <div class=\"media-left m-right-xs text-center\">\n    <app-img [content]=\"content.img\" *ngIf=\"content?.img?.src\"></app-img>\n    <app-icon [content]=\"content.icon\" *ngIf=\"content.icon\"></app-icon>\n    <div class=\"meta m-top-xs\" [innerHTML]=\"content.meta\" *ngIf=\"content.meta\"></div>\n  </div>\n  <div fxFlex=\"1 1 0%\" class=\"media-body\">\n    <div class=\"title line-height-1 bold mat-h3 m-bottom-xs\" *ngIf=\"content.title\">{{content.title}}</div>\n    <app-link *ngIf=\"content.link\" [content]=\"content.link\"></app-link>\n    <div class=\"sub-title\" *ngIf=\"content.subTitle\">{{content.subTitle}}</div>\n    <div class=\"media-content\" *ngIf=\"content.content\" [innerHTML]=\"content.content|safeHtml\"></div>\n  </div>\n</div>\n"
        },
        {
            "name": "MediaObjectGroupComponent",
            "id": "component-MediaObjectGroupComponent-d5cd1f4740bfb251e8d819a5f0f9e24df124e569791395377431b6683684a3174161d45da64171e3faed63b31f262879da51657b9ef40d1174c02c2b5cfee533",
            "file": "src/app/uiux/widgets/media/media-object-group/media-object-group.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-media-object-group",
            "styleUrls": [
                "./media-object-group.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./media-object-group.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-media-object-group',\n  templateUrl: './media-object-group.component.html',\n  styleUrls: ['./media-object-group.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaObjectGroupComponent implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./media-object-group.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"content\">\n  <ng-container *ngIf=\"content.elements.length>0;else empty\">\n    <app-media-object class=\"display-block m-bottom\" [content]=\"item\" *ngFor=\"let item of content.elements\">\n    </app-media-object>\n  </ng-container>\n  <ng-template #empty>\n    暂无数据\n  </ng-template>\n</ng-container>\n"
        },
        {
            "name": "MegaMenuComponent",
            "id": "component-MegaMenuComponent-c5f68029302f68c6162699a24c34154c16ae8877e59aa2b5043a613427f5f88ad727b6712f18ae901ce58894c73399ccfa154acbf591cef1cf4980d20cd766d7",
            "file": "src/app/core/branding/header/menu/item-menu/mega-menu/mega-menu.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-mega-menu",
            "styleUrls": [
                "./mega-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./mega-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "initActionEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  OnInit,\n  ElementRef,\n  OnDestroy,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { fromEvent, of } from 'rxjs';\nimport { mergeMap, delay, takeUntil } from 'rxjs/operators';\nimport { ScreenState } from '@core/mobx/screen/ScreenState';\nimport { ScreenService } from '@core/service/screen.service';\n\n@Component({\n  selector: 'app-mega-menu',\n  templateUrl: './mega-menu.component.html',\n  styleUrls: ['./mega-menu.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MegaMenuComponent implements OnInit, OnDestroy {\n  @Input() content: any;\n  active: boolean;\n  constructor(\n    private eleRef: ElementRef,\n    private screenState: ScreenState,\n    private screenService: ScreenService,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    if (this.screenService.isPlatformBrowser()) {\n      this.initActionEvent();\n    }\n  }\n\n  initActionEvent(): void {\n    const megaMenu = this.eleRef.nativeElement;\n    const enter = fromEvent(megaMenu, 'mouseenter');\n    const leave = fromEvent(megaMenu, 'mouseleave');\n\n    enter\n      .pipe(\n        mergeMap((event) => {\n          return of(event).pipe(delay(100), takeUntil(leave));\n        })\n      )\n      .subscribe((event) => {\n        this.active = true;\n        this.cd.detectChanges();\n      });\n\n    leave\n      .pipe(\n        mergeMap((event) => {\n          return of(event).pipe(delay(100), takeUntil(enter));\n        })\n      )\n      .subscribe((event) => {\n        this.active = false;\n        this.cd.detectChanges();\n      });\n\n    this.screenState.stickyMenu$.subscribe((sticky) => {\n      if (!sticky) {\n        return;\n      }\n      this.active = false;\n      this.cd.detectChanges();\n    });\n  }\n\n  ngOnDestroy(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mega-menu {\n  position: absolute;\n  left: 0;\n  width: 100%;\n  background-color: #fff;\n  display: none;\n  z-index: -1;\n  max-height: 85vh;\n  overflow: auto;\n  &.active {\n    display: block;\n  }\n  .inner {\n    padding: 2rem 4rem;\n  }\n}\n.label {\n  font-weight: bold;\n}\n\n.item {\n  padding-right: 30px;\n  ::ng-deep {\n    a {\n      font-size: 15px;\n      word-break: keep-all;\n      white-space: nowrap;\n      overflow: hidden;\n    }\n  }\n  &:last-child {\n    padding-right: 0;\n  }\n}\n",
                    "styleUrl": "./mega-menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "eleRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screenState",
                        "type": "ScreenState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "eleRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screenState",
                        "type": "ScreenState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-link class=\"top\" [content]=\"content\"></app-link>\n<div class=\"mega-menu\" [class.active]=\"active\">\n  <div class=\"container inner\">\n    <div class=\"item\" fxFlex=\"0 1 100\" *ngFor=\"let item of content.child\">\n      <div class=\"label m-bottom-xs\">\n        <app-link [content]=\"item\"></app-link>\n      </div>\n      <div class=\"sub-menu\" *ngFor=\"let subMenu of item.child; last as isLast\">\n        <app-link [content]=\"subMenu\"></app-link>\n        <mat-divider *ngIf=\"!isLast\" class=\"m-y-xs\"></mat-divider>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "MenuComponent",
            "id": "component-MenuComponent-21b2b8d5e93f6ac2871144e7735f2fcde9a97dc89d02a72ecb0a293c34c9c16d988fb83579823a2c229768e00512b2ec49ed4dfe3d61ac2df89d6aa3eb2118ba",
            "file": "src/app/core/branding/header/menu/menu.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-menu",
            "styleUrls": [
                "./menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "isDrawer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "appState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AppState",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isOpened",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "screen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScreenState",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "show",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onToggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  Input,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { Event, NavigationStart, Router } from '@angular/router';\nimport { AppState } from '@core/mobx/AppState';\nimport { ScreenState } from '@core/mobx/screen/ScreenState';\n@Component({\n  selector: 'app-menu',\n  templateUrl: './menu.component.html',\n  styleUrls: ['./menu.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MenuComponent implements OnInit {\n  @Input() isDrawer: boolean;\n  @Input() content: any;\n  isOpened = false;\n  show = true;\n\n  constructor(\n    public screen: ScreenState,\n    public appState: AppState,\n    private router: Router,\n    private cd: ChangeDetectorRef\n  ) {\n    this.router.events.subscribe((event: Event) => {\n      if (this.isDrawer && event instanceof NavigationStart) {\n        this.screen.toggleDrawer(true);\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    this.screen.mqAlias$().subscribe((res: string[]) => {\n      this.show = res.includes('gt-sm');\n      this.cd.detectChanges();\n    });\n  }\n\n  onToggle(): void {\n    this.isOpened = !this.isOpened;\n    this.screen.toggleDrawer(this.isOpened);\n    this.cd.detectChanges();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/theme/variable/variable\";\n\n.header {\n  position: relative;\n  margin-bottom: 2px;\n}\n\n:host-context(.header-inverse) {\n  .header {\n    margin-bottom: 0;\n  }\n}\n\n.logo {\n  ::ng-deep {\n    img {\n      min-height: 30px;\n      max-height: 40px;\n    }\n  }\n}\n\n.spacer {\n  flex: 1;\n}\n\n.header-left {\n  .version {\n    font-size: 1.2rem;\n    margin-left: 0.4rem;\n  }\n}\n\n@media #{$lt-lg} {\n  .main-menu {\n    .item {\n      ::ng-deep a {\n        padding-left: 1.5rem;\n        padding-right: 1.5rem;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "screen",
                        "type": "ScreenState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appState",
                        "type": "AppState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "screen",
                        "type": "ScreenState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appState",
                        "type": "AppState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"content\">\n  <header *ngIf=\"show\" class=\"header\" #header>\n    <div class=\"container\">\n      <div class=\"header-container\" fxLayout=\"row\" fxLayoutAlign=\"{{content.logo?'space-between center':'end center'}}\">\n        <div class=\"header-left\" *ngIf=\"content.logo\">\n          <div class=\"logo\" *ngIf=\"content.logo?.img; else name\" fxLayout fxLayoutAlign=\"start end\">\n            <app-img [content]=\"content.logo.img\"></app-img>\n            <span *ngIf=\"content.logo.version\" class=\"version\">v{{appState.version}}</span>\n          </div>\n          <ng-template #name>\n            <a class=\"site-name mat-h2\" [routerLink]=\"content.logo.href\" [innerHTML]=\"content.logo?.label|safeHtml\"></a>\n            <span *ngIf=\"content.logo.version\" class=\"version\">v{{appState.version}}</span>\n          </ng-template>\n        </div>\n        <div class=\"header-right\" fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap.lt-lg=\"1rem\"\n          fxLayoutGap.gt-md=\"3rem\">\n          <div class=\"menu-inner\" *ngIf=\"content.mainMenu\">\n            <div class=\"main-menu\" fxLayout=\"row\">\n              <div class=\"item\" *ngFor=\"let menu of content.mainMenu\">\n                <app-item-menu [params]=\"content.params\" [content]=\"menu\"></app-item-menu>\n              </div>\n            </div>\n          </div>\n          <app-search-box [content]=\"content.search\" *ngIf=\"content?.search?.enable\"></app-search-box>\n          <div class=\"actions\" *ngIf=\"content.actions\">\n            <button color=\"primary\" mat-raised-button *ngFor=\"let action of content.actions\">\n              <app-link [content]=\"action\"></app-link>\n            </button>\n          </div>\n          <app-switch-theme *ngIf=\"content?.params?.themeSwitch\"></app-switch-theme>\n          <app-user-menu [content]=\"content.userMenu\" *ngIf=\"content?.params?.userInfo\"></app-user-menu>\n        </div>\n      </div>\n    </div>\n  </header>\n  <div class=\"drawer\">\n    <mat-toolbar *ngIf=\"!show\">\n      <button mat-icon-button (click)=\"onToggle()\" aria-label=\"menu icon\">\n        <mat-icon color=\"primary\" *ngIf=\"!isDrawer\">menu</mat-icon>\n        <mat-icon *ngIf=\"isDrawer\">close</mat-icon>\n      </button>\n      <span class=\"spacer\"></span>\n      <span class=\"app-name\">{{content.logo?.label}}</span>\n      <span class=\"spacer\"></span>\n      <app-switch-theme></app-switch-theme>\n      <app-user-menu class=\"m-left-xs\"></app-user-menu>\n    </mat-toolbar>\n    <div [hidden]=\"!(!show && isDrawer)\">\n      <app-dropdown-menu *ngIf=\"content.mainMenu\" [content]=\"content.mainMenu\"></app-dropdown-menu>\n    </div>\n  </div>\n</ng-container>\n"
        },
        {
            "name": "MenuItemComponent",
            "id": "component-MenuItemComponent-8cd81a363b26d5b767be51e603f7230ed16e297ab86215755786613859d33351f3df0363cf15f15fa7004ebb84e272f3f4accfc6b2a324b08c24b1d5936b3eae",
            "file": "src/app/core/branding/footer/menu-item/menu-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-menu-item",
            "styleUrls": [
                "./menu-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./menu-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "mobileMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "showXs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { ScreenState } from '@core/mobx/screen/ScreenState';\nimport { ScreenService } from '@core/service/screen.service';\n\n@Component({\n  selector: 'app-menu-item',\n  templateUrl: './menu-item.component.html',\n  styleUrls: ['./menu-item.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MenuItemComponent implements OnInit {\n  @Input() content: any;\n  @Input() mobileMenu: any;\n  showXs: boolean;\n  constructor(\n    private screen: ScreenState,\n    private screenService: ScreenService,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    if (this.screenService.isPlatformBrowser()) {\n      this.screen.mqAlias$().subscribe((alia) => {\n        this.showXs = alia.includes('xs');\n        this.cd.detectChanges();\n      });\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-list-item-with-avatar {\n  height: 40px !important;\n  .mat-icon {\n    line-height: 1;\n    font-size: 20px !important;\n    width: 20px !important;\n    height: 20px !important;\n    opacity: 0.85;\n  }\n}\n",
                    "styleUrl": "./menu-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "screen",
                        "type": "ScreenState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "screen",
                        "type": "ScreenState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"content && !showXs\" class=\"footer-main-menu\" fxLayoutAlign=\"space-between start\">\n  <mat-list fxFlex=\"auto\" *ngFor=\"let menu of content\" role=\"list\">\n    <div mat-subheader class=\"bold\">{{menu.label}}</div>\n    <ng-container *ngFor=\"let subMenu of menu.child; index as i\">\n      <mat-list-item *ngIf=\"!subMenu.popup; else popup\" role=\"listitem\">\n        <mat-icon mat-list-icon svgIcon=\"{{subMenu.icon}}\"></mat-icon>\n        <app-link [content]=\"subMenu\"></app-link>\n      </mat-list-item>\n      <ng-template #popup>\n        <mat-list-item role=\"listitem\" [matMenuTriggerFor]=\"popup\">\n          <mat-icon mat-list-icon svgIcon=\"{{subMenu.icon}}\"></mat-icon>\n          <span>{{subMenu.label}}</span>\n          <mat-menu #popup=\"matMenu\" yPosition=\"above\">\n            <span [innerHTML]=\"subMenu.popup|safeHtml\"></span>\n          </mat-menu>\n        </mat-list-item>\n      </ng-template>\n    </ng-container>\n  </mat-list>\n</div>\n<div class=\"mobile p-y-sm\" *ngIf=\"mobileMenu && showXs\">\n  <app-dropdown-menu [content]=\"mobileMenu\"></app-dropdown-menu>\n</div>\n"
        },
        {
            "name": "MenuListComponent",
            "id": "component-MenuListComponent-f52a37ec69bc5df20f68f8180271472700efc8d931e5ae2030584914c3a39d350144ce39e1ad56d20f20cf72a899fe817333232c791219fe84d7df87de7a120d",
            "file": "src/app/uiux/widgets/menu-list/menu-list.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-menu-list",
            "styleUrls": [
                "./menu-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./menu-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "IMenuList",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "expand",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "initList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "list",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "row",
                    "defaultValue": "12",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "initContent",
                    "args": [
                        {
                            "name": "expand",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "expand",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onExpand",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateList",
                    "args": [
                        {
                            "name": "expand",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "expand",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { IMenuList } from '@core/interface/widgets/IMenuList';\nimport { ScreenService } from '@core/service/screen.service';\n\n@Component({\n  selector: 'app-menu-list',\n  templateUrl: './menu-list.component.html',\n  styleUrls: ['./menu-list.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MenuListComponent implements OnInit {\n  @Input() content: IMenuList;\n  list: any[];\n  initList: any[];\n  expand = false;\n  row = 12;\n  constructor(private screenService: ScreenService) {}\n\n  ngOnInit(): void {\n    if (this.screenService.isPlatformBrowser()) {\n      this.initContent(this.expand);\n    }\n  }\n\n  initContent(expand: boolean): void {\n    const lists = this.content.elements;\n    this.initList = lists;\n    this.updateList(this.expand);\n  }\n\n  updateList(expand: boolean): void {\n    if (expand) {\n      this.list = this.initList;\n    } else {\n      this.list = this.initList.slice(0, this.row - 1);\n    }\n  }\n\n  onExpand(): void {\n    this.expand = !this.expand;\n    this.updateList(this.expand);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".menu-list {\n  .block-title {\n    font-size: 16px;\n    font-weight: 500;\n    letter-spacing: 1px;\n    margin-top: 10px;\n    margin-bottom: 10px;\n    text-transform: uppercase;\n    word-spacing: 1px;\n  }\n  .list {\n    padding: 0;\n    .item {\n      list-style: none;\n      padding: 10px 0;\n      &:last-child {\n        border-bottom: none;\n      }\n      .num-posts {\n        font-size: 14px;\n      }\n      ::ng-deep a {\n        display: inline-block;\n        margin-right: 10px;\n        font-size: 15px;\n      }\n    }\n  }\n  .action {\n    cursor: pointer;\n    .mat-icon {\n      transition: all 0.4s ease;\n    }\n    &:hover {\n      .mat-icon {\n        transform: rotate(180deg);\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./menu-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"menu-list\" *ngIf=\"content\">\n  <h2 class=\"block-title\">{{content.title}}</h2>\n  <mat-divider></mat-divider>\n  <div class=\"list\" *ngIf=\"list\">\n    <div class=\"item\" *ngFor=\"let item of list\" fxLayoutAlign=\"space-between center\">\n      <app-link [content]=\"item.link\"></app-link>\n      <div class=\"num-posts\">\n        {{item.label}}\n      </div>\n    </div>\n    <div *ngIf=\"initList && (initList.length > row)\" class=\"action p-y-sm\" fxLayoutAlign=\"center center\"\n      (click)=\"onExpand()\">\n      <button mat-icon-button *ngIf=\"expand\">\n        <mat-icon>expand_less</mat-icon>\n      </button>\n      <button mat-icon-button *ngIf=\"!expand\">\n        <mat-icon>expand_more</mat-icon>\n      </button>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "NotfoundComponent",
            "id": "component-NotfoundComponent-cdcbcd8cf641f2a6e420e2dc7f06a4f1fd7080bdbdb094c79861e2fc0e5cd5aab5eb73bd14a73cb218b6c86c470bd5b2c890132efb424f3d60cdea2e3e0b27e2",
            "file": "src/app/uiux/combs/other/notfound/notfound.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-notfound",
            "styleUrls": [
                "./notfound.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./notfound.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-notfound',\n  templateUrl: './notfound.component.html',\n  styleUrls: ['./notfound.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotfoundComponent implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./notfound.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"not-found text-center p-y container\" *ngIf=\"content\">\n  <div fxLayout=\"row wrap\" fxLayoutAlign=\"center center\">\n    <app-img fxFlex=\"80\" [content]=\"content.img\" *ngIf=\"content.img\"></app-img>\n    <app-title fxFlex=\"100\" [content]=\"content.title\" *ngIf=\"content.title\"></app-title>\n    <app-text fxFlex=\"100\" [content]=\"content.text\" *ngIf=\"content.text\"></app-text>\n    <div fxFlex=\"100\" class=\"actions m-y-sm\" *ngIf=\"content.actions\" fxLayout=\"row\" fxLayoutAlign=\"center center\"\n      fxLayoutGap=\"1rem\">\n      <app-btn-animate [content]=\"item\" *ngFor=\"let item of content.actions\"></app-btn-animate>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "NumberAnimateComponent",
            "id": "component-NumberAnimateComponent-266ea58dc549db1f75ae61d5a9623fdb1ed592ebb2d195ecaef2dfb351fd72ebaa727564df42235987c33ea2cf850493e39d5ef8ce449ebc432a61ba29b8223d",
            "file": "src/app/uiux/widgets/number-animate/number-animate.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-number-animate",
            "styleUrls": [
                "./number-animate.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./number-animate.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "INumberAnimate",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "animatedDigit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'animatedDigit'"
                        }
                    ]
                },
                {
                    "name": "duration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "first",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "steps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, ElementRef, ViewChild } from '@angular/core';\nimport { Component, Input, OnInit } from '@angular/core';\nimport { INumberAnimate } from '@core/interface/widgets/INumberAnimate';\n\n@Component({\n  selector: 'app-number-animate',\n  templateUrl: './number-animate.component.html',\n  styleUrls: ['./number-animate.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NumberAnimateComponent implements OnInit {\n  @Input() content: INumberAnimate;\n  duration: number;\n  steps: number;\n  first = true;\n\n  @ViewChild('animatedDigit') animatedDigit: ElementRef;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".suffix {\n  font-weight: lighter;\n}\n",
                    "styleUrl": "./number-animate.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 17
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div #animatedDigit class=\"animated-digit\">\n  <span [CountTo]=\"content.value\"></span>\n  <span class=\"p-left-xs suffix\" *ngIf=\"content.label\">{{content.label}}</span>\n</div>\n"
        },
        {
            "name": "PackeryComponent",
            "id": "component-PackeryComponent-fc8c31d3b87a1f076c7e4c588e40f1ff883f660496302b0efed73fcf9049862648a129a137941e07e48c5edefb31390e3e5b9a649d991efb6121f14427012c90",
            "file": "src/app/uiux/combs/masonry/packery/packery.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-packery",
            "styleUrls": [
                "./packery.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./packery.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgxPackeryOptions",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "default",
                    "defaultValue": "{\n    gutter: 10,\n    imagesLoaded: true,\n    percentPosition: true,\n    initLayout: false,\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgxPackeryOptions",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "packery",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'packery'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  OnInit,\n  ViewChild,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { NgxPackeryOptions } from 'ngx-packery';\n\n@Component({\n  selector: 'app-packery',\n  templateUrl: './packery.component.html',\n  styleUrls: ['./packery.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PackeryComponent implements OnInit, AfterViewInit {\n  @Input() content: any;\n  @ViewChild('packery') packery: any;\n  config: NgxPackeryOptions;\n  default: NgxPackeryOptions = {\n    gutter: 10,\n    imagesLoaded: true,\n    percentPosition: true,\n    initLayout: false,\n  };\n  constructor() {}\n\n  ngOnInit(): void {\n    this.config = Object.assign({}, this.default, this.content.config);\n  }\n\n  ngAfterViewInit(): void {\n    this.packery.pckryService.reloadItems();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "ngx-packery-item {\n  display: block;\n  img {\n    height: auto;\n    max-width: 100%;\n  }\n}\n",
                    "styleUrl": "./packery.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 26
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"packery position-relative\" *ngIf=\"content\">\n  <a class=\"anchor\" *ngIf=\"content.id\" [id]=\"content.id\"></a>\n  <app-bg-img [content]=\"content.bg\"></app-bg-img>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n  <app-text [content]=\"content.text\" *ngIf=\"content.text\"></app-text>\n  <div class=\"{{content.fullWidth?'':'container'}}\">\n    <ngx-packery #packery [options]=\"config\">\n      <ngx-packery-item fxFlex.lt-md=\"0 0 100\" fxFlex.gt-sm=\"0 0 {{item.width || 20}}\"\n        *ngFor=\"let item of content.elements\">\n        <app-dynamic-widgets [content]=\"item\"></app-dynamic-widgets>\n      </ngx-packery-item>\n      <ngx-packery-item fxFlex=\"0 0 100\">\n        <!-- fix bug -->\n        <img alt=\"just for calculation\">\n      </ngx-packery-item>\n    </ngx-packery>\n  </div>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n</div>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-7126d8c2607c946741c651482413b43feb72b2d63cac9d3ac173fde206a5e635eb4cdbf7ca7ac9327c7d4d05cf7ef619144c34c11609ad677081d0ee4e855064",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PaginationComponent",
            "id": "component-PaginationComponent-b28756707202073ca390d2617b8a00a38419198fc30065ad1ad08a2f385a3292a1845d65687abfe44c9c131b0a60f376bbf162aa4d98f2e6454d7ed93fca52c6",
            "file": "src/app/uiux/widgets/pagination/pagination.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pagination",
            "styleUrls": [
                "./pagination.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./pagination.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "maxSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "pageBoundsCorrection",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter<number>"
                },
                {
                    "name": "pageChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter<number>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPageBoundsCorrection",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPageChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-pagination',\n  templateUrl: './pagination.component.html',\n  styleUrls: ['./pagination.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent implements OnInit {\n  @Input() id: string;\n  @Input() maxSize: number;\n  @Output() pageChange: EventEmitter<number> = new EventEmitter();\n  @Output() pageBoundsCorrection: EventEmitter<number> = new EventEmitter();\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  onPageChange(event: any): any {\n    this.pageChange.emit(event);\n  }\n\n  onPageBoundsCorrection(event: any): any {\n    this.pageBoundsCorrection.emit(event);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".disabled {\n  pointer-events: none;\n  cursor: default;\n  opacity: 0.6;\n  color: #666;\n}\n\n.current {\n  border-radius: 4px;\n}\n\n.pagination-previous,\n.pagination-next {\n  font-size: 24px;\n}\n",
                    "styleUrl": "./pagination.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 20
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<pagination-template class=\"pagination m-y\" #p=\"paginationApi\" (pageChange)=\"onPageChange($event)\"\n  (pageBoundsCorrection)=\"onPageBoundsCorrection($event)\" fxLayout fxLayoutAlign=\"center center\">\n  <button class=\"pagination-previous\" color=\"primary\" [class.disabled]=\"p.isFirstPage()\" matTooltip=\"Prev Page\"\n    [matTooltipPosition]=\"'above'\" (click)=\"p.previous()\" mat-icon-button aria-label=\"Prev Page\">\n    <mat-icon inline=\"true\" width=\"16px\">navigate_before</mat-icon>\n  </button>\n  <ng-container *ngFor=\"let page of p.pages\">\n    <button [class.current]=\"p.getCurrent() === page.value\" (click)=\"p.setCurrent(page.value)\" mat-icon-button\n      *ngIf=\"p.getCurrent() !== page.value\">\n      <a href=\"javascript:void();\">{{ page.label }}</a>\n    </button>\n    <button disabled [class.current]=\"p.getCurrent() === page.value\" mat-mini-fab *ngIf=\"p.getCurrent() === page.value\">\n      {{ page.label }}\n    </button>\n  </ng-container>\n  <button class=\"pagination-next\" color=\"primary\" [class.disabled]=\"p.isLastPage()\" matTooltip=\"Next Page\"\n    [matTooltipPosition]=\"'above'\" (click)=\"p.next()\" mat-icon-button aria-label=\"Next Page\">\n    <mat-icon inline=\"true\">navigate_next</mat-icon>\n  </button>\n</pagination-template>\n"
        },
        {
            "name": "PaginationSimpleComponent",
            "id": "component-PaginationSimpleComponent-600a532b869035cec9cae0e0f92fa8aa7570ec627dccff00e493f2ebcd68ae9c42db8cc6dbb47ecfbe17c48581bfcd2fabbc901390fd1d1ab860a10b603bc469",
            "file": "src/app/uiux/widgets/pagination/pagination-simple/pagination-simple.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pagination-simple",
            "styleUrls": [
                "./pagination-simple.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./pagination-simple.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "links",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "IPaginationSimple",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "pageChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "loadPage",
                    "args": [
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { IPaginationSimple } from '@core/interface/widgets/IPaginationSimple';\n\n@Component({\n  selector: 'app-pagination-simple',\n  templateUrl: './pagination-simple.component.html',\n  styleUrls: ['./pagination-simple.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationSimpleComponent implements OnInit {\n  @Input() links: IPaginationSimple;\n  @Output() pageChange: EventEmitter<string> = new EventEmitter();\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  loadPage(link: string): void {\n    this.pageChange.emit(link);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./pagination-simple.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 19
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"pagination-simple position-relative\" *ngIf=\"links\">\n  <div class=\"inner\" fxFlex=\"100\" fxLayoutAlign=\"center center\">\n    <button [disabled]=\"!links.prev\" (click)=\"loadPage(links.prev.href)\" mat-icon-button matTooltip=\"上一页\"\n      matTooltipPosition=\"above\">\n      <mat-icon>chevron_left</mat-icon>\n    </button>\n    <button [disabled]=\"!links.next\" (click)=\"loadPage(links.next.href)\" mat-icon-button matTooltip=\"下一页\"\n      matTooltipPosition=\"above\">\n      <mat-icon>chevron_right</mat-icon>\n    </button>\n  </div>\n</div>\n"
        },
        {
            "name": "PanelComponent",
            "id": "component-PanelComponent-04578e569856a19919db288efb9c5d983a611e71ea3c1fcc38046d39fd9f75baa8bfd4617707851b2f8c440e2a8aa546dcf7536ddbf3c4998914e33e4400f6ca",
            "file": "src/app/uiux/widgets/panel/panel.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-panel",
            "styleUrls": [
                "./panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n@Component({\n  selector: 'app-panel',\n  templateUrl: './panel.component.html',\n  styleUrls: ['./panel.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PanelComponent implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"panel\" *ngIf=\"content\">\n  <a class=\"anchor\" *ngIf=\"content.id\" [id]=\"content.id\"></a>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n  <div class=\"container\">\n    <app-title *ngIf=\"content.title\" [content]=\"content.title\"></app-title>\n    <mat-accordion multi>\n      <mat-expansion-panel [expanded]=\"item?.params?.expanded\" *ngFor=\"let item of content.elements\">\n        <mat-expansion-panel-header>\n          <mat-panel-title *ngIf=\"item.title\">\n            {{item.title}}\n          </mat-panel-title>\n          <mat-panel-description *ngIf=\"item.description\">\n            {{item.description}}\n            <mat-icon *ngIf=\"item.icon\">{{item.icon}}</mat-icon>\n          </mat-panel-description>\n        </mat-expansion-panel-header>\n        <app-dynamic-widgets *ngFor=\"let item of item.elements\" [content]=\"item\"></app-dynamic-widgets>\n      </mat-expansion-panel>\n    </mat-accordion>\n  </div>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n</div>\n"
        },
        {
            "name": "PopupComponent",
            "id": "component-PopupComponent-b3d69a81c5d249514b4ab467640bacb7ba1bfef320abc6deb16f64e560ead8fa7575d9cdd3c7729b06c50954589e1f9daf46691a0ca5d36cc1ee3cb4fbb961e2",
            "file": "src/app/core/branding/footer/popup/popup.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-popup",
            "styleUrls": [
                "./popup.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./popup.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-popup',\n  templateUrl: './popup.component.html',\n  styleUrls: ['./popup.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PopupComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./popup.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>popup works!</p>\n"
        },
        {
            "name": "Profile1v1Component",
            "id": "component-Profile1v1Component-4ec8cafaa36e4247d92494d9c7f970fa5cf5b67a50923e1960b01d72b54ffd08fdb81dcdb0c396d2be4233fddcba681f3c8be57fe632d480186e794b38134967",
            "file": "src/app/uiux/combs/profile/profile1v1/profile1v1.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-profile1v1",
            "styleUrls": [
                "./profile1v1.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./profile1v1.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "avatar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IImg",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { IImg } from '@core/interface/widgets/IImg';\nimport { CORE_CONFIG } from '@core/token/core.config';\nimport { ICoreConfig } from '@core/mobx/IAppConfig';\n\n@Component({\n  selector: 'app-profile1v1',\n  templateUrl: './profile1v1.component.html',\n  styleUrls: ['./profile1v1.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class Profile1v1Component implements OnInit {\n  @Input() content: any;\n  avatar: IImg;\n  constructor(@Inject(CORE_CONFIG) private coreConfig: ICoreConfig) {}\n\n  ngOnInit(): void {\n    if (!this.content?.avatar?.src) {\n      this.avatar = {\n        src: this.coreConfig.defaultAvatar,\n        alt: 'default avatar',\n      };\n    } else {\n      this.avatar = this.content.avatar;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/theme/mixins/amixin\";\n@import \"/src/theme/variable/breakpoint\";\n\n.actions {\n  position: absolute;\n  right: 0;\n  top: 0;\n  padding: 4px;\n  button {\n    opacity: 0.75;\n  }\n}\n\n::ng-deep .actions-menu {\n  .mat-button {\n    width: 100%;\n    .mat-button-focus-overlay {\n      background-color: transparent !important;\n    }\n  }\n}\n\n.box {\n  ::ng-deep {\n    img {\n      width: 100px;\n      height: 100px;\n      @include border-radius(50%, 50%, 50%, 50%);\n    }\n  }\n}\n\n.profile-banner {\n  overflow: hidden;\n  padding: 80px 0;\n  @media #{$gt-sm} {\n    padding: 180px 0;\n  }\n}\n\n.left {\n  @media #{$gt-sm} {\n    position: relative;\n    top: -245px;\n    border-radius: 4px;\n    .box {\n      height: 205px;\n      box-sizing: border-box;\n    }\n  }\n}\n\n.label {\n  white-space: nowrap;\n}\n",
                    "styleUrl": "./profile1v1.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "coreConfig",
                        "type": "ICoreConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "coreConfig",
                        "type": "ICoreConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"profile-banner position-relative\">\n  <app-bg *ngIf=\"content.bannerBg\" [content]=\"content.bannerBg\">\n    <app-img [content]=\"content.bannerBg.img\"></app-img>\n  </app-bg>\n</div>\n<div class=\"profile-1v1 position-relative m-y\">\n  <div class=\"container\">\n    <div class=\"profile\" fxLayoutAlign=\"space-between start\" fxLayout=\"row wrap\">\n      <div class=\"left m-bottom\" fxFlex.lt-md=\"0 0 100\" fxFlex.gt-sm=\"0 0 30\">\n        <div class=\"box p-y-sm p-x text-center\">\n          <app-img [content]=\"avatar\"></app-img>\n          <h2 class=\"mat-h2 m-bottom-0 m-top-xs\">{{content.name}}</h2>\n          <div class=\"subTitle\">{{content.subTitle}}</div>\n          <div class=\"actions\" *ngIf=\"content.actions\">\n            <button mat-icon-button aria-label=\"menu\" [matMenuTriggerFor]=\"menu\">\n              <mat-icon>more_vert</mat-icon>\n            </button>\n            <mat-menu #menu=\"matMenu\" class=\"actions-menu\">\n              <button mat-menu-item *ngFor=\"let action of content.actions\">\n                <app-dynamic-widgets [content]=\"action\">\n                </app-dynamic-widgets>\n              </button>\n            </mat-menu>\n          </div>\n        </div>\n        <mat-divider></mat-divider>\n        <div class=\"left-item p-y-sm p-x-sm\" *ngIf=\"content?.details\">\n          <app-title [content]=\"{\n            'label':content.details.label,\n            'style':'style-v4'\n          }\"></app-title>\n          <div class=\"list\">\n            <div fxLayoutAlign=\"start start\" *ngFor=\"let item of content.details.elements\">\n              <app-icon [content]=\"item.icon\"></app-icon>\n              <div class=\"label m-right-xs bold\">{{item.label}}:</div>\n              <div>{{item.content}}</div>\n            </div>\n          </div>\n        </div>\n        <div class=\"left-bottom p-y-sm p-x-sm\" *ngIf=\"content?.leftBottom\">\n          <div class=\"content\">\n            <div class=\"item m-bottom\" *ngFor=\"let item of content.leftBottom\">\n              <app-title [content]=\"item.title\"></app-title>\n              <app-dynamic-widgets [content]=\"item\"></app-dynamic-widgets>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"right\" fxFlex.lt-md=\"0 0 100\" fxFlex.gt-sm=\"0 0 calc(100% - 30% - 4rem)\">\n        <div class=\"content\">\n          <div class=\"item m-bottom\" *ngFor=\"let item of content.content\">\n            <ng-container *ngIf=\"!(item.empty && item.empty === true)\">\n              <app-title [content]=\"{\n                'label':item.label,\n                'style':'style-v4'\n              }\"></app-title>\n              <app-dynamic-widgets [content]=\"item\"></app-dynamic-widgets>\n            </ng-container>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "ProgressBarComponent",
            "id": "component-ProgressBarComponent-6143dc11b87e93d0017d723cc30af540afce84f3797ef9baffff06aa62aa1fa1d4899d762dc2348b48c609ace266e8d32e581c3588c3c0bb9d53fe75b79c2f14",
            "file": "src/app/uiux/widgets/progress-bar/progress-bar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-progress-bar",
            "styleUrls": [
                "./progress-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./progress-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-progress-bar',\n  templateUrl: './progress-bar.component.html',\n  styleUrls: ['./progress-bar.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProgressBarComponent implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-progress-bar {\n  height: 8px;\n  border-radius: 6px;\n  .mat-progress-bar-fill {\n    &:after {\n      border-radius: 6px;\n    }\n  }\n  .mat-progress-bar-buffer {\n    border-radius: 6px;\n  }\n}\n",
                    "styleUrl": "./progress-bar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"progress-bar\" *ngIf=\"content\">\n  <div class=\"label\">{{content?.label}}</div>\n  <mat-progress-bar class=\"m-bottom-sm\" [color]=\"content.color\" [mode]=\"content.mode\" [value]=\"content.value\"\n    [bufferValue]=\"content.bufferValue\">\n  </mat-progress-bar>\n</div>\n"
        },
        {
            "name": "ProgressGroupComponent",
            "id": "component-ProgressGroupComponent-056d986a6f2fd80e2a764bde6528667100e746949abf096da4d9c43c9ebaedad0d37ac1358b82875eda30b55fca7ecf22086361df9b6622b76247b031c9087d1",
            "file": "src/app/uiux/widgets/progress-group/progress-group.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-progress-group",
            "styleUrls": [
                "./progress-group.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./progress-group.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-progress-group',\n  templateUrl: './progress-group.component.html',\n  styleUrls: ['./progress-group.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProgressGroupComponent implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./progress-group.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"content\">\n  <app-progress-bar *ngFor=\"let bar of content.elements\" [content]=\"bar\"></app-progress-bar>\n</ng-container>\n"
        },
        {
            "name": "QuestionComponent",
            "id": "component-QuestionComponent-e9657c6dd4d4becd914f4ebb56b5a7680c7974afaa0eaf83fd9e6ea2f5f5ea9e1b70ff57d903736deb9700db3ec796cd36c8ddf002e6f8061e72abfdc83b9ae5",
            "file": "src/app/uiux/combs/node/question/question.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-question",
            "styleUrls": [
                "./question.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./question.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "IQuestion",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "comments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "contentState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ContentState",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "isAsked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "myCommentId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "nodeService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NodeService",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showEditor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "userState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserState",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "NodeComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "checkIsAsked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "checkQuestion",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getComments",
                    "args": [
                        {
                            "name": "timeStamp",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "timeStamp",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "state",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onShowEditor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport { IQuestion } from '@core/interface/node/INode';\nimport { UserState } from '@core/mobx/user/UserState';\nimport { NodeService } from '@core/service/node.service';\nimport { ScreenService } from '@core/service/screen.service';\nimport { NodeComponent } from '@uiux/base/node.widget';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { LoginComponent } from 'src/app/modules/user/login/login.component';\nimport { ContentState } from '@core/mobx/ContentState';\n\n@Component({\n  selector: 'app-question',\n  templateUrl: './question.component.html',\n  styleUrls: ['./question.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class QuestionComponent\n  extends NodeComponent\n  implements OnInit, OnDestroy\n{\n  @Input() content: IQuestion;\n  comments: any;\n  showEditor = false;\n  isAsked = false;\n  myCommentId = '';\n  dialogRef: MatDialogRef<any>;\n\n  destroy$: Subject<boolean> = new Subject<boolean>();\n  constructor(\n    public nodeService: NodeService,\n    public userState: UserState,\n    private screenService: ScreenService,\n    private cd: ChangeDetectorRef,\n    private router: Router,\n    private dialog: MatDialog,\n    public contentState: ContentState\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.checkIsAsked();\n    this.getComments();\n    if (this.screenService.isPlatformBrowser()) {\n      this.contentState.commentChange$\n        .pipe(takeUntil(this.destroy$))\n        .subscribe((state) => {\n          if (state) {\n            this.checkIsAsked();\n            this.getComments(+new Date());\n          }\n        });\n    }\n  }\n\n  onShowEditor(): void {\n    this.showEditor = true;\n    this.cd.detectChanges();\n  }\n\n  onChange(state: boolean): void {\n    // if success\n    if (state) {\n      this.checkIsAsked();\n      this.getComments(+new Date());\n    }\n  }\n\n  checkIsAsked(): void {\n    // TODO: 使用node查询是否有评论即可\n    const entityId = this.nodeService.getCommentRelEntityId(this.content);\n    const entityType = this.nodeService.getCommentType(this.content);\n    const params = [\n      `filter[uid.id]=${this.userState.currentUser.id}`,\n      `filter[entity_id.id]=${entityId}`,\n      `sort=-created`,\n      'filter[status]=1',\n      `page[limit]=1`,\n    ].join('&');\n    const path = this.nodeService.apiUrlConfig.commentGetPath;\n    this.nodeService\n      .getNodes(path, entityType, params)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((res) => {\n        if (res.data.length) {\n          this.isAsked = true;\n          this.showEditor = false;\n          this.myCommentId = res.data[0].id;\n        } else {\n          this.isAsked = false;\n          this.showEditor = false;\n          this.myCommentId = '';\n        }\n        this.cd.detectChanges();\n      });\n  }\n\n  checkQuestion(id: string): void {\n    this.screenService.scrollToAnchor(`q-${id}`);\n  }\n\n  getComments(timeStamp = 1): void {\n    this.nodeService\n      .getCommentsWitchChild(this.content, this.userState.csrfToken, timeStamp)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((res) => {\n        this.comments = res;\n        this.cd.detectChanges();\n      });\n  }\n\n  openLogin(): void {\n    const returnUrl = window.location.pathname;\n    this.router.navigate([], {\n      queryParams: { returnUrl },\n    });\n    this.dialogRef = this.dialog.open(LoginComponent);\n    this.dialogRef\n      .afterClosed()\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(() => {\n        this.cd.detectChanges();\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".question {\n  z-index: 1;\n}\n",
                    "styleUrl": "./question.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userState",
                        "type": "UserState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "contentState",
                        "type": "ContentState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userState",
                        "type": "UserState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "contentState",
                        "type": "ContentState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "NodeComponent",
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<article class=\"question position-relative p-y-sm\" *ngIf=\"content\">\n  <div class=\"container\">\n    <div class=\"top m-bottom-sm\">\n      <app-chip-list [classes]=\"'mini'\" [content]=\"content.topic\"></app-chip-list>\n    </div>\n    <h2 class=\"title\">{{content.title}}</h2>\n    <div class=\"question-details\" [innerHTML]=\"content.body|safeHtml\"></div>\n    <div class=\"actions m-y-sm\">\n      <button *ngIf=\"!userState.authenticated\" mat-raised-button color=\"primary\" (click)=\"openLogin()\">\n        <mat-icon>person</mat-icon> 登录作答\n      </button>\n      <button *ngIf=\"!isAsked && userState.authenticated\" mat-raised-button color=\"primary\" (click)=\"onShowEditor()\">\n        <mat-icon>editor</mat-icon> 回答\n      </button>\n      <button *ngIf=\"isAsked\" mat-raised-button color=\"warn\" (click)=\"checkQuestion(myCommentId)\">\n        <mat-icon>list</mat-icon> 查看回答\n      </button>\n    </div>\n  </div>\n</article>\n<article class=\"comment position-relative p-y-sm\">\n  <div class=\"container\">\n    <!-- input params and editor config -->\n    <app-comment-form [type]=\"'add'\" *ngIf=\"showEditor\" [content]=\"content\">\n    </app-comment-form>\n    <app-comment-list [comments]=\"comments\" [content]=\"content\">\n    </app-comment-list>\n  </div>\n</article>\n"
        },
        {
            "name": "SampleWidgetsComponent",
            "id": "component-SampleWidgetsComponent-ca1033b6183c175c9307cff6e000f4e642665ac04c10a8e5375ca6f852fb5687c9872ef3afb76127fefd9f46de8b0960ed97df76ba1b5e405e3b68f19adefa1e",
            "file": "src/app/modules/sample/sample-widgets/sample-widgets.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sample-widgets",
            "styleUrls": [
                "./sample-widgets.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sample-widgets.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "samples",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiService } from '@core/service/api.service';\nimport { FormGroup } from '@angular/forms';\nimport { FormService } from '@core/service/form.service';\n\n@Component({\n  selector: 'app-sample-widgets',\n  templateUrl: './sample-widgets.component.html',\n  styleUrls: ['./sample-widgets.component.scss'],\n})\nexport class SampleWidgetsComponent implements OnInit {\n  samples: any;\n  form: FormGroup;\n  constructor(\n    private http: HttpClient,\n    private apiService: ApiService,\n    private formService: FormService\n  ) {}\n\n  ngOnInit(): void {\n    this.http\n      .get(`${this.apiService.apiUrl}/assets/app/sample/widgets/widgets.json`)\n      .subscribe((res: any) => {\n        this.samples = res.body;\n        this.form = this.formService.toFormGroup(this.samples);\n      });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./sample-widgets.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"samples\">\n  <div class=\"container\">\n    <div class=\"inner\" fxLayout=\"column\">\n      <div class=\"item\" *ngFor=\"let widget of samples\">\n        <app-dynamic-widgets [content]=\"widget\" [form]=\"form\"></app-dynamic-widgets>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "SearchActionComponent",
            "id": "component-SearchActionComponent-c4bc53f12955dc00ebde9d5231cf90ba04b9b7b25c7bffa4438534c2acd037a8135815f073a9ae2a08f934fffe9c4e175bfc0f9337a5c511cf7e8f771b707be4",
            "file": "src/app/uiux/widgets/actions/search-action/search-action.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-search-action",
            "styleUrls": [
                "./search-action.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./search-action.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "ISearchAction",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "initForm",
                    "args": [
                        {
                            "name": "form",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "search",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  Input,\n  ElementRef,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  OnDestroy,\n} from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FormGroup } from '@angular/forms';\nimport { FormService } from '@core/service/form.service';\nimport { isEmpty, omitBy } from 'lodash';\nimport { fromEvent, Subject } from 'rxjs';\nimport { ScreenService } from '@core/service/screen.service';\nimport { takeUntil } from 'rxjs/operators';\nimport { ISearchAction } from '@core/interface/widgets/IActions';\n\n@Component({\n  selector: 'app-search-action',\n  templateUrl: './search-action.component.html',\n  styleUrls: ['./search-action.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchActionComponent implements OnInit, AfterViewInit, OnDestroy {\n  @Input() content: ISearchAction;\n  form: FormGroup;\n\n  destroy$: Subject<boolean> = new Subject<boolean>();\n  constructor(\n    private router: Router,\n    private formService: FormService,\n    private ele: ElementRef,\n    private screenService: ScreenService\n  ) {}\n\n  ngOnInit(): void {\n    this.initForm(this.content.form);\n  }\n\n  initForm(form: any[]): void {\n    this.form = this.formService.toFormGroup(form);\n  }\n\n  ngAfterViewInit(): void {\n    if (this.screenService.isPlatformBrowser()) {\n      const input =\n        this.ele.nativeElement.querySelectorAll('input[type=text]')[0];\n      if (input) {\n        fromEvent(input, 'keyup')\n          .pipe(takeUntil(this.destroy$))\n          .subscribe((event: any) => {\n            if (event.keyCode === 13) {\n              this.search();\n            }\n          });\n      }\n    }\n  }\n\n  onSubmit(): void {\n    this.search();\n  }\n\n  search(): void {\n    const query = omitBy(this.form.value, isEmpty);\n    if (!isEmpty(query)) {\n      this.router.navigate(['/search'], { queryParams: query });\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/theme/variable/breakpoint\";\nform {\n  width: 100%;\n  box-sizing: border-box;\n\n  button {\n    right: 6px;\n    top: 16px;\n    border-radius: 30px;\n    padding: 3px 30px;\n  }\n\n  @media #{$lt-md} {\n    .form-group {\n      ::ng-deep {\n        .mat-form-field-infix {\n          width: calc(100vw - 4rem);\n        }\n      }\n    }\n    button {\n      position: relative;\n    }\n  }\n\n  @media #{$gt-sm} {\n    border-radius: 50px;\n    padding: 10px 400px 0 30px;\n    .form-group {\n      ::ng-deep {\n        .mat-form-field-infix {\n          width: 100px;\n        }\n        .mat-form-field-suffix {\n          display: none;\n        }\n        .mat-form-field-underline {\n          display: none;\n        }\n      }\n      > .control {\n        &:last-child {\n          flex: 100%;\n        }\n      }\n    }\n    button {\n      position: absolute;\n    }\n    input {\n      width: 100%;\n      padding-left: 20px;\n      color: #3c4858 !important;\n      border: none;\n      outline: none !important;\n      box-sizing: border-box;\n      line-height: 26px;\n    }\n  }\n}\n",
                    "styleUrl": "./search-action.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ele",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ele",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"search-action m-y-sm\" *ngIf=\"content\">\n  <form [formGroup]=\"form\" class=\"position-relative\" (ngSubmit)=\"onSubmit()\">\n    <div class=\"form-group\" fxLayoutAlign.lt-md=\"center center\" fxLayoutAlign.gt-sm=\"start center\"\n      fxLayoutGap.gt-sm=\"2rem\" fxLayout.lt-md=\"column\" fxLayout.gt-sm=\"row\" *ngIf=\"content.form\">\n      <app-dynamic-form-control class=\"control\" *ngFor=\"let item of content.form\" [control]=\"item\" [form]=\"form\">\n      </app-dynamic-form-control>\n    </div>\n    <button mat-raised-button type=\"submit\" color=\"{{content.button?.color}}\">{{content.button?.label}}</button>\n  </form>\n</div>\n"
        },
        {
            "name": "SearchBoxComponent",
            "id": "component-SearchBoxComponent-508f4d849ad2f8dd0088eca40cc893996571e2146764a62e754715ece4083a85eb74cd4a6f19e7337057a94ea929ef0831e6bdf5a4ce2ed3b6aaf4ec43b6dc18",
            "file": "src/app/core/branding/header/menu/search-box/search-box.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-search-box",
            "styleUrls": [
                "./search-box.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./search-box.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "nodeService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NodeService",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "initForm",
                    "args": [
                        {
                            "name": "form",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFormChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSelected",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "search",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApiParams",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getDeepValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getFormParams",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Params",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getParams",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getParamsState",
                    "args": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getUrlQuery",
                    "args": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "handlerPager",
                    "args": [
                        {
                            "name": "pager",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pager",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "initFormValueWithUrlQuery",
                    "args": [
                        {
                            "name": "query",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "controls",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "controls",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "row",
                    "args": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "padding",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'4rem'"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "padding",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'4rem'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  OnInit,\n  OnDestroy,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { NodeService } from '@core/service/node.service';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport { FormService } from '@core/service/form.service';\nimport { isEmpty, omitBy } from 'lodash';\nimport { BaseComponent } from '@uiux/base/base.widget';\n\n@Component({\n  selector: 'app-search-box',\n  templateUrl: './search-box.component.html',\n  styleUrls: ['./search-box.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent\n  extends BaseComponent\n  implements OnInit, OnDestroy\n{\n  @Input() content: any;\n\n  form: FormGroup;\n  options: any[] = [];\n\n  constructor(\n    public nodeService: NodeService,\n    private router: Router,\n    private formService: FormService,\n    private cd: ChangeDetectorRef\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.initForm(this.content);\n  }\n\n  initForm(form: any): void {\n    this.form = this.formService.toFormGroup([form]);\n    this.onFormChange();\n  }\n\n  onFormChange(): void {\n    this.form.valueChanges\n      .pipe(debounceTime(1000), distinctUntilChanged())\n      .subscribe((value) => {\n        const params = omitBy(\n          Object.assign(\n            {\n              page: '0',\n              loading: 0,\n            },\n            value\n          ),\n          isEmpty\n        );\n\n        this.nodeService\n          .search('content', this.getApiParams(params))\n          .subscribe((data) => {\n            this.options = data.rows.map((item: any) => {\n              return {\n                label: item.title,\n                href: item.url,\n              };\n            });\n            this.cd.detectChanges();\n          });\n      });\n  }\n\n  onSelected(data: any): void {\n    this.form.reset();\n    this.router.navigate([`${data.option.value}`]);\n    this.cd.detectChanges();\n  }\n\n  ngOnDestroy(): void {}\n\n  search(value: any): void {\n    this.form.reset();\n    this.router.navigate(['search'], { queryParams: value });\n    this.cd.detectChanges();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/theme/mixins/amixin\";\n@import \"/src/theme/variable/breakpoint\";\n.search-box {\n  width: 150px;\n  form {\n    height: 38px;\n    position: relative;\n    width: 100%;\n    @include border-radius(200px, 200px, 200px, 200px);\n    overflow: hidden;\n    box-sizing: border-box;\n    > .js-form-type-search {\n      height: 36px;\n      margin: 0;\n    }\n  }\n  ::ng-deep .mat-form-field-appearance-fill .mat-form-field-infix {\n    padding: 0;\n  }\n  input[type=\"search\"] {\n    border: medium none;\n    height: 100%;\n    width: 100%;\n    padding: 1px 20px 0 40px;\n    font-size: 14px;\n    @include border-radius(200px, 200px, 200px, 200px);\n    &:active,\n    &:focus {\n      -moz-box-shadow: none;\n      -webkit-box-shadow: none;\n      box-shadow: none;\n      outline: none;\n    }\n  }\n  .mat-icon {\n    padding: 0;\n    position: absolute;\n    left: 11px;\n    top: 10px;\n    cursor: pointer;\n    width: 20px;\n    height: 20px;\n    font-size: 20px;\n  }\n  @media #{$gt-md} {\n    width: 180px;\n  }\n}\n",
                    "styleUrl": "./search-box.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"search-box\">\n  <form (ngSubmit)=\"search(form.value)\" [formGroup]=\"form\" matTooltip=\"{{content?.tooltip}}\" matTooltipPosition=\"above\">\n    <div class=\"js-form-type-search\">\n      <a href=\"{{content.link}}\" target=\"_blank\" title=\"Search\">\n        <mat-icon>search</mat-icon>\n      </a>\n      <input matInput formControlName=\"{{content.key}}\" type=\"search\" size=\"15\" maxlength=\"128\"\n        value=\"{{content.value}}\" class=\"form-search\" [matAutocomplete]=\"auto\" placeholder=\"{{content?.placeholder}}\">\n      <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"onSelected($event)\">\n        <mat-option *ngFor=\"let option of options\" [value]=\"option.href\">\n          <app-link [content]=\"option\"></app-link>\n        </mat-option>\n      </mat-autocomplete>\n    </div>\n  </form>\n</div>\n"
        },
        {
            "name": "SearchComponent",
            "id": "component-SearchComponent-c3628b6760653175972a00ae1a273150d3fe77662f6a134865d2d7b8a7e47d0f20ab795ae19b3c6985a0b0ecd96caeffe3bb7d69b90048977a12ad048968e83b",
            "file": "src/app/uiux/combs/search/search.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-search",
            "styleUrls": [
                "./search.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./search.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "filterForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "nodes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "nodeService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NodeService",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "pager",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "routerService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RouteService",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "searchEntry",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "initForm",
                    "args": [
                        {
                            "name": "items",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "nodeSearch",
                    "args": [
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPageChange",
                    "args": [
                        {
                            "name": "page",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectChange",
                    "args": [
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateList",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApiParams",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getDeepValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getFormParams",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Params",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getParams",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getParamsState",
                    "args": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getUrlQuery",
                    "args": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "handlerPager",
                    "args": [
                        {
                            "name": "pager",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pager",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "initFormValueWithUrlQuery",
                    "args": [
                        {
                            "name": "query",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "controls",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "controls",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "row",
                    "args": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "padding",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'4rem'"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "padding",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'4rem'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n  ChangeDetectorRef,\n  OnDestroy,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { omitBy, isEmpty } from 'lodash-es';\nimport { NodeService } from '@core/service/node.service';\nimport { RouteService } from '@core/service/route.service';\nimport { BaseComponent } from '../../base/base.widget';\nimport { FormGroup } from '@angular/forms';\nimport { FormService } from '@core/service/form.service';\nimport { debounceTime, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { ScreenService } from '@core/service/screen.service';\nimport { Subject } from 'rxjs';\n\n@Component({\n  selector: 'app-search',\n  templateUrl: './search.component.html',\n  styleUrls: ['./search.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchComponent\n  extends BaseComponent\n  implements OnInit, OnDestroy\n{\n  @Input() content: any;\n  searchEntry: any;\n  page: number;\n  pager: any;\n  form: FormGroup;\n  filterForm: any[];\n  nodes: [];\n  loading = false;\n  destroy$: Subject<boolean> = new Subject<boolean>();\n\n  constructor(\n    public nodeService: NodeService,\n    private router: ActivatedRoute,\n    public routerService: RouteService,\n    private formService: FormService,\n    private screenService: ScreenService,\n    private cd: ChangeDetectorRef\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    if (this.screenService.isPlatformBrowser()) {\n      this.router.queryParams.subscribe((query: any) => {\n        this.page = query.page || 0;\n        const querys = omitBy(\n          Object.assign(\n            {\n              page: this.page,\n            },\n            query\n          ),\n          isEmpty\n        );\n        if (this.content.sidebar) {\n          this.filterForm = this.initFormValueWithUrlQuery(\n            querys,\n            this.content.sidebar\n          );\n          this.initForm(this.filterForm);\n        }\n        this.nodeSearch(querys);\n      });\n    } else {\n      this.form = new FormGroup({});\n    }\n  }\n\n  initForm(items: any[]): void {\n    this.form = this.formService.toFormGroup(items);\n    this.form.valueChanges\n      .pipe(\n        debounceTime(1000),\n        distinctUntilChanged(),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((value) => {\n        const params = Object.assign({ page: 0 }, value);\n        this.onSelectChange(params);\n      });\n  }\n\n  onPageChange(page: any): void {\n    this.page = page;\n    this.nodeSearch({ page: this.page });\n  }\n\n  onSelectChange(options: any): void {\n    this.page = options.page;\n    this.nodeSearch(options);\n  }\n\n  nodeSearch(options: any): void {\n    this.loading = true;\n    this.searchEntry = omitBy(options, isEmpty);\n    const type = this.getParams(this.content, 'type') || 'content';\n    const state = this.getParamsState(this.form.value, options);\n    const params = this.getApiParams(state);\n    this.nodeService\n      .search(type, params)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(\n        (data) => {\n          this.updateList(data, this.form.value, options);\n          this.loading = false;\n          this.cd.detectChanges();\n        },\n        (error) => {\n          this.loading = false;\n          this.cd.detectChanges();\n        }\n      );\n  }\n\n  updateList(data: any, formValues: any, options: any): void {\n    const pager = data.pager;\n    this.pager = this.handlerPager(pager);\n    this.nodes = data.rows.map((item: any) => {\n      return {\n        link: {\n          label: item.title,\n          href: item.url,\n          target: '_blank',\n        },\n        created: item.created,\n        body: item.body.toString(),\n        user: item.user,\n        type: item.type || '',\n        actions: item.actions || [],\n      };\n    });\n    this.routerService.updateQueryParams(this.getUrlQuery(formValues, options));\n    this.cd.detectChanges();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./search.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "routerService",
                        "type": "RouteService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "routerService",
                        "type": "RouteService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-search-header [content]=\"content.header\" [filterForm]=\"filterForm\" [form]=\"form\">\n</app-search-header>\n<div class=\"container\">\n  <div class=\"search-body\" fxLayout=\"row wrap\">\n    <app-search-sidebar *ngIf=\"filterForm\" [searchEntry]=\"searchEntry\" [label]=\"content.label\"\n      [content]=\"content.sidebar\" [form]=\"form\" fxFlex.lt-sm=\"0 0 100\" fxFlex.gt-md=\"0 0 25%\">\n    </app-search-sidebar>\n    <app-search-list fxFlex.lt-sm=\"0 0 100\" fxFlex.gt-md=\"0 0 {{content.sidebar ? '75%':'100%'}}\" [content]=\"nodes\"\n      [loading]=\"loading\" [pager]=\"pager\" (pageChange)=\"onPageChange($event)\">\n    </app-search-list>\n  </div>\n</div>\n"
        },
        {
            "name": "SearchHeaderComponent",
            "id": "component-SearchHeaderComponent-975bce6798e3c22dd58fbd60eff8d97581f1d940cbb352548cc967d1a4fc7120084564e28d81347c1f32b68e6a871fddc49aa7a2381452618cc32d68530191c7",
            "file": "src/app/uiux/combs/search/search-header/search-header.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-search-header",
            "styleUrls": [
                "./search-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./search-header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "filterForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "FormGroup",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n@Component({\n  selector: 'app-search-header',\n  templateUrl: './search-header.component.html',\n  styleUrls: ['./search-header.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchHeaderComponent implements OnInit {\n  @Input() content: any;\n  @Input() filterForm: any;\n  @Input() form: FormGroup;\n\n  formControl: any;\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/theme/variable/breakpoint\";\n.search-header {\n  overflow: hidden;\n  form {\n    z-index: 10;\n  }\n  input {\n    box-sizing: border-box;\n    padding: 14px 20px;\n    width: 100%;\n    color: #3c4858 !important;\n    border: none;\n    outline: none !important;\n    padding-right: 30px;\n    padding-left: 50px;\n    background-color: rgba(255, 255, 255, 0.8);\n    box-shadow: 0 5px 13px rgb(60 72 88 / 20%) !important;\n    border-radius: 50rem !important;\n  }\n  form {\n    position: relative;\n    max-width: 600px;\n    margin: 0px auto;\n  }\n  @media #{$lt-sm} {\n    .features-absolute {\n      position: relative;\n    }\n  }\n}\n.filter {\n  position: relative;\n  z-index: 2;\n}\n\n.search-input {\n  position: relative;\n  .search-icon {\n    position: absolute;\n    left: 20px;\n    top: 16px;\n    line-height: 1;\n    cursor: pointer;\n  }\n}\n",
                    "styleUrl": "./search-header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 19
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"search-header position-relative bg-shadow p-y-xl\" *ngIf=\"content\">\n  <app-bg [content]=\"content.bg\" *ngIf=\"content.bg\">\n    <app-img [content]=\"content.bg.img\"></app-img>\n  </app-bg>\n  <div class=\"container position-relative\">\n    <app-text [content]=\"content.text\"></app-text>\n    <app-spacer [size]=\"'sm'\"></app-spacer>\n    <div class=\"width-100\">\n      <form [formGroup]=\"form\">\n        <div class=\"search-input\">\n          <ng-container *ngFor=\"let item of filterForm\">\n            <ng-container [ngSwitch]=\"item.key\">\n              <input *ngSwitchCase=\"'keys'\" formControlName=\"{{item.key}}\" matInput\n                placeholder=\"{{content.input.placeholder}}\" type=\"search\" size=\"15\" maxlength=\"128\"\n                [value]=\"item.value || ''\" class=\"form-search\">\n              <input *ngSwitchCase=\"'title'\" formControlName=\"{{item.key}}\" matInput\n                placeholder=\"{{content.input.placeholder}}\" type=\"search\" size=\"15\" maxlength=\"128\"\n                [value]=\"item.value || ''\" class=\"form-search\">\n            </ng-container>\n          </ng-container>\n        </div>\n      </form>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "SearchListComponent",
            "id": "component-SearchListComponent-79858e3096251e50ac256a5986c5e5415d7dc8ff9e5f1be46a4cdc46b02b9ba7e2a4d84838c2a85e852092f7105560ab043f6a34e1dcae7fe940876fda329b20",
            "file": "src/app/uiux/combs/search/search-list/search-list.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-search-list",
            "styleUrls": [
                "./search-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./search-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "pager",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "pageChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPageChange",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackByFn",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  OnInit,\n  EventEmitter,\n  Output,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-search-list',\n  templateUrl: './search-list.component.html',\n  styleUrls: ['./search-list.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchListComponent implements OnInit {\n  @Input() content: any;\n  @Input() pager: any;\n  @Input() loading: boolean;\n\n  @Output() pageChange = new EventEmitter();\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  onPageChange(page: number): void {\n    this.pageChange.emit(page - 1);\n  }\n\n  trackByFn(index: number, item: any): number {\n    return index;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".search-list {\n  margin: 0 auto;\n  max-width: 800px;\n  min-height: 100vh;\n  .list {\n    overflow: hidden;\n    .bottom {\n      font-size: 14px;\n    }\n  }\n}\n\n.title {\n  ::ng-deep {\n    em {\n      font-style: normal;\n    }\n  }\n}\n",
                    "styleUrl": "./search-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 22
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"m-y\" *ngIf=\"loading\" fxLayoutAlign=\"center center\">\n  <app-spinner class=\"m-y\" [content]=\"{color:'primary', size:40}\"></app-spinner>\n</div>\n<div class=\"search-list\" [ngClass.gt-sm]=\"'p-x-sm m-y'\" *ngIf=\"content && pager\">\n  <div class=\"container\">\n    <div class=\"results m-bottom-sm\">\n      找到 {{pager?.totalItems}} 个结果\n    </div>\n    <mat-divider></mat-divider>\n    <div class=\"list p-y-sm p-x-sm m-y-sm\" fxLayout.xs=\"column\" fxLayout.gt-xs=\"row\"\n      *ngFor=\"let item of content | paginate: pager; trackBy: trackByFn\">\n      <div *ngIf=\"item?.img?.src\" class=\"object-left position-relative m-right-sm\" fxFlex.xs=\"100\"\n        fxFlex.gt-xs=\"0 0 30\">\n        <app-img [content]=\"item.img\"></app-img>\n      </div>\n      <div class=\"content width-100\">\n        <h2 class=\"title\">\n          <app-link [content]=\"item.link\"></app-link>\n        </h2>\n        <div *ngIf=\"item.body\" [innerHTML]=\"item.body | stripTags:'strong':'a':'em' | shorten: 150: '...' \"></div>\n        <div class=\"bottom m-y-sm\" fxLayoutAlign=\"space-between center\">\n          <div fxLayoutGap=\"1rem\" fxLayout fxLayoutAlign=\"start center\">\n            <div>{{item.user | ucfirst}}</div>\n            <div>{{item?.type}}</div>\n            <div [innerHTML]=\"item?.category\"></div>\n            <div [innerHTML]=\"item?.tags\"></div>\n            <div class=\"actions\">\n              <app-dynamic-widgets [content]=\"action\" *ngFor=\"let action of item.actions\"></app-dynamic-widgets>\n            </div>\n          </div>\n          <div>{{item.created}}</div>\n        </div>\n      </div>\n    </div>\n    <app-pagination *ngIf=\"content?.length > 0;else empty\" (pageChange)=\"onPageChange($event)\"></app-pagination>\n    <ng-template #empty>\n      <div class=\"text-center p-y-xl\">\n        <p>没有数据。</p>\n      </div>\n    </ng-template>\n  </div>\n</div>\n"
        },
        {
            "name": "SearchSidebarComponent",
            "id": "component-SearchSidebarComponent-cb1e9edde4477871c905fac0d4c72504929a57b62f80f84810c0fa98f39c2ababaab74f2c84227253d10300e5be6e19120c7399053c41236becebeb391238251",
            "file": "src/app/uiux/widgets/sidebar/search-sidebar/search-sidebar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-search-sidebar",
            "styleUrls": [
                "./search-sidebar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./search-sidebar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "ILabel",
                    "decorators": []
                },
                {
                    "name": "searchEntry",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "panelOpenState",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { isEmpty, pick, values } from 'lodash';\n\nexport interface ILabel {\n  clear: string;\n  filter: string;\n}\n@Component({\n  selector: 'app-search-sidebar',\n  templateUrl: './search-sidebar.component.html',\n  styleUrls: ['./search-sidebar.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchSidebarComponent implements OnInit {\n  @Input() content: any;\n  @Input() label: ILabel;\n  @Input() form: FormGroup;\n  @Input() searchEntry: any;\n\n  panelOpenState = true;\n  constructor(private cd: ChangeDetectorRef) {}\n\n  ngOnInit(): void {}\n\n  get isEmpty(): boolean {\n    return isEmpty(this.searchEntry);\n  }\n\n  get values(): string[] {\n    return values(pick(this.searchEntry, ['keys', 'title']));\n  }\n\n  clear(): void {\n    this.searchEntry = {};\n    this.form.reset();\n    this.cd.detectChanges();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".search-sidebar {\n  position: sticky;\n  position: -webkit-sticky;\n  top: 80px;\n  ::ng-deep .mat-form-field-infix {\n    width: 100%;\n  }\n}\n\n.mat-expansion-panel-spacing {\n  margin: 0;\n}\n\n.mat-expansion-panel:not([class*=\"mat-elevation-z\"]) {\n  box-shadow: none;\n}\n",
                    "styleUrl": "./search-sidebar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "isEmpty": {
                    "name": "isEmpty",
                    "getSignature": {
                        "name": "isEmpty",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 32
                    }
                },
                "values": {
                    "name": "values",
                    "getSignature": {
                        "name": "values",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 36
                    }
                }
            },
            "templateData": "<div class=\"search-sidebar m-y\" *ngIf=\"content\">\n  <div class=\"sidebar-header\">\n    <div class=\"key m-y-xs m-x-xs\" fxFlex=\"0 1 100\">\n      <mat-chip-list>\n        <mat-chip *ngIf=\"form.controls['title']?.value\" color=\"primary\" selected>{{form.controls['title'].value}}\n        </mat-chip>\n        <mat-chip *ngIf=\"form.controls['keys']?.value\" color=\"primary\" selected>{{form.controls['keys'].value}}\n        </mat-chip>\n      </mat-chip-list>\n    </div>\n    <div class=\"item m-y-xs m-x-xs\" fxFlex=\"0 1 100\" fxLayoutAlign=\"end center\">\n      <button mat-button (click)=\"clear()\">\n        <mat-icon>clear</mat-icon>{{label?.clear||'清空'}}\n      </button>\n    </div>\n  </div>\n  <mat-divider></mat-divider>\n  <form [formGroup]=\"form\">\n    <mat-accordion>\n      <mat-expansion-panel expanded=true (opened)=\"panelOpenState = true\" (closed)=\"panelOpenState = false\">\n        <mat-expansion-panel-header>\n          <mat-panel-title>\n            <strong>{{label?.filter||'过滤条件'}}</strong>\n          </mat-panel-title>\n        </mat-expansion-panel-header>\n        <ng-container *ngFor=\"let item of content\">\n          <app-dynamic-widgets [content]=\"item\" [form]=\"form\">\n          </app-dynamic-widgets>\n        </ng-container>\n      </mat-expansion-panel>\n    </mat-accordion>\n  </form>\n</div>\n"
        },
        {
            "name": "SearchStatusComponent",
            "id": "component-SearchStatusComponent-404ec84d2a789901b575a71d03ba7be1f1e01ac0f3ca0d48320c8dc62031ad4549a4f6b5d9a2920e3255041f0ef62888bf3274d82217d61e66091f2e0ca16c06",
            "file": "src/app/uiux/combs/search/search-status/search-status.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-search-status",
            "styleUrls": [
                "./search-status.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./search-status.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-search-status',\n  templateUrl: './search-status.component.html',\n  styleUrls: ['./search-status.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchStatusComponent implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./search-status.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"search-status position-relative width-100\" *ngIf=\"content?.key\">\n  <div fxLayout=\"column\" fxFlex=\"100\" fxLayoutAlign=\"center center\" class=\"text-center m-y\">\n    <h1 class=\"mat-display-1 key m-bottom-xs\" *ngIf=\"content?.key\">{{content.key}}</h1>\n    <div class=\"results\" *ngIf=\"content?.key\">\n      发现了{{content.results.count}}个与{{content.key}}有关的结果\n      <div class=\"links\" *ngIf=\"content?.results?.relate\">\n        <div class=\"label\">相关搜索：</div>\n        <app-link [content]=\"link\" *ngFor=\"let link of content.results.relate\"></app-link>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "SearchTopComponent",
            "id": "component-SearchTopComponent-b7d2997b8c5a106dba916a86c11ba573599faed0ef916d26e06189f8db70ffd7ad34c3b5afba6d54145e3338188250c5876a8a3bef11a5844942097acdd914fa",
            "file": "src/app/uiux/combs/search/search-top/search-top.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-search-top",
            "styleUrls": [
                "./search-top.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./search-top.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "initForm",
                    "args": [
                        {
                            "name": "items",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormService } from '@core/service/form.service';\nimport { ScreenService } from '@core/service/screen.service';\n\n@Component({\n  selector: 'app-search-top',\n  templateUrl: './search-top.component.html',\n  styleUrls: ['./search-top.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchTopComponent implements OnInit {\n  @Input() content: any;\n  @Output() selectChange = new EventEmitter();\n\n  form: FormGroup;\n  constructor(\n    private formService: FormService,\n    private screenService: ScreenService,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    if (this.screenService.isPlatformBrowser()) {\n      this.initForm(this.content);\n    }\n  }\n\n  initForm(items: any[]): void {\n    this.form = this.formService.toFormGroup(items);\n    this.form.valueChanges.subscribe((value) => {\n      this.selectChange.emit(value);\n    });\n    this.cd.detectChanges();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".item {\n  padding-right: 20px;\n  ::ng-deep {\n    .mat-form-field-infix {\n      width: 100%;\n    }\n  }\n  &:last-child {\n    padding-right: 0;\n  }\n}\n",
                    "styleUrl": "./search-top.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"search-top\">\n  <div class=\"item\" *ngFor=\"let item of content\" fxFlex=\"0 1 100\">\n    <app-dynamic-widgets [content]=\"item\" [form]=\"form\">\n    </app-dynamic-widgets>\n  </div>\n</div>\n"
        },
        {
            "name": "SelectComponent",
            "id": "component-SelectComponent-c177ca383c8a9d8dd3f01c3db90d830a2ffa6b7c6a599689af92be36380284f634bba0660d0fc77853c97fa18bd47855e4b12e8b68bf272f929af975be79519c",
            "file": "src/app/uiux/widgets/form/select/select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-select",
            "styleUrls": [
                "./select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "IControl",
                    "decorators": []
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "FormGroup",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "filteredOptions",
                    "defaultValue": "new ReplaySubject<any[]>(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReplaySubject<any[]>",
                    "optional": false,
                    "description": "<p>list of banks filtered by search keyword</p>\n",
                    "line": 30,
                    "rawdescription": "\nlist of banks filtered by search keyword",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "searchCtrl",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "<p>control for the MatSelect filter keyword multi-selection</p>\n",
                    "line": 28,
                    "rawdescription": "\ncontrol for the MatSelect filter keyword multi-selection",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "select",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSelect",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'select', {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "filterMulti",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "getOptionsFromApi",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setInitialValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the initial value after the filteredBanks are loaded initially\n",
                    "description": "<p>Sets the initial value after the filteredBanks are loaded initially</p>\n",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  OnInit,\n  ViewChild,\n  AfterViewInit,\n} from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { MatSelect } from '@angular/material/select';\nimport { IControl } from '@core/interface/widgets/IControl';\nimport { NodeService } from '@core/service/node.service';\nimport { ReplaySubject } from 'rxjs';\nimport { shareReplay, take } from 'rxjs/operators';\n\n// tslint:disable-next-line:max-line-length\n// https://stackblitz.com/github/bithost-gmbh/ngx-mat-select-search-example?file=src%2Fapp%2Fexamples%2F02-multiple-selection-example%2Fmultiple-selection-example.component.ts\n\n@Component({\n  selector: 'app-select',\n  templateUrl: './select.component.html',\n  styleUrls: ['./select.component.scss'],\n})\nexport class SelectComponent implements OnInit, AfterViewInit {\n  @Input() content: IControl;\n  @Input() form: FormGroup;\n  @ViewChild('select', { static: true }) select: MatSelect;\n  /** control for the MatSelect filter keyword multi-selection */\n  public searchCtrl: FormControl = new FormControl();\n  /** list of banks filtered by search keyword */\n  public filteredOptions: ReplaySubject<any[]> = new ReplaySubject<any[]>(1);\n  options: {\n    label: string;\n    value: string;\n  }[];\n  constructor(private nodeService: NodeService) {}\n\n  ngOnInit(): void {\n    if (this.content.api) {\n      this.getOptionsFromApi();\n    } else {\n      this.options = this.content.options || [];\n    }\n\n    // listen for search field value changes\n    this.searchCtrl.valueChanges.subscribe(() => {\n      this.filterMulti();\n    });\n  }\n\n  ngAfterViewInit(): void {\n    // TODO: init value\n    // this.setInitialValue();\n  }\n\n  getOptionsFromApi(): void {\n    this.nodeService\n      .search(this.content.api || '', '')\n      .pipe(shareReplay())\n      .subscribe((res) => {\n        this.options = res.rows;\n        // load the initial options\n        this.filteredOptions.next(this.options.slice());\n      });\n  }\n\n  /**\n   * Sets the initial value after the filteredBanks are loaded initially\n   */\n  protected setInitialValue(): void {\n    this.filteredOptions.pipe(take(1)).subscribe(() => {\n      // setting the compareWith property to a comparison function\n      // triggers initializing the selection according to the initial value of\n      // the form control (i.e. _initializeSelection())\n      // this needs to be done after the filteredBanks are loaded initially\n      // and after the mat-option elements are available\n      this.select.compareWith = (a: any, b: any) =>\n        a && b && a.label === b.label;\n    });\n  }\n\n  protected filterMulti(): void {\n    if (!this.options) {\n      return;\n    }\n    // get the search keyword\n    let search = this.searchCtrl.value;\n    if (!search) {\n      this.filteredOptions.next(this.options.slice());\n      return;\n    } else {\n      search = search.toLowerCase();\n    }\n    // filter the options\n    this.filteredOptions.next(\n      this.options.filter(\n        (bank) => bank.label.toLowerCase().indexOf(search) > -1\n      )\n    );\n  }\n\n  get isValid(): boolean {\n    return this.form.controls[this.content.key].valid;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// ::ng-deep .custom-select {\n//   margin-top: 30px !important;\n//   margin-bottom: 48px !important;\n// }\n",
                    "styleUrl": "./select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "accessors": {
                "isValid": {
                    "name": "isValid",
                    "getSignature": {
                        "name": "isValid",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 101
                    }
                }
            },
            "templateData": "<mat-form-field [appearance]=\"content.appearance || 'legacy'\" class=\"width-100\" [formGroup]=\"form\" *ngIf=\"form\">\n  <mat-label>{{content.label}}</mat-label>\n\n  <!-- 单选不开启搜索 -->\n  <mat-select disableOptionCentering=\"true\" panelClass=\"custom-select\" *ngIf=\"!content.multiple && !content.search\"\n    [formControlName]=\"content.key\" disableRipple #select>\n    <mat-option *ngIf=\"content?.none\">{{content.none?.label || '无'}}</mat-option>\n    <mat-option value=\"{{option.value}}\" *ngFor=\"let option of options\">{{option.label}}\n    </mat-option>\n  </mat-select>\n\n  <!-- 单选开启搜索 -->\n  <mat-select disableOptionCentering=\"true\" panelClass=\"custom-select\" *ngIf=\"!content.multiple && content.search\"\n    [formControlName]=\"content.key\" disableRipple #select>\n    <mat-option>\n      <ngx-mat-select-search [placeholderLabel]=\"content.placeholder || '搜索'\"\n        [noEntriesFoundLabel]=\"content.noFound || '没有找到'\" [formControl]=\"searchCtrl\"></ngx-mat-select-search>\n    </mat-option>\n    <mat-option *ngIf=\"content?.none\">{{content.none?.label || '无'}}</mat-option>\n    <mat-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option.value\">{{option.label}}\n    </mat-option>\n  </mat-select>\n\n  <!-- 多选不开启搜索 -->\n  <mat-select disableOptionCentering=\"true\" panelClass=\"custom-select\" *ngIf=\"content.multiple && !content.search\"\n    [formControlName]=\"content.key\" multiple disableRipple #select>\n    <mat-option *ngIf=\"content?.none\">{{content.none?.label || '无'}}</mat-option>\n    <mat-option value=\"{{option.value}}\" *ngFor=\"let option of options\">{{option.label}}\n    </mat-option>\n  </mat-select>\n\n  <!-- 多选开启搜索 -->\n  <mat-select disableOptionCentering=\"true\" panelClass=\"custom-select\" *ngIf=\"content.multiple && content.search\"\n    [formControlName]=\"content.key\" multiple disableRipple #select>\n    <mat-option>\n      <ngx-mat-select-search [placeholderLabel]=\"content.placeholder || '搜索'\"\n        [noEntriesFoundLabel]=\"content.noFound || '没有找到'\" [formControl]=\"searchCtrl\"></ngx-mat-select-search>\n    </mat-option>\n    <mat-option *ngIf=\"content?.none\">{{content.none?.label || '无'}}</mat-option>\n    <mat-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option.value\">{{option.label}}\n    </mat-option>\n  </mat-select>\n  <mat-error *ngIf=\"isValid\">{{content.errorMes}}</mat-error>\n</mat-form-field>\n"
        },
        {
            "name": "ShapeComponent",
            "id": "component-ShapeComponent-49a9344f9f5325313259e020ce0efc0083d07828516e5f647909a9df47b60356a87dc1f1dcd17f71644ee5fe45543fb1d7f3ce4fd74bb79b05d23a8b66f33c74",
            "file": "src/app/uiux/widgets/shape/shape.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shape",
            "styleUrls": [
                "./shape.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./shape.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-shape',\n  templateUrl: './shape.component.html',\n  styleUrls: ['./shape.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShapeComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".shape {\n  position: absolute;\n  pointer-events: none;\n  right: 0;\n  bottom: -2px;\n  left: 0;\n  ::ng-deep {\n    svg {\n      transform: scale(2);\n      width: 100%;\n      height: 100%;\n      transform-origin: top center;\n    }\n    .mat-icon {\n      width: 100%;\n      height: 100%;\n    }\n  }\n}\n",
                    "styleUrl": "./shape.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "  <div class=\"shape overflow-hidden text-light\">\n    <app-icon [content]=\"{'svg':'shape'}\"></app-icon>\n  </div>\n"
        },
        {
            "name": "ShareComponent",
            "id": "component-ShareComponent-c691165bf2c79b89dbc02a69e7ca5c74f9eb3adb60a8e970ab30f660c825a3c1902c56c890c3bc0d342828b5d9443e759a53d956a6443111d5de4e9d023cb669",
            "file": "src/app/uiux/widgets/actions/share/share.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-share",
            "styleUrls": [
                "./share.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./share.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "IShare",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "open",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport { IShare } from '@core/interface/widgets/IActions';\nimport { ICoreConfig } from '@core/mobx/IAppConfig';\nimport { ScreenService } from '@core/service/screen.service';\nimport { CORE_CONFIG } from '@core/token/core.config';\nimport { DOCUMENT } from '@angular/common';\ndeclare var window: any;\n\n@Component({\n  selector: 'app-share',\n  templateUrl: './share.component.html',\n  styleUrls: ['./share.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShareComponent implements OnInit {\n  @Input() content: IShare;\n  config: any;\n  url: string;\n\n  constructor(\n    private screenService: ScreenService,\n    @Inject(CORE_CONFIG) private coreConfig: ICoreConfig,\n    @Inject(DOCUMENT) private doc: Document\n  ) {}\n\n  ngOnInit(): void {\n    if (this.screenService.isPlatformBrowser()) {\n      this.config = this.coreConfig.actions?.share;\n      this.url = `${this.doc.location.origin}${this.content.params.url}`;\n    }\n  }\n\n  open(): void {\n    window.socialShare('.share-components');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "::ng-deep .social-menu {\n  overflow: visible;\n}\n",
                    "styleUrl": "./share.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "coreConfig",
                        "type": "ICoreConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "doc",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "coreConfig",
                        "type": "ICoreConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "doc",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"content && config?.enable\">\n  <button mat-button [matMenuTriggerFor]=\"menu\" #menuTriggercv (menuOpened)=\"open()\">\n    <mat-icon inline=\"true\">{{config.button.icon}}</mat-icon>\n    <span>{{config.button.label}}</span>\n  </button>\n  <mat-menu #menu=\"matMenu\" class=\"social-menu\">\n    <div class=\"share-components\" [attr.data-url]=\"url\"\n      data-disabled=\"qzone,tencent,douban,linkedin,diandian,google,twitter,facebook\">\n    </div>\n  </mat-menu>\n</ng-container>\n"
        },
        {
            "name": "Showcase1v1Component",
            "id": "component-Showcase1v1Component-a58a594218242d0e4f07dbd1a613618bf49f57985cde09844b6025dd6bbc0b67a47a80e5c60fe0b9c1962698aeda13d9a42133a6eaf10954a6a92394f29efcbc",
            "file": "src/app/uiux/combs/showcase/showcase1v1/showcase1v1.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-showcase1v1",
            "styleUrls": [
                "./showcase1v1.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./showcase1v1.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getApiParams",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getDeepValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getFormParams",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Params",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getParams",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getParamsState",
                    "args": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getUrlQuery",
                    "args": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "handlerPager",
                    "args": [
                        {
                            "name": "pager",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pager",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "initFormValueWithUrlQuery",
                    "args": [
                        {
                            "name": "query",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "controls",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "controls",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "row",
                    "args": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "padding",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'4rem'"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "padding",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'4rem'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { BaseComponent } from '@uiux/base/base.widget';\n\n@Component({\n  selector: 'app-showcase1v1',\n  templateUrl: './showcase1v1.component.html',\n  styleUrls: ['./showcase1v1.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class Showcase1v1Component extends BaseComponent implements OnInit {\n  @Input() content: any;\n  constructor() {\n    super();\n  }\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".showcase-1-v1 {\n  z-index: 1;\n  ::ng-deep {\n    .title {\n      &.style-v1,\n      &.style-v2 {\n        .title-header {\n          margin-bottom: 80px;\n        }\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./showcase1v1.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "extends": "BaseComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"showcase-1-v1 position-relative\" *ngIf=\"content\">\n  <a class=\"anchor\" *ngIf=\"content.id\" [id]=\"content.id\"></a>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n  <app-bg [content]=\"content.bg\" *ngIf=\"content.bg\"></app-bg>\n  <div class=\"container\">\n    <div [ngClass]=\"content.classes\">\n      <app-title *ngIf=\"content.title\" [content]=\"content.title\"></app-title>\n      <app-text *ngIf=\"content.subTitle\" [content]=\"content.subTitle\"></app-text>\n      <div fxLayout.lt-md=\"column\" fxLayout.gt-sm=\"row wrap\" fxLayoutGap.lt-md=\"6rem\" fxLayoutAlign.gt-sm=\"center start\"\n        fxLayoutAlign.lt-md=\"center center\">\n        <app-box class=\"p-x-sm p-y-sm\" [content]=\"item\" *ngFor=\"let item of content.elements\" fxFlex.lt-md=\"100%\"\n          [fxFlex.gt-sm]=\"row(content, '0rem')\"></app-box>\n      </div>\n    </div>\n  </div>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n</div>\n"
        },
        {
            "name": "Showcase1v3Component",
            "id": "component-Showcase1v3Component-da82a327703416358086d61e4394c66c994352fd1251d8aa6ea5a49e98ba3e4bdd1c7a238e50b5e7de34dfd24bbc086fcff4e1cb7322a897cf7e786b7b18aa95",
            "file": "src/app/uiux/combs/showcase/showcase1v3/showcase1v3.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-showcase1v3",
            "styleUrls": [
                "./showcase1v3.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./showcase1v3.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-showcase1v3',\n  templateUrl: './showcase1v3.component.html',\n  styleUrls: ['./showcase1v3.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class Showcase1v3Component implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/theme/variable/breakpoint\";\n.showcase-1-v3 {\n  overflow: hidden;\n}\n",
                    "styleUrl": "./showcase1v3.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"showcase-1-v3 position-relative\" [ngClass]=\"content.classes\" *ngIf=\"content\">\n  <a class=\"anchor\" *ngIf=\"content.id\" [id]=\"content.id\"></a>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n  <app-bg *ngIf=\"content.bg\" [content]=\"content.bg\">\n    <app-img *ngIf=\"content.bg?.img\" [content]=\"content.bg.img\"></app-img>\n  </app-bg>\n  <div class=\"container\">\n    <app-title [content]=\"content.title\" *ngIf=\"content.title\"></app-title>\n    <app-dynamic-widgets *ngFor=\"let item of content.elements\" [content]=\"item\"></app-dynamic-widgets>\n    <div class=\"m-top\" fxLayoutAlign=\"center center\" fxLayoutGap=\"1rem\" *ngIf=\"content.actions\">\n      <app-btn-animate [content]=\"btn\" *ngFor=\"let btn of content.actions\"></app-btn-animate>\n    </div>\n  </div>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n</div>\n"
        },
        {
            "name": "Showcase2v1Component",
            "id": "component-Showcase2v1Component-f617d92c09d4f832ad647c02f198587bbd9ce26ff7d9e706430ddb2ea90bffd25111dcfc52d2f1f2ff3b76ea43043241657a4ea2103ae7f5823597cadb31866e",
            "file": "src/app/uiux/combs/showcase/showcase2v1/showcase2v1.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-showcase2v1",
            "styleUrls": [
                "./showcase2v1.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./showcase2v1.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n@Component({\n  selector: 'app-showcase2v1',\n  templateUrl: './showcase2v1.component.html',\n  styleUrls: ['./showcase2v1.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class Showcase2v1Component implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host ::ng-deep {\n  .mat-card {\n    border-radius: 0;\n    border-top: 0;\n    border-left: 0;\n    border-right: 0;\n    border-bottom-width: 1px;\n    .mat-card-content {\n      .mat-card-title {\n        font-size: 18px;\n      }\n    }\n  }\n  .swiper-pagination {\n    left: auto !important;\n    bottom: auto !important;\n    top: 1rem;\n    right: 1rem;\n    width: auto !important;\n  }\n}\n",
                    "styleUrl": "./showcase2v1.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container showcase-2v1\" *ngIf=\"content\" fxLayout=\"column\">\n  <a class=\"anchor\" *ngIf=\"content.id\" [id]=\"content.id\"></a>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n  <app-text [content]=\"content.text\" *ngIf=\"content.text\"></app-text>\n  <div class=\"m-y\" fxLayout=\"row wrap\" fxLayoutAlign=\"center start\" fxFlex=\"100%\">\n    <app-card class=\"m-x-sm m-bottom-sm\" fxFlex.xs=\"100\" fxFlex.sm=\"calc(50% - 30px)\"\n      fxFlex.gt-sm=\"0 0 calc(25% - 40px)\" *ngFor=\"let case of content.elements\" [content]=\"case\">\n    </app-card>\n  </div>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n</div>\n"
        },
        {
            "name": "Showcase2v2Component",
            "id": "component-Showcase2v2Component-4f8fe88f425fe3ffc4184c419576160d5eac0eca5a03861c7424535e51437c0583a218ab2d6c03e2bae618bd483f82f9a9e631005630f26ca55c13514f5d10a4",
            "file": "src/app/uiux/combs/showcase/showcase2v2/showcase2v2.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-showcase2v2",
            "styleUrls": [
                "./showcase2v2.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./showcase2v2.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-showcase2v2',\n  templateUrl: './showcase2v2.component.html',\n  styleUrls: ['./showcase2v2.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class Showcase2v2Component implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host ::ng-deep .mat-card {\n  border-radius: 0;\n  &:not([class*=\"mat-elevation-z\"]) {\n    box-shadow: none;\n  }\n  &:hover {\n    background-color: transparent;\n  }\n  .mat-card-content {\n    margin-left: -16px;\n    margin-right: -16px;\n    .mat-card-title {\n      padding: 0 0 1rem 0;\n      text-align: center;\n    }\n    .card-body {\n      min-height: auto;\n      overflow: visible;\n      text-overflow: inherit;\n      display: block !important;\n      padding: 1rem 0;\n    }\n  }\n}\n",
                    "styleUrl": "./showcase2v2.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container showcase-2v2 position-relative\" *ngIf=\"content\" fxLayout=\"column\">\n  <a class=\"anchor\" *ngIf=\"content.id\" [id]=\"content.id\"></a>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n  <app-text [content]=\"content.text\" *ngIf=\"content.text\"></app-text>\n  <div class=\"m-y\" fxLayout=\"row wrap\" fxLayoutAlign=\"center start\" fxFlex=\"100%\">\n    <app-card class=\"m-x-sm m-bottom-sm\" fxFlex.xs=\"100\" fxFlex.sm=\"calc(50% - 30px)\"\n      fxFlex.gt-sm=\"0 0 calc({{100/content.row}}% - 40px)\" *ngFor=\"let case of content.elements\" [content]=\"case\">\n    </app-card>\n  </div>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n</div>\n"
        },
        {
            "name": "Showcase2v3Component",
            "id": "component-Showcase2v3Component-896d26ec7a579e3d6607745b05f50adb4fa7289b31c79f83d8502ace366e6d5f6e0c4353ad1c8de058d52e91dc0746b16cf8475c5bc0981374d8e84a16347542",
            "file": "src/app/uiux/combs/showcase/showcase2v3/showcase2v3.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-showcase2v3",
            "styleUrls": [
                "./showcase2v3.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./showcase2v3.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-showcase2v3',\n  templateUrl: './showcase2v3.component.html',\n  styleUrls: ['./showcase2v3.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class Showcase2v3Component implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./showcase2v3.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"showcase-2v3 position-relative\" *ngIf=\"content\">\n  <a class=\"anchor\" *ngIf=\"content.id\" [id]=\"content.id\"></a>\n  <app-bg-img [content]=\"content.bg\"></app-bg-img>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n  <app-text [content]=\"content.text\" *ngIf=\"content.text\"></app-text>\n  <div class=\"container\">\n    <div class=\"inner\" fxLayout=\"row wrap\" fxFlex=\"100\" fxLayoutAlign=\"space-between start\">\n      <div class=\"item p-x-xs m-bottom-sm\" fxFlex.xs=\"100\" fxFlex.gt-xs=\"0 0 calc(100% / {{content.row}} - 2rem)\"\n        *ngFor=\"let item of content.elements\" fxLayoutAlign=\"space-between center\">\n        <div fxLayout=\"column\">\n          <h2 class=\"bold\" [innerHTML]=\"item.title\"></h2>\n          <p [innerHTML]=\"item.subTitle|safeHtml\"></p>\n          <a mat-raised-button color=\"{{item.link.color}}\" href=\"{{item.link.href}}\"\n            target=\"_blank\">{{item.link.label}}</a>\n        </div>\n        <app-img class=\"p-left\" [content]=\"item.img\"></app-img>\n      </div>\n    </div>\n  </div>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n</div>\n"
        },
        {
            "name": "Showcase2v4Component",
            "id": "component-Showcase2v4Component-ecc38eddf348ae4af0c2e21a8fd540fa79fac26176d8671824f68ceca76056dfe407975aa2b2dc439620eb66a9b31eccdce3ff7e24d45238cc2ffb2e609c0b4b",
            "file": "src/app/uiux/combs/showcase/showcase2v4/showcase2v4.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-showcase2v4",
            "styleUrls": [
                "./showcase2v4.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./showcase2v4.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-showcase2v4',\n  templateUrl: './showcase2v4.component.html',\n  styleUrls: ['./showcase2v4.component.scss'],\n})\nexport class Showcase2v4Component implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".item {\n  max-height: 860px;\n  overflow: hidden;\n}\n",
                    "styleUrl": "./showcase2v4.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"showcase-2v4 position-relative\">\n  <a class=\"anchor\" *ngIf=\"content.id\" [id]=\"content.id\"></a>\n  <app-bg-img [content]=\"content.bg\"></app-bg-img>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n  <app-text [content]=\"content.text\" *ngIf=\"content.text\"></app-text>\n  <div class=\"{{content.fullWidth?'':'container'}}\">\n    <div class=\"inner\" fxLayout=\"row wrap\">\n      <app-dynamic-widgets class=\"item\" fxFlex.lt-md=\"0 0 100\" fxFlex.gt-sm=\"0 0 {{item.width || 20}}\" [content]=\"item\"\n        *ngFor=\"let item of content.elements\"></app-dynamic-widgets>\n    </div>\n  </div>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n</div>\n"
        },
        {
            "name": "Showcase2v5Component",
            "id": "component-Showcase2v5Component-71952948b40f592d94ae573e51c51aade6ddd281258c28049738b248f1b6590a51a61c5bfe8681f8406061f3652cb9075d35921078d3cd18f4ab64713aeb4bb5",
            "file": "src/app/uiux/combs/showcase/showcase2v5/showcase2v5.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-showcase2v5",
            "styleUrls": [
                "./showcase2v5.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./showcase2v5.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-showcase2v5',\n  templateUrl: './showcase2v5.component.html',\n  styleUrls: ['./showcase2v5.component.scss'],\n})\nexport class Showcase2v5Component implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./showcase2v5.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"showcase-2v5 position-relative\">\n  <a class=\"anchor\" *ngIf=\"content.id\" [id]=\"content.id\"></a>\n  <app-bg-img [content]=\"content.bg\"></app-bg-img>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n  <app-text [content]=\"content.text\" *ngIf=\"content.text\"></app-text>\n  <div class=\"{{content.fullWidth?'':'container'}}\">\n    <div class=\"inner\" fxLayout=\"row wrap\">\n      <app-dynamic-widgets class=\"item\" fxFlex.lt-md=\"0 0 100\" fxFlex.gt-sm=\"0 0 {{item.width || 25}}\" [content]=\"item\"\n        *ngFor=\"let item of content.elements\"></app-dynamic-widgets>\n    </div>\n  </div>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n</div>\n"
        },
        {
            "name": "Showcase2v6Component",
            "id": "component-Showcase2v6Component-de63b156d92c5c8075f9e111a4377c5cc669a916203614e0691288cb3cb8c847e4df9d0d87c87addce29b06d38529f94adccd96ac6b95107c9b0ef2050678a02",
            "file": "src/app/uiux/combs/showcase/showcase2v6/showcase2v6.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-showcase2v6",
            "styleUrls": [
                "./showcase2v6.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./showcase2v6.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-showcase2v6',\n  templateUrl: './showcase2v6.component.html',\n  styleUrls: ['./showcase2v6.component.scss'],\n})\nexport class Showcase2v6Component implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./showcase2v6.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"showcase-2v6 position-relative\">\n  <a class=\"anchor\" *ngIf=\"content.id\" [id]=\"content.id\"></a>\n  <app-bg-img [content]=\"content.bg\"></app-bg-img>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n  <app-text [content]=\"content.text\" *ngIf=\"content.text\"></app-text>\n  <div class=\"{{content.fullWidth?'':'container'}}\" ngClass.gt-sm=\"m-top\">\n    <div class=\"inner\" fxLayout=\"row wrap\">\n      <app-dynamic-widgets class=\"item\" fxFlex.lt-md=\"0 0 100\" fxFlex.gt-sm=\"0 0 {{item.width || 50}}\" [content]=\"item\"\n        *ngFor=\"let item of content.elements\"></app-dynamic-widgets>\n    </div>\n  </div>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n</div>\n"
        },
        {
            "name": "Showcase3v1Component",
            "id": "component-Showcase3v1Component-7d8a253df745233edb156a35b6117f92b6b115ecafa5381b67f7efa9032324914931aa8065ef47d7b86b131f9e251b190c5381fa5d0c9d17077d156b971c0d6c",
            "file": "src/app/uiux/combs/showcase/showcase3v1/showcase3v1.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-showcase3v1",
            "styleUrls": [
                "./showcase3v1.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./showcase3v1.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-showcase3v1',\n  templateUrl: './showcase3v1.component.html',\n  styleUrls: ['./showcase3v1.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class Showcase3v1Component implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/theme/variable/breakpoint\";\n.showcase-3-v1 {\n  background-repeat: no-repeat;\n  background-size: cover;\n  background-position: center;\n  .showcase-content {\n    text-align: center;\n  }\n  @media #{$gt-md} {\n    .showcase-content {\n      margin: 15px auto 50px;\n      max-width: 800px;\n    }\n  }\n}\n",
                    "styleUrl": "./showcase3v1.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"showcase-3-v1 position-relative\" [ngClass]=\"content.classes\" *ngIf=\"content\"\n  style=\"background-image:url({{content.bgImg}})\">\n  <a class=\"anchor\" *ngIf=\"content.id\" [id]=\"content.id\"></a>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n  <app-bg [content]=\"content.bg\" *ngIf=\"content.bg\">\n  </app-bg>\n  <div class=\"container\">\n    <app-title *ngIf=\"content.title\" [content]=\"content.title\"></app-title>\n    <div *ngIf=\"content.content\" class=\"showcase-content\" [innerHTML]=\"content.content | safeHtml\"></div>\n    <app-swiper *ngIf=\"content?.carousel.elements.length > 1;else img\" [content]=\"content.carousel\">\n    </app-swiper>\n    <ng-template #img>\n      <div class=\"text-center\">\n        <app-img [content]=\"content.carousel.elements[0]\"></app-img>\n      </div>\n    </ng-template>\n  </div>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n</div>\n"
        },
        {
            "name": "Showcase3v2Component",
            "id": "component-Showcase3v2Component-54a12cb514b57bf5fabd8f8684ab76b3e850f07ba2987f7e449a5cab74998e593be08906ceddcf2f68574e71b01a5c5601f8f85783089887375c2f03df865d50",
            "file": "src/app/uiux/combs/showcase/showcase3v2/showcase3v2.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-showcase3v2",
            "styleUrls": [
                "./showcase3v2.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./showcase3v2.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-showcase3v2',\n  templateUrl: './showcase3v2.component.html',\n  styleUrls: ['./showcase3v2.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class Showcase3v2Component implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/theme/variable/breakpoint\";\n.showcase-3-v2 {\n  overflow: hidden;\n}\n.image-container {\n  ::ng-deep img {\n    max-width: 100%;\n  }\n}\n@media #{$gt-xs} {\n  .image-container {\n    overflow: hidden;\n  }\n  .item {\n    &:nth-child(2n) {\n      .module-content {\n        order: -1;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./showcase3v2.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"showcase-3-v2 position-relative\" *ngIf=\"content\">\n  <a class=\"anchor\" *ngIf=\"content.id\" [id]=\"content.id\"></a>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n  <app-bg [content]=\"content.bg\" *ngIf=\"content.bg\">\n    <app-img [content]=\"content.bg.img\" *ngIf=\"content.bg.img\"></app-img>\n  </app-bg>\n  <div class=\"container position-relative\">\n    <app-title [content]=\"content.title\" *ngIf=\"content.title\"></app-title>\n    <div class=\"sub-title text-center\" fxLayoutAlign=\"center center\">\n      <p [innerHTML]=\"content.subTitle | safeHtml\" *ngIf=\"content.subTitle\" fxFlex.lt-md=\"100\" fxFlex.gt-sm=\"50\"></p>\n    </div>\n    <div class=\"item m-y-sm\" fxLayout=\"row wrap\" fxLayoutAlign=\"center center\" [ngClass]=\"content.classes\"\n      *ngFor=\"let item of content.elements\">\n      <div class=\"image-container p-sm\" fxFlex.lt-sm=\"100\" fxFlex.gt-md=\"0 0 50\" fxLayoutAlign=\"center center\">\n        <app-img [content]=\"item.img\" *ngIf=\"item.img\"></app-img>\n      </div>\n      <div class=\"module-content\" fxFlex.lt-sm=\"100\" fxFlex.gt-md=\"0 0 50\" [ngClass.lt-md]=\"'p-sm'\"\n        [ngClass.gt-sm]=\"'p-md'\">\n        <app-text [content]=\"item.content\"></app-text>\n      </div>\n    </div>\n  </div>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n</div>\n"
        },
        {
            "name": "Showcase3v3Component",
            "id": "component-Showcase3v3Component-48da3ca84aa9233c3e99fa9d9fe06809c5d7a81b0fdf2bac511a0dc12465cc2bda1a21eff69deba6a1b38658e65d6f2c359ca3a48f1dc3eb0ec7a6c374f257a3",
            "file": "src/app/uiux/combs/showcase/showcase3v3/showcase3v3.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-showcase3v3",
            "styleUrls": [
                "./showcase3v3.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./showcase3v3.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-showcase3v3',\n  templateUrl: './showcase3v3.component.html',\n  styleUrls: ['./showcase3v3.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class Showcase3v3Component implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/theme/mixins/amixin\";\n@import \"/src/theme/variable/breakpoint\";\n.showcase-inner {\n  ul,\n  li {\n    margin: 0;\n    padding: 0;\n  }\n  ul.post-meta-info {\n    font-size: 13px;\n    margin-bottom: 13px;\n    li {\n      margin-bottom: 7px;\n      margin-right: 6px;\n    }\n    .mat-icon {\n      margin-right: 5px;\n    }\n  }\n\n  .shortdesc {\n    overflow: hidden;\n  }\n\n  &.teaser {\n    padding-bottom: 40px;\n    margin-bottom: 40px;\n    img {\n      width: 100%;\n      height: auto;\n    }\n    .title {\n      text-transform: uppercase;\n      margin: 0 0 15px 0;\n    }\n    .post-meta-info {\n      margin-bottom: 17px;\n      padding-bottom: 11px;\n    }\n  }\n  @media #{$lt-md} {\n    &.teaser {\n      .title {\n        margin-top: 15px;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./showcase3v3.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"showcase-3-v3\" *ngIf=\"content\">\n  <a class=\"anchor\" *ngIf=\"content.id\" [id]=\"content.id\"></a>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n  <div class=\"container\">\n    <div class=\"showcase-inner teaser\" fxLayout.lt-md=\"column\" fxLayout.gt-sm=\"row\" fxFlex=\"100\" fxLayoutGap.lt-md=\"0\"\n      fxLayoutGap.gt-xs=\"3rem\">\n      <app-feature-box fxFlex.lt-md=\"100\" fxFlex.gt-sm=\"40\" [content]=\"content.feature\"\n        *ngIf=\"content.showImage && content.feature\">\n      </app-feature-box>\n      <div fxFlex.lt-md=\"100\" fxFlex.gt-sm=\"{{content.showImage && content.feature?'60':'100'}}\">\n        <h2 class=\"title\">\n          <app-link [content]=\"content.title\"></app-link>\n        </h2>\n        <ul class=\"post-meta-info\" fxLayout fxLayoutAlign=\"start start\">\n          <li *ngIf=\"content.date\" fxLayoutAlign=\"center center\">\n            <mat-icon>schedule</mat-icon>\n            <div>{{content.date | date:\"YYYY-MM-dd\"}}</div>\n          </li>\n          <li *ngIf=\"content.commentCount\" fxLayoutAlign=\"center center\">\n            <mat-icon>comment</mat-icon>\n            <div>{{content.commentCount}} 评论</div>\n          </li>\n          <li *ngIf=\"content.category\" fxLayoutAlign=\"center center\">\n            <mat-icon>folder</mat-icon>\n            <div>{{content.category | slice:0:20}}</div>\n          </li>\n        </ul>\n        <div class=\"shortdesc\" [innerHTML]=\"content.body |stripTags|trim|shorten:150:'...'\">\n        </div>\n        <div class=\"m-top-sm\" *ngIf=\"content.details\">\n          <app-btn-animate [content]=\"content.details\"></app-btn-animate>\n        </div>\n      </div>\n    </div>\n  </div>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n</div>\n"
        },
        {
            "name": "Showcase3v4Component",
            "id": "component-Showcase3v4Component-1bf8613ebe9a173951beeb3ea208bfb458e8e0c28f7d00c6da70e3b4de0118df289611a95841c270f896ab833c229acfa203d581bab5a2bc5d3c9c6b61c15ca3",
            "file": "src/app/uiux/combs/showcase/showcase3v4/showcase3v4.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-showcase3v4",
            "styleUrls": [
                "./showcase3v4.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./showcase3v4.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-showcase3v4',\n  templateUrl: './showcase3v4.component.html',\n  styleUrls: ['./showcase3v4.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class Showcase3v4Component implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".showcase-3-v4 {\n  ::ng-deep {\n    .inv-builder-box.style-v7 {\n      align-items: center;\n      .box-icon {\n        margin-bottom: 10px;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./showcase3v4.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"showcase-3-v4 position-relative\" *ngIf=\"content\">\n  <a class=\"anchor\" *ngIf=\"content.id\" [id]=\"content.id\"></a>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n  <app-bg [content]=\"content.bg\" *ngIf=\"content.bg\"></app-bg>\n  <div class=\"container\" *ngIf=\"content\">\n    <app-title [content]=\"content.title\"></app-title>\n    <div class=\"showcase-inner\" fxLayout.lt-md=\"column\" fxLayout.gt-sm=\"row\" fxLayoutAlign=\"center center\">\n      <div fxLayout=\"column\" fxFlex=\"100\">\n        <app-box [content]=\"item\" *ngFor=\"let item of content.elements\"></app-box>\n      </div>\n      <div fxLayout=\"column\" fxFlex=\"100\">\n        <app-img class=\"m-left-sm\" [content]=\"content.img\"></app-img>\n      </div>\n    </div>\n  </div>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n</div>\n"
        },
        {
            "name": "Showcase3v5Component",
            "id": "component-Showcase3v5Component-c426fbb8f9e18817093bfc3f3da8e8c4ca330dee62f8412723918375574bb3d2e82fe49e85950059c0e96041a7d7ae207102412138e6c7fd5720365f39fbea9e",
            "file": "src/app/uiux/combs/showcase/showcase3v5/showcase3v5.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-showcase3v5",
            "styleUrls": [
                "./showcase3v5.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./showcase3v5.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-showcase3v5',\n  templateUrl: './showcase3v5.component.html',\n  styleUrls: ['./showcase3v5.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class Showcase3v5Component implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./showcase3v5.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"showcase-3-v5 position-relative\" *ngIf=\"content\">\n  <a class=\"anchor\" *ngIf=\"content.id\" [id]=\"content.id\"></a>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n  <app-bg [content]=\"content.bg\" *ngIf=\"content.bg\"></app-bg>\n  <div class=\"container\" *ngIf=\"content\">\n    <app-text [content]=\"content.title\"></app-text>\n    <div class=\"showcase-inner\" fxLayout.lt-md=\"column\" fxLayout.gt-sm=\"row\" fxLayoutAlign=\"center center\">\n      <div fxLayout=\"row wrap\" fxFlex.lt-md=\"100\" fxFlex.gt-sm=\"66.66\">\n        <app-box fxFlex.lt-md=\"100\" fxFlex.gt-sm=\"0 0 calc(50% - 2rem)\" class=\"p-x-xs\" [content]=\"item\"\n          *ngFor=\"let item of content.elements\">\n        </app-box>\n      </div>\n      <div fxLayout=\"column\" fxLayoutAlign=\"center center\" fxFlex.lt-md=\"100\" fxFlex.gt-sm=\"33.33\">\n        <app-img class=\"p-x-sm\" [content]=\"content.img\"></app-img>\n      </div>\n    </div>\n  </div>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n</div>\n"
        },
        {
            "name": "Showcase3v6Component",
            "id": "component-Showcase3v6Component-447e650db3e41289d89601e2b639a91c289a4ba1b3b5a4273a450e4d6d84ad7235662f8ff02ad113c65c029a8547178bee4e51fb42430cce71086c9f36aff20c",
            "file": "src/app/uiux/combs/showcase/showcase3v6/showcase3v6.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-showcase3v6",
            "styleUrls": [
                "./showcase3v6.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./showcase3v6.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getApiParams",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getDeepValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getFormParams",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Params",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getParams",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getParamsState",
                    "args": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getUrlQuery",
                    "args": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "handlerPager",
                    "args": [
                        {
                            "name": "pager",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pager",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "initFormValueWithUrlQuery",
                    "args": [
                        {
                            "name": "query",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "controls",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "controls",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "row",
                    "args": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "padding",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'4rem'"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "padding",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'4rem'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { BaseComponent } from '@uiux/base/base.widget';\n\n@Component({\n  selector: 'app-showcase3v6',\n  templateUrl: './showcase3v6.component.html',\n  styleUrls: ['./showcase3v6.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class Showcase3v6Component extends BaseComponent implements OnInit {\n  @Input() content: any;\n  constructor() {\n    super();\n  }\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./showcase3v6.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "extends": "BaseComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"showcase-3-v6 position-relative\" *ngIf=\"content\">\n  <a class=\"anchor\" *ngIf=\"content.id\" [id]=\"content.id\"></a>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n  <app-bg [content]=\"content.bg\" *ngIf=\"content.bg\"></app-bg>\n  <div class=\"container\" *ngIf=\"content\">\n    <app-text [content]=\"content.title\"></app-text>\n    <div class=\"showcase-inner\" fxLayout=\"row wrap\" fxLayoutAlign=\"center center\">\n      <div fxLayout=\"row wrap\" fxFlex.lt-md=\"100\" [fxFlex.gt-sm]=\"row(content, '0px')\"\n        *ngFor=\"let item of content.elements\">\n        <app-media-object fxFlex=\"100\" class=\"p-x-xs p-y-xs\" [content]=\"item\"></app-media-object>\n      </div>\n    </div>\n    <div class=\"actions\" *ngIf=\"content.action\" fxLayoutAlign=\"center center\">\n      <div class=\"m-y\">\n        <app-btn-animate [content]=\"content.action\"></app-btn-animate>\n      </div>\n    </div>\n  </div>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n</div>\n"
        },
        {
            "name": "Showcase3v7Component",
            "id": "component-Showcase3v7Component-779f0fd95da1bbe6e92b3e89095e94ef7e20b85ef3466fbf66d3685bc6956389dd1199c0b24fedcf145c48e2c294680fbe36189397542bd0b9c58d4b89748bc3",
            "file": "src/app/uiux/combs/showcase/showcase3v7/showcase3v7.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-showcase3v7",
            "styleUrls": [
                "./showcase3v7.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./showcase3v7.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-showcase3v7',\n  templateUrl: './showcase3v7.component.html',\n  styleUrls: ['./showcase3v7.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class Showcase3v7Component implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/theme/variable/breakpoint\";\n:host-context(.gaoliang-theme) ::ng-deep {\n  .showcase-3-v7 {\n    .showcase-inner {\n      .left {\n        .box:nth-child(2) {\n          padding-right: 5rem !important;\n        }\n      }\n      .right {\n        .box:nth-child(2) {\n          padding-left: 5rem !important;\n        }\n      }\n    }\n  }\n}\n@media #{$gt-sm} {\n  .left,\n  .right {\n    .box {\n      &:last-child {\n        ::ng-deep .inv-builder-box {\n          margin-bottom: 0 !important;\n          padding-bottom: 0 !important;\n        }\n      }\n    }\n  }\n}\n@media #{$lt-md} {\n  .middle {\n    padding-bottom: 2rem;\n    margin-bottom: 2rem;\n  }\n}\n",
                    "styleUrl": "./showcase3v7.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"showcase-3-v7 position-relative\" *ngIf=\"content\">\n  <a class=\"anchor\" *ngIf=\"content.id\" [id]=\"content.id\"></a>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n  <app-bg [content]=\"content.bg\" *ngIf=\"content.bg\"></app-bg>\n  <div class=\"container\" *ngIf=\"content\">\n    <app-text [content]=\"content.title\"></app-text>\n    <div class=\"showcase-inner\" fxLayout.lt-md=\"column\" fxLayout.gt-sm=\"row\" fxLayoutAlign=\"center center\">\n      <div class=\"left\" fxLayout=\"row wrap\" fxFlex.lt-md=\"0 0 100\" fxFlex.gt-sm=\"0 0 33.33\">\n        <app-box fxLayoutAlign.gt-sm=\"end center\" fxFlex=\"0 0 calc(100% - 2rem)\" class=\"box p-x-xs\" [content]=\"item\"\n          *ngFor=\"let item of content.left\">\n        </app-box>\n      </div>\n      <div class=\"middle\" fxLayout=\"column\" fxLayoutAlign=\"center center\" fxFlex.lt-md=\"100\" fxFlex.gt-sm=\"33.33\">\n        <app-img class=\"p-x-sm\" [content]=\"content.img\"></app-img>\n      </div>\n      <div class=\"right\" fxLayout=\"row wrap\" fxFlex.lt-md=\"0 0 100\" fxFlex.gt-sm=\"0 0 33.33\">\n        <app-box fxFlex=\"0 0 calc(100% - 2rem)\" class=\"box p-x-xs\" [content]=\"item\" *ngFor=\"let item of content.right\">\n        </app-box>\n      </div>\n    </div>\n  </div>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n</div>\n"
        },
        {
            "name": "Showcase3v8Component",
            "id": "component-Showcase3v8Component-ae49f49aa897d7cd79427427a974bb8f02dc70ddf33ea40c9a55c1699d6a2ca951e57b2b08d5efcf8a47e3eae1c67af6186dbe28ee924e6fd19e5d98bbe82bd9",
            "file": "src/app/uiux/combs/showcase/showcase3v8/showcase3v8.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-showcase3v8",
            "styleUrls": [
                "./showcase3v8.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./showcase3v8.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getApiParams",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getDeepValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getFormParams",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Params",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getParams",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getParamsState",
                    "args": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getUrlQuery",
                    "args": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "handlerPager",
                    "args": [
                        {
                            "name": "pager",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pager",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "initFormValueWithUrlQuery",
                    "args": [
                        {
                            "name": "query",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "controls",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "controls",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "row",
                    "args": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "padding",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'4rem'"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "padding",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'4rem'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { BaseComponent } from '@uiux/base/base.widget';\n\n@Component({\n  selector: 'app-showcase3v8',\n  templateUrl: './showcase3v8.component.html',\n  styleUrls: ['./showcase3v8.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class Showcase3v8Component extends BaseComponent implements OnInit {\n  @Input() content: any;\n  constructor() {\n    super();\n  }\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".showcase-3-v8 {\n  overflow: hidden;\n}\n\n.middle {\n  ::ng-deep .media {\n    border-radius: 80px;\n    padding: 40px;\n  }\n}\n.top,\n.bottom {\n  ::ng-deep .media {\n    border-radius: 40px;\n    padding: 2rem;\n  }\n}\n",
                    "styleUrl": "./showcase3v8.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "extends": "BaseComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"showcase-3-v8 position-relative\" *ngIf=\"content\">\n  <a class=\"anchor\" *ngIf=\"content.id\" [id]=\"content.id\"></a>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n  <app-bg [content]=\"content.bg\" *ngIf=\"content.bg\">\n    <app-img [content]=\"content.bg.img\" *ngIf=\"content.bg.img\"></app-img>\n  </app-bg>\n  <div class=\"container\" *ngIf=\"content\">\n    <app-text [content]=\"content.title\"></app-text>\n    <div class=\"showcase-inner\" fxLayout=\"row wrap\" fxLayoutAlign=\"center center\">\n      <div class=\"top\" fxLayout=\"row wrap\" fxLayoutAlign=\"center center\" fxFlex.lt-md=\"0 0 100\" fxFlex.gt-sm=\"0 0 80\">\n        <app-media-object fxFlex.lt-md=\"100\" fxFlex.gt-sm=\"0 0 calc(80%/2 - 2rem)\" [content]=\"item\"\n          *ngFor=\"let item of content.top\">\n        </app-media-object>\n      </div>\n      <div class=\"middle m-y-sm\" fxLayout=\"row\" fxLayoutAlign=\"center center\" fxFlex=\"100\">\n        <app-media-object fxFlex.lt-md=\"100\" fxFlex.gt-sm=\"0 0 calc(60%/2 - 2rem)\" [content]=\"content.main\">\n        </app-media-object>\n      </div>\n      <div class=\"bottom\" fxLayout=\"row wrap\" fxLayoutAlign=\"center center\" fxFlex.lt-md=\"0 0 100\"\n        fxFlex.gt-sm=\"0 0 80\">\n        <app-media-object fxFlex.lt-md=\"100\" fxFlex.gt-sm=\"0 0 calc(80%/2 - 2rem)\" [content]=\"item\"\n          *ngFor=\"let item of content.bottom\">\n        </app-media-object>\n      </div>\n    </div>\n  </div>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n</div>\n"
        },
        {
            "name": "Showcase4v1Component",
            "id": "component-Showcase4v1Component-359e42783c898d817db5c9a073087f5c98b4132e42a75084ee0574806c8e106ae3ed24b96f94e085139b91b3c7382a062a9f54340ccf50b465086a68e22bea71",
            "file": "src/app/uiux/combs/showcase/showcase4v1/showcase4v1.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-showcase4v1",
            "styleUrls": [
                "./showcase4v1.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./showcase4v1.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-showcase4v1',\n  templateUrl: './showcase4v1.component.html',\n  styleUrls: ['./showcase4v1.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class Showcase4v1Component implements OnInit {\n  @Input() content: any;\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/theme/mixins/amixin\";\n.inv-stats {\n  text-align: center;\n  .stats-icon {\n    font-size: 32px;\n    margin: 0 auto;\n    position: relative;\n    .mat-icon {\n      position: relative;\n      z-index: 1;\n    }\n  }\n  .stats-count {\n    font-size: 32px;\n    font-weight: 700;\n    margin-top: 30px;\n  }\n  .stats-title {\n    font-size: 22px;\n    letter-spacing: 1px;\n    padding-top: 15px;\n    margin-top: 15px;\n    text-transform: capitalize;\n    position: relative;\n  }\n}\n",
                    "styleUrl": "./showcase4v1.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"showcase-4-v1 position-relative\" *ngIf=\"content\">\n  <a class=\"anchor\" *ngIf=\"content.id\" [id]=\"content.id\"></a>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n  <app-title [content]=\"content.title\" *ngIf=\"content.title\"></app-title>\n  <app-bg *ngIf=\"content.bg\" [content]=\"content.bg\"></app-bg>\n  <div class=\"container\" fxLayout.xs=\"column\" fxLayout.gt-xs=\"row\">\n    <div fxFlex *ngFor=\"let item of content.elements\">\n      <div class=\"style04 inv-stats\">\n        <div class=\"stats-icon\">\n          <mat-icon>{{item.icon}}</mat-icon>\n        </div>\n        <div class=\"stats-count\">\n          <app-number-animate [content]=\"item.digit\"></app-number-animate>\n        </div>\n        <div class=\"stats-title\">{{item.title}}</div>\n        <div class=\"stats-desc\">{{item.desc}}</div>\n      </div>\n    </div>\n  </div>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n</div>\n"
        },
        {
            "name": "ShuffleComponent",
            "id": "component-ShuffleComponent-12d510516a8496b08c9f29759e61ea93b4082ece5fc1777f19ab243fc8e3f569b805b7a8701f9b8df7a1a7713437746505d19415a8c214152d2b32ace4c5665f",
            "file": "src/app/uiux/combs/masonry/shuffle/shuffle.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shuffle",
            "styleUrls": [
                "./shuffle.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./shuffle.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "shuffle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFilter",
                    "args": [
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackByFn",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  OnInit,\n  ElementRef,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { ScreenService } from '@core/service/screen.service';\nimport Shuffle from 'shufflejs';\n@Component({\n  selector: 'app-shuffle',\n  templateUrl: './shuffle.component.html',\n  styleUrls: ['./shuffle.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShuffleComponent implements OnInit, AfterViewInit {\n  @Input() content: any;\n  shuffle: any;\n  constructor(private el: ElementRef, private screenService: ScreenService) {}\n\n  ngOnInit(): void {}\n\n  ngAfterViewInit(): void {\n    if (this.screenService.isPlatformBrowser()) {\n      const sizer = this.el.nativeElement.querySelectorAll('.sizer')[0];\n      const shuffleEl =\n        this.el.nativeElement.querySelectorAll('.shuffle-inner')[0];\n      this.shuffle = new Shuffle(shuffleEl, {\n        itemSelector: '.item',\n        sizer,\n        speed: 500,\n        easing: 'ease-out',\n        delimiter: ',',\n      });\n    }\n  }\n  onFilter(category: string): void {\n    this.shuffle.filter(category);\n  }\n\n  trackByFn(index: number, item: any): number {\n    return index;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/theme/variable/breakpoint\";\n\n.filter {\n  padding: 20px 10px;\n}\n\n.item {\n  position: relative;\n  float: left;\n  width: 100%;\n  box-sizing: border-box;\n  padding: 0 10px;\n  margin-bottom: 20px;\n}\n",
                    "styleUrl": "./shuffle.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"shuffle-container\" *ngIf=\"content\">\n  <a class=\"anchor\" *ngIf=\"content.id\" [id]=\"content.id\"></a>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n  <div class=\"container\">\n    <app-title *ngIf=\"content.title\" [content]=\"content.title\"></app-title>\n    <div class=\"filter\" *ngIf=\"content.filter\">\n      <mat-button-toggle-group name=\"fontStyle\" aria-label=\"Font Style\">\n        <ng-container *ngFor=\"let item of content.filter\">\n          <mat-button-toggle *ngIf=\"item.value\" (click)=\"onFilter(item.value)\" value=\"{{item.value}}\">\n            {{item.label}}\n          </mat-button-toggle>\n        </ng-container>\n      </mat-button-toggle-group>\n    </div>\n    <div class=\"shuffle-inner\">\n      <div class=\"item\" fxFlex.xs=\"100\" fxFlex.sm=\"50%\" fxFlex.gt-sm=\"0 0 calc({{100/(content.row || 4)}}%)\"\n        *ngFor=\"let item of content.elements; trackBy: trackByFn\" [attr.data-groups]=\"item.category\">\n        <app-dynamic-widgets [content]=\"item\"></app-dynamic-widgets>\n      </div>\n      <div class=\"sizer\" fxFlex.xs=\"100\" fxFlex.sm=\"calc(50% - 30px)\"\n        fxFlex.gt-sm=\"0 0 calc({{100/(content.row || 4)}}%)\"></div>\n    </div>\n  </div>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n</div>\n"
        },
        {
            "name": "SidebarComponent",
            "id": "component-SidebarComponent-f2f1d270d07cb4eba2d9f3b2babf9e7a46c1a08567e5d349b884791e0916f10cb24a10891c3470c5577576e5e588ae4ad3718bd65a87a189c946ae958ac5cbbd",
            "file": "src/app/uiux/widgets/sidebar/sidebar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sidebar",
            "styleUrls": [
                "./sidebar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sidebar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-sidebar',\n  templateUrl: './sidebar.component.html',\n  styleUrls: ['./sidebar.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SidebarComponent implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".sidebar {\n  position: sticky;\n  position: -webkit-sticky;\n  top: 80px;\n}\n",
                    "styleUrl": "./sidebar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"content\" class=\"sidebar\">\n  <ng-container *ngFor=\"let item of content\">\n    <app-dynamic-widgets [content]=\"item\"></app-dynamic-widgets>\n  </ng-container>\n</div>\n"
        },
        {
            "name": "SpaceBetweenComponent",
            "id": "component-SpaceBetweenComponent-98021d51b28812548ec0544b24e6408f7023e6c3fbcf8847094d232d37be3acefd899bc42ed64f12d1939b9ed102b304471270540b41c0de30ab5085f8225402",
            "file": "src/app/core/branding/footer/space-between/space-between.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-space-between",
            "styleUrls": [
                "./space-between.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./space-between.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-space-between',\n  templateUrl: './space-between.component.html',\n  styleUrls: ['./space-between.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SpaceBetweenComponent implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../common.scss\";\n",
                    "styleUrl": "./space-between.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": " <div class=\"shape-inner position-relative p-y-lg m-top-lg\" *ngIf=\"content?.params?.shape\">\n   <div class=\"shape\">\n     <svg viewBox=\"0 0 2880 250\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n       <path d=\"M720 125L2160 0H2880V250H0V125H720Z\" fill=\"currentColor\"></path>\n     </svg>\n   </div>\n </div>\n <div class=\"footer-inverse space-between-footer position-relative\" *ngIf=\"content\">\n   <div class=\"container\">\n     <div class=\"p-y-md\" fxLayout=\"row wrap\" fxLayoutAlign.lt-md=\"center center\">\n       <div *ngIf=\"content?.footerBrand\" fxLayout.lt-md=\"column\" fxLayout.gt-sm=\"row\">\n         <div fxFlex.lt-md=\"100\" fxFlex.gt-sm=\"0 0 100\" class=\"brand\" fxLayout=\"column\">\n           <app-img [content]=\"content.footerBrand.logo.img\" *ngIf=\"content.footerBrand.logo\"></app-img>\n           <p class=\"m-top-xs m-bottom-0\" [innerHTML]=\"content.footerBrand?.summary|safeHtml\"\n             *ngIf=\"content.footerBrand?.summary\"></p>\n           <div class=\"social m-y-sm\" fxLayout=\"row\" *ngIf=\"content?.footerBrand?.social\">\n             <a class=\"item\" fxLayoutAlign=\"center center\" *ngFor=\"let item of content.footerBrand.social\"\n               href=\"{{item.href}}\" target=\"_blank\" title=\"{{item.label}}\">\n               <mat-icon [inline]=\"true\" [svgIcon]=\"item.svg\"></mat-icon>\n             </a>\n           </div>\n         </div>\n       </div>\n       <div fxFlex.lt-md=\"100\" fxFlex.gt-sm=\"0 0 100\">\n         <!-- <mat-divider class=\"m-y-sm\"></mat-divider> -->\n         <div fxLayout.lt-md=\"column\" fxLayout.gt-sm=\"row\" fxLayoutAlign=\"space-between center\">\n           <app-text [content]=\"content?.content?.left\"></app-text>\n           <app-text [content]=\"content?.content?.middle\"></app-text>\n           <app-text [content]=\"content?.content?.right\"></app-text>\n         </div>\n       </div>\n     </div>\n   </div>\n   <div class=\"footer-bottom p-y-sm\">\n     <div class=\"container\">\n       <div class=\"inner\" fxLayout.lt-md=\"column\" fxLayout.gt-sm=\"row\" fxLayoutAlign.lt-md=\"center center\"\n         fxLayoutAlign.gt-sm=\"space-between center\">\n         <div class=\"left\" [ngClass.lt-md]=\"'text-center'\" *ngIf=\"content?.footerBottom?.left\"\n           [innerHTML]=\"content.footerBottom.left | safeHtml\"></div>\n         <div class=\"right\" *ngIf=\"content?.footerBottom?.right\">\n           <div fxLayout=\"row\">\n             <app-link class=\"item\" *ngFor=\"let item of content.footerBottom.right\" [content]=\"item\"></app-link>\n           </div>\n         </div>\n       </div>\n     </div>\n   </div>\n </div>\n"
        },
        {
            "name": "SpacerComponent",
            "id": "component-SpacerComponent-a94f121f5a0616b3ab9dd620daa3c69f43b5f54e9b792c6578f983cb8730199a00df115e0ca05823e8111ba126f9cf5cb45ddd4fad461f2d082112e676181281",
            "file": "src/app/uiux/widgets/spacer/spacer.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-spacer",
            "styleUrls": [
                "./spacer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./spacer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-spacer',\n  templateUrl: './spacer.component.html',\n  styleUrls: ['./spacer.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SpacerComponent implements OnInit {\n  @Input() size: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./spacer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"p-top-{{size || 'sm'}}\"></div>\n"
        },
        {
            "name": "SpinnerComponent",
            "id": "component-SpinnerComponent-36ca20f47181379a4d4daa42d710fc3a4bf5f3dac8d99ae119b1d87f5d2ce58ba790688d2c36d56c965b12d55d812db8f875392a13c6cef8cf3ea1bda11590a5",
            "file": "src/app/uiux/widgets/spinner/spinner.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-spinner",
            "styleUrls": [
                "./spinner.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./spinner.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-spinner',\n  templateUrl: './spinner.component.html',\n  styleUrls: ['./spinner.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SpinnerComponent implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./spinner.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"content\">\n  <mat-progress-spinner [color]=\"content?.color\" [diameter]=\"content?.size\" [mode]=\"'indeterminate'\">\n  </mat-progress-spinner>\n</ng-container>\n"
        },
        {
            "name": "SubMenuComponent",
            "id": "component-SubMenuComponent-a9add5da33bed642f5955ee6b7488d8610ff5801710d9cd9c036c8512710775b2816f788715227a84108d124b8378b7f49f0f90b37d96f9109264e533515f73c",
            "file": "src/app/core/branding/header/menu/item-menu/sub-menu/sub-menu.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sub-menu",
            "styleUrls": [
                "./sub-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sub-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "childMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'childMenu', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-sub-menu',\n  templateUrl: './sub-menu.component.html',\n  styleUrls: ['./sub-menu.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SubMenuComponent implements OnInit {\n  @Input() content: any;\n  @ViewChild('childMenu', { static: true }) public childMenu: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "button {\n  ::ng-deep a {\n    display: block;\n  }\n}\n",
                    "styleUrl": "./sub-menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 17
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-menu class=\"sub-menu\" #childMenu=\"matMenu\" [overlapTrigger]=\"false\">\n  <div *ngFor=\"let item of content.child\">\n    <div *ngIf=\"item.child && item.child.length > 0\">\n      <button mat-menu-item [matMenuTriggerFor]=\"menu.childMenu\">\n        <mat-icon *ngIf=\"item.icon\">{{item.icon}}</mat-icon>\n        <app-link [content]=\"item\"></app-link>\n      </button>\n      <app-sub-menu #menu [content]=\"item\"></app-sub-menu>\n    </div>\n    <div *ngIf=\"!item.child || item.child.length === 0\">\n      <button mat-menu-item>\n        <mat-icon *ngIf=\"item.icon\">{{item.icon}}</mat-icon>\n        <app-link [content]=\"item\"></app-link>\n      </button>\n    </div>\n  </div>\n</mat-menu>\n"
        },
        {
            "name": "SwiperComponent",
            "id": "component-SwiperComponent-0d0ea9041d5bcef728b6b090be672f05e24d0d07ef10f8533db5769195acc5716ca5871d4b1f6701b872bf4e38a3bbf21ec24cdf08f002db68488bf6cc5fbe45",
            "file": "src/app/uiux/widgets/swiper/swiper.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-swiper",
            "styleUrls": [
                "./swiper.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./swiper.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "navigationSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "Subject<any>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SwiperConfigInterface",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "defaultConfig",
                    "defaultValue": "{\n    slidesPerView: 'auto',\n    speed: 1000,\n    scrollbar: false,\n    keyboard: true,\n    mousewheel: false,\n    navigation: true,\n    pagination: paginationgConfig,\n    autoplay: true,\n    // Responsive breakpoints\n    // breakpoints: {\n    //   // when window width is >= 320px\n    //   320: {\n    //     slidesPerView: 1.2,\n    //     spaceBetween: 10,\n    //   },\n    //   // when window width is >= 480px\n    //   480: {\n    //     slidesPerView: 2,\n    //     spaceBetween: 20,\n    //   },\n    //   // when window width is >= 640px\n    //   640: {\n    //     slidesPerView: 3,\n    //     spaceBetween: 30,\n    //   },\n    //   768: {\n    //     slidesPerView: 4,\n    //     spaceBetween: 30,\n    //   },\n    // },\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SwiperConfigInterface",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "swiperWrapper",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SwiperDirective",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "SwiperDirective"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSlideChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSwiper",
                    "args": [
                        {
                            "name": "swiper",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "swiper",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  OnInit,\n  ViewChild,\n  AfterViewInit,\n  OnDestroy,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n  SwiperConfigInterface,\n  SwiperPaginationInterface,\n  SwiperDirective,\n} from 'ngx-swiper-wrapper';\nimport { Subject } from 'rxjs';\nimport { ScreenService } from '@core/service/screen.service';\n\n// https://www.npmjs.com/package/ngx-swiper-wrapper\n\nconst paginationgConfig: SwiperPaginationInterface = {\n  el: '.swiper-pagination',\n  type: 'bullets',\n  clickable: true,\n  hideOnClick: false,\n};\n\n@Component({\n  selector: 'app-swiper',\n  templateUrl: './swiper.component.html',\n  styleUrls: ['./swiper.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SwiperComponent implements OnInit, AfterViewInit, OnDestroy {\n  @Input() content: any;\n  @Input() index: number;\n  @Input() navigationSub: Subject<any>;\n  @ViewChild(SwiperDirective) public swiperWrapper: SwiperDirective;\n  constructor(private screenService: ScreenService) {}\n\n  defaultConfig: SwiperConfigInterface = {\n    slidesPerView: 'auto',\n    speed: 1000,\n    scrollbar: false,\n    keyboard: true,\n    mousewheel: false,\n    navigation: true,\n    pagination: paginationgConfig,\n    autoplay: true,\n    // Responsive breakpoints\n    // breakpoints: {\n    //   // when window width is >= 320px\n    //   320: {\n    //     slidesPerView: 1.2,\n    //     spaceBetween: 10,\n    //   },\n    //   // when window width is >= 480px\n    //   480: {\n    //     slidesPerView: 2,\n    //     spaceBetween: 20,\n    //   },\n    //   // when window width is >= 640px\n    //   640: {\n    //     slidesPerView: 3,\n    //     spaceBetween: 30,\n    //   },\n    //   768: {\n    //     slidesPerView: 4,\n    //     spaceBetween: 30,\n    //   },\n    // },\n  };\n  config: SwiperConfigInterface;\n  ngOnInit(): void {\n    this.config = Object.assign(this.defaultConfig, this.content.params);\n  }\n  ngAfterViewInit(): void {\n    if (this.screenService.isPlatformBrowser()) {\n      if (this.navigationSub) {\n        this.navigationSub.subscribe((action) => {\n          if (action > 0) {\n            this.swiperWrapper.nextSlide();\n          } else {\n            this.swiperWrapper.prevSlide();\n          }\n        });\n      }\n    }\n  }\n  onSwiper(swiper: any): void {\n    console.log(swiper);\n  }\n  onSlideChange(): void {\n    console.log('slide change');\n  }\n  ngOnDestroy(): void {\n    if (this.navigationSub) {\n      this.navigationSub?.unsubscribe();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// import all css on anuglar.json\n// https://swiperjs.com/angular\n.swiper-button-next,\n.swiper-button-prev {\n  margin-top: calc(12px - (var(--swiper-navigation-size) / 2));\n  &:after {\n    font-family: inherit;\n    font-size: 24px;\n  }\n}\n.swiper-button-next:after {\n  content: \"navigate_next\";\n}\n.swiper-button-prev:after {\n  content: \"navigate_before\";\n}\n.swiper-slide {\n  overflow: hidden;\n}\n",
                    "styleUrl": "./swiper.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnDestroy"
            ],
            "templateData": "<ng-container *ngIf=\"content\">\n  <div #swiper class=\"swiper-container\" *ngIf=\"content.elements.length > 0\" [swiper]=\"config\" [(index)]=\"index\">\n    <div class=\"swiper-wrapper\">\n      <div class=\"swiper-slide\" *ngFor=\"let slide of content.elements\">\n        <app-dynamic-widgets [content]=\"slide\"></app-dynamic-widgets>\n      </div>\n    </div>\n\n    <div [class.display-none]=\"config?.scrollbar === false\" class=\"swiper-scrollbar\"></div>\n    <div [class.display-none]=\"config?.pagination === false\" class=\"swiper-pagination\"></div>\n    <div [class.display-none]=\"config?.navigation===false\" class=\"mat-icon material-icons swiper-button-prev\"></div>\n    <div [class.display-none]=\"config?.navigation === false\" class=\"mat-icon material-icons swiper-button-next\"></div>\n  </div>\n</ng-container>\n"
        },
        {
            "name": "SwitchThemeComponent",
            "id": "component-SwitchThemeComponent-6beb73e7236312b7daa9110c5b8b026408387b05ac373e2afb5637e037993cf11736b9be044fe3b76df8173ad05411d17127e834d27f144c028725ceb5f8dcb0",
            "file": "src/app/core/branding/header/menu/switch-theme/switch-theme.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-switch-theme",
            "styleUrls": [
                "./switch-theme.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./switch-theme.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "appState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AppState",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "coreConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICoreConfig",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "CORE_CONFIG"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSwitchTheme",
                    "args": [
                        {
                            "name": "theme",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  OnInit,\n} from '@angular/core';\nimport { AppState } from '@core/mobx/AppState';\nimport { ICoreConfig } from '@core/mobx/IAppConfig';\nimport { CORE_CONFIG } from '@core/token/core.config';\n@Component({\n  selector: 'app-switch-theme',\n  templateUrl: './switch-theme.component.html',\n  styleUrls: ['./switch-theme.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SwitchThemeComponent implements OnInit {\n  constructor(\n    public appState: AppState,\n    @Inject(CORE_CONFIG) public coreConfig: ICoreConfig\n  ) {}\n\n  ngOnInit(): void {}\n\n  onSwitchTheme(theme: string): void {\n    this.appState.switchTheme(theme);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".right-icon {\n  float: right;\n  margin-right: 0 !important;\n  margin-left: 16px;\n  margin-top: 12px;\n}\n",
                    "styleUrl": "./switch-theme.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "appState",
                        "type": "AppState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "coreConfig",
                        "type": "ICoreConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "appState",
                        "type": "AppState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "coreConfig",
                        "type": "ICoreConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"coreConfig?.theme\">\n  <div class=\"switch-theme\" [matTooltip]=\"'切换风格'\" matTooltipPosition=\"above\">\n    <button aria-label=\"switch theme\" mat-icon-button [mat-menu-trigger-for]=\"menu\">\n      <mat-icon color=\"primary\">format_color_fill</mat-icon>\n    </button>\n\n    <mat-menu #menu=\"matMenu\">\n      <button aria-label=\"switch theme item\" *ngFor=\"let theme of coreConfig.theme\" mat-menu-item\n        (click)=\"onSwitchTheme(theme.style)\">\n        <mat-icon *ngIf=\"appState.theme !== theme.style\">radio_button_unchecked</mat-icon>\n        <mat-icon color=\"primary\" *ngIf=\"appState.theme === theme.style\"> radio_button_checked </mat-icon>\n        <span>{{theme.name}}</span>\n        <mat-icon class=\"right-icon\" *ngIf=\"theme.icon; else svgIcon\">{{theme.icon}}</mat-icon>\n        <ng-template #svgIcon>\n          <mat-icon svgIcon=\"{{theme.svgIcon}}\" class=\"right-icon\"></mat-icon>\n        </ng-template>\n      </button>\n    </mat-menu>\n  </div>\n</ng-container>\n"
        },
        {
            "name": "Tab1v1Component",
            "id": "component-Tab1v1Component-bd623cf1c01d2329a39022dba685e3a8010c5f20a41c7979a54f1a4e473de9d72ca5e9bb65bef5b496c6c8be201cf2e7ae71fdf3dea7e63d175c2c3658629206",
            "file": "src/app/uiux/combs/tab/tab1v1/tab1v1.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tab1v1",
            "styleUrls": [
                "./tab1v1.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tab1v1.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "nodeService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NodeService",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "pager",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "routerService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RouteService",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "selectedIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "tabs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "initTab",
                    "args": [
                        {
                            "name": "query",
                            "type": "Params",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPageChange",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectChange",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateList",
                    "args": [
                        {
                            "name": "values",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "values",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApiParams",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getDeepValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getFormParams",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Params",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getParams",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getParamsState",
                    "args": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getUrlQuery",
                    "args": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "handlerPager",
                    "args": [
                        {
                            "name": "pager",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pager",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "initFormValueWithUrlQuery",
                    "args": [
                        {
                            "name": "query",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "controls",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "controls",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "row",
                    "args": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "padding",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'4rem'"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "padding",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'4rem'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { BaseComponent } from '@uiux/base/base.widget';\nimport { NodeService } from '@core/service/node.service';\nimport { RouteService } from '@core/service/route.service';\nimport { isEmpty, omitBy } from 'lodash';\nimport { ScreenService } from '@core/service/screen.service';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-tab1v1',\n  templateUrl: './tab1v1.component.html',\n  styleUrls: ['./tab1v1.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class Tab1v1Component\n  extends BaseComponent\n  implements OnInit, OnDestroy\n{\n  @Input() content: any;\n\n  selectedIndex = 0;\n  tabs: any[];\n  page: number;\n  pager: any;\n  currentList: any[] = [];\n  destroy$: Subject<boolean> = new Subject<boolean>();\n\n  constructor(\n    public nodeService: NodeService,\n    public routerService: RouteService,\n    private router: ActivatedRoute,\n    private screenService: ScreenService,\n    private cd: ChangeDetectorRef\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    if (this.screenService.isPlatformBrowser()) {\n      this.router.queryParamMap.subscribe((query: Params) => {\n        this.page = query.get('page') || 0;\n        const querys = omitBy(\n          Object.assign(\n            {\n              page: this.page,\n            },\n            {\n              tab: query.get('tab') || 0,\n            }\n          ),\n          isEmpty\n        );\n        this.initTab(querys);\n      });\n    }\n  }\n\n  initTab(query: Params): void {\n    this.selectedIndex = Number(query.tab) || 0;\n    this.tabs = this.content.tab.elements;\n    if (this.selectedIndex < this.tabs.length) {\n      const tabQuery = this.tabs[this.selectedIndex].query;\n      const apiQuery = Object.assign({}, tabQuery, {\n        page: query.page,\n      });\n      const type = this.getParams(this.content, 'type');\n      const state = this.getParamsState({}, apiQuery);\n      const params = this.getApiParams(state);\n      this.nodeService\n        .search(type, params)\n        .pipe(takeUntil(this.destroy$))\n        .subscribe((res) => {\n          this.pager = this.handlerPager(res.pager);\n          this.currentList = res.rows.map((item: any) => {\n            return {\n              link: {\n                href: item.url,\n                label: item.title,\n              },\n              more: {\n                href: item.url,\n                label: '更多',\n              },\n              date: item.created,\n              body: item.body,\n            };\n          });\n          this.cd.detectChanges();\n        });\n    }\n    this.cd.detectChanges();\n  }\n\n  onSelectChange(index: number): void {\n    const values = {\n      tab: index,\n    };\n    this.updateList(values);\n  }\n\n  onPageChange(page: number): void {\n    const values = {\n      tab: this.selectedIndex,\n      page: page - 1,\n    };\n    this.updateList(values);\n  }\n\n  updateList(values: any): void {\n    this.initTab(values);\n    this.routerService.updateQueryParams(this.getUrlQuery(values));\n    this.cd.detectChanges();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./tab1v1.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "routerService",
                        "type": "RouteService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "routerService",
                        "type": "RouteService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"tab-1v1 p-top\" *ngIf=\"content\">\n  <app-text *ngIf=\"content.text\" [content]=\"content.text\"></app-text>\n  <div class=\"container\" *ngIf=\"content.tab && pager\">\n    <mat-tab-group [selectedIndex]=\"selectedIndex\" (selectedIndexChange)=\"onSelectChange($event)\"\n      mat-align-tabs=\"center\" animationDuration=\"0ms\">\n      <mat-tab label=\"{{tab.label}}\" *ngFor=\"let tab of tabs\">\n        <ng-template matTabContent>\n          <app-media-meta [content]=\"item\" *ngFor=\"let item of currentList | paginate: pager\">\n          </app-media-meta>\n        </ng-template>\n      </mat-tab>\n    </mat-tab-group>\n    <app-pagination *ngIf=\"currentList.length > 0;else empty\" (pageChange)=\"onPageChange($event)\"></app-pagination>\n    <ng-template #empty>\n      <div class=\"text-center p-y-xl\">\n        <p>没有数据。</p>\n      </div>\n    </ng-template>\n  </div>\n</div>\n"
        },
        {
            "name": "TabComponent",
            "id": "component-TabComponent-4caa7c61442c3ffc670c0ba15f2762367dfe1800a5e0112b91beb8d5a9018df0fac887e182f1e3b6752890ba7199ab71443045cce84b23525578c83fc6c52387",
            "file": "src/app/uiux/widgets/tab/tab.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tab",
            "styleUrls": [
                "./tab.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tab.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-tab',\n  templateUrl: './tab.component.html',\n  styleUrls: ['./tab.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabComponent implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./tab.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"tab\" *ngIf=\"content\">\n  <a class=\"anchor\" *ngIf=\"content.id\" [id]=\"content.id\"></a>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n  <div class=\"{{content.fullWidth?'container-fluid':'container'}}\">\n    <app-title *ngIf=\"content.title\" [content]=\"content.title\"></app-title>\n    <mat-tab-group mat-align-tabs=\"start\" [ngClass]=\"content.classes\">\n      <mat-tab *ngFor=\"let item of content.elements\" label=\"{{item.label}}\">\n        <div class=\"p-y-sm p-x-sm\">\n          <app-bg-img [content]=\"content.bg\"></app-bg-img>\n          <app-dynamic-widgets *ngFor=\"let item of item.elements\" [content]=\"item\"></app-dynamic-widgets>\n        </div>\n      </mat-tab>\n    </mat-tab-group>\n  </div>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n</div>\n"
        },
        {
            "name": "TaxonomyListComponent",
            "id": "component-TaxonomyListComponent-f1d607f35f8686cf34c21074484c0cffae8242b7881ef921550e03213ac9522cbd818e7666300b578b96b435ccdd304dd4fb3bee49dae26558c9c9983a046ff8",
            "file": "src/app/uiux/combs/list/taxonomy-list/taxonomy-list.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-taxonomy-list",
            "styleUrls": [
                "./taxonomy-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./taxonomy-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-taxonomy-list',\n  templateUrl: './taxonomy-list.component.html',\n  styleUrls: ['./taxonomy-list.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TaxonomyListComponent implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./taxonomy-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"taxonomy-list m-y\">\n  <div class=\"container\">\n    <div class=\"m-top-sm\" fxLayout.lt-md=\"column\" fxLayout.gt-sm=\"row\" fxLayoutAlign=\"center start\">\n      <div class=\"list\" fxFlex.lt-md=\"100\" fxFlex.gt-sm=\"75\">\n        <app-list [content]=\"content.elements\" [pager]=\"content.pager\"></app-list>\n      </div>\n      <app-sidebar [ngClass.gt-sm]=\"'m-left-sm'\" *ngIf=\"content.sidebar\" fxFlex.lt-md=\"100\" fxFlex.gt-sm=\"25\"\n        [content]=\"content.sidebar\"></app-sidebar>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "TaxonomyThinListComponent",
            "id": "component-TaxonomyThinListComponent-892b76926db387402b9720b53b749e31ec18b772fd500455992bf3c9199ceb479f6f4767704bf9bcbc3f2acbe75d9ebf333182af0483195990f5ba7a7e422fa3",
            "file": "src/app/uiux/combs/list/taxonomy-thin-list/taxonomy-thin-list.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-taxonomy-thin-list",
            "styleUrls": [
                "./taxonomy-thin-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./taxonomy-thin-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getApiParams",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getDeepValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getFormParams",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Params",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getParams",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getParamsState",
                    "args": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getUrlQuery",
                    "args": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "handlerPager",
                    "args": [
                        {
                            "name": "pager",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pager",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "initFormValueWithUrlQuery",
                    "args": [
                        {
                            "name": "query",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "controls",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "controls",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "row",
                    "args": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "padding",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'4rem'"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "padding",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'4rem'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  Input,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { BaseComponent } from '@uiux/base/base.widget';\n\n@Component({\n  selector: 'app-taxonomy-thin-list',\n  templateUrl: './taxonomy-thin-list.component.html',\n  styleUrls: ['./taxonomy-thin-list.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TaxonomyThinListComponent extends BaseComponent implements OnInit {\n  @Input() content: any;\n  constructor() {\n    super();\n  }\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".thin-sidebar {\n  max-height: 80vh;\n  overflow: auto;\n}\n",
                    "styleUrl": "./taxonomy-thin-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "extends": "BaseComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-bg [content]=\"{'classes':'bg-fill-width bg-shadow'}\"></app-bg>\n<div class=\"taxonomy-thin-list position-relative\" *ngIf=\"content\">\n  <div class=\"container\">\n    <div class=\"p-y-md\" fxLayout.lt-md=\"column\" fxLayout.gt-sm=\"row\" fxLayoutAlign=\"center start\">\n      <div class=\"thin-sidebar p-x-xs p-y-xs\" [ngClass.gt-sm]=\"'m-right-sm'\" *ngIf=\"content.sidebar\" fxFlex.lt-md=\"100\"\n        fxFlex.gt-sm=\"25\">\n        <app-dynamic-widgets [content]=\"item\" *ngFor=\"let item of content.sidebar\"></app-dynamic-widgets>\n      </div>\n      <div class=\"list\" fxFlex.lt-md=\"100\" fxFlex.gt-sm=\"{{content.sidebar?'75':'100'}}\">\n        <app-list-thin [content]=\"content.elements\" [pager]=\"content.pager\"></app-list-thin>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "TermsServiceComponent",
            "id": "component-TermsServiceComponent-b7630ef52557d51455dc21ac70af5cd4284975bd46bc041acff685d3390219ece3829ed18eb34083351e7fa1a82661214a0c1a49497964fb4e9c29b9294f20be",
            "file": "src/app/uiux/widgets/form/terms-service/terms-service.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-terms-service",
            "styleUrls": [
                "./terms-service.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./terms-service.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "FormGroup",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openTermService",
                    "args": [
                        {
                            "name": "params",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { DialogComponent } from '@uiux/widgets/dialog/dialog.component';\nimport { TextComponent } from '@uiux/widgets/text/text.component';\n\n@Component({\n  selector: 'app-terms-service',\n  templateUrl: './terms-service.component.html',\n  styleUrls: ['./terms-service.component.scss'],\n})\nexport class TermsServiceComponent implements OnInit {\n  @Input() content: any;\n  @Input() form: FormGroup;\n  dialogRef: any;\n  constructor(public dialog: MatDialog) {}\n\n  ngOnInit(): void {}\n\n  openTermService(params: any): void {\n    console.log(params);\n    if (params) {\n      this.dialogRef = this.dialog.open(DialogComponent, {\n        width: '600px',\n        data: {\n          renderInputComponent: TextComponent,\n          inputData: {\n            content: {\n              title: {\n                label: params?.terms_title,\n                style: 'style-v4',\n              },\n              spacer: 'none',\n              body: params?.terms_content || `内容还未发布！`,\n            },\n          },\n        },\n      });\n    }\n  }\n\n  get isValid(): boolean {\n    return this.form.controls[this.content.key].valid;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./terms-service.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "isValid": {
                    "name": "isValid",
                    "getSignature": {
                        "name": "isValid",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 42
                    }
                }
            },
            "templateData": "<section [formGroup]=\"form\" fxLayoutAlign=\"start center\">\n  <mat-checkbox class=\"m-right-xs\" formControlName=\"{{content.key}}\" [(ngModel)]=\"content.value\">\n  </mat-checkbox>\n  <a (click)=\"openTermService(content?.params)\" href=\"javascript:void(0)\" class=\"line-height-1\" fxLayout=\"row\"\n    fxLayoutAlign=\"space-between center\" [innerHTML]=\"content.label|safeHtml\"></a>\n</section>\n"
        },
        {
            "name": "TestimonialComponent",
            "id": "component-TestimonialComponent-347f7b9abe0fd2feed03bdda24e155fa807f33d3e0667b27ad1781bfa784df7e4d03a552152c271f16b22d42a394f188114174d501b78008bdaa6a1f9dcc4484",
            "file": "src/app/uiux/widgets/testimonial/testimonial.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-testimonial",
            "styleUrls": [
                "./testimonial.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./testimonial.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-testimonial',\n  templateUrl: './testimonial.component.html',\n  styleUrls: ['./testimonial.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TestimonialComponent implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/theme/mixins/amixin\";\n.testimonial {\n  ::ng-deep {\n    img {\n      display: block;\n    }\n  }\n  &.style-v1 {\n    .views-field-field-image {\n      border: 1px solid #dadbdb;\n      display: inline-block;\n      padding: 4px;\n      position: absolute;\n      img {\n        width: 95px;\n        height: 95px;\n      }\n    }\n    .testimonial-detail {\n      padding-left: 120px;\n      .title {\n        color: #324545;\n        font-size: 14px;\n        margin-bottom: 10px;\n        text-transform: capitalize;\n      }\n      .sub-title {\n        color: #1ccdca;\n        margin-left: 7px;\n      }\n      .desc {\n        margin-top: 10px;\n      }\n    }\n  }\n  &.style-v2 {\n    .bx-wrapper {\n      ::ng-deep img {\n        margin: 0 auto;\n        @include border-radius(100%, 100%, 100%, 100%);\n        border: 1px solid;\n        padding: 6px;\n        width: 170px;\n        height: 170px;\n      }\n    }\n    .testimonial-detail {\n      text-align: center;\n      .info {\n        font-size: 16px;\n        margin: 30px 0 15px;\n        text-transform: uppercase;\n      }\n\n      .desc {\n        font-size: 16px;\n        font-style: italic;\n        line-height: 33px;\n        width: 80%;\n        margin: 0 auto;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./testimonial.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"testimonial\" [ngClass]=\"content.style\" *ngIf=\"content\">\n  <div class=\"bx-wrapper\">\n    <app-img [content]=\"content.img\"></app-img>\n  </div>\n  <div class=\"testimonial-detail\">\n    <div class=\"info\">\n      <span class=\"title\" *ngIf=\"content.title\">{{content.title}}</span> / <span class=\"sub-title\"\n        *ngIf=\"content.subTitle\">{{content.subTitle}}</span>\n    </div>\n    <div class=\"desc\">\n      <p *ngIf=\"content.body\" [innerHTML]=\"content.body | safeHtml\"></p>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "TextareaComponent",
            "id": "component-TextareaComponent-77dbc5d78823e73cec7e4d1214a424c7c7da8db1a29c1af54e57f2a5bf07a2565c890c1a4ca595af14f4b341a85120d8225c687604a36ffc3e0a4bf011bd0b68",
            "file": "src/app/uiux/widgets/form/textarea/textarea.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-textarea",
            "styleUrls": [
                "./textarea.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./textarea.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "IControl",
                    "decorators": []
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "FormGroup",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { IControl } from '@core/interface/widgets/IControl';\n\n@Component({\n  selector: 'app-textarea',\n  templateUrl: './textarea.component.html',\n  styleUrls: ['./textarea.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TextareaComponent implements OnInit {\n  @Input() content: IControl;\n  @Input() form: FormGroup;\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  get isValid(): boolean {\n    return this.form.controls[this.content.key].valid;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./textarea.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 18
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "isValid": {
                    "name": "isValid",
                    "getSignature": {
                        "name": "isValid",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 23
                    }
                }
            },
            "templateData": "<mat-form-field class=\"width-100\" [formGroup]=\"form\" *ngIf=\"content\" [appearance]=\"content.appearance || 'fill'\">\n  <mat-label>{{content.label}}</mat-label>\n  <textarea [mat-autosize]=\"true\" [matAutosizeMinRows]=\"content.params?.matAutosizeMinRows\" matInput\n    formControlName=\"{{content.key}}\" placeholder=\"{{content.placeholder}}\" [id]=\"content.key\"\n    [rows]=\"content.rows||1\"></textarea>\n  <mat-error *ngIf=\"isValid\">{{content.errorMes}}</mat-error>\n</mat-form-field>\n"
        },
        {
            "name": "TextComponent",
            "id": "component-TextComponent-9322282d0da5988cc87ade54d73b8c96cc354e61a9d25dbc283a189dc16b25f5261f73c8a0e9d99b20a24a668446fefe3f0b1427978f0d693bf2694ba2205c41",
            "file": "src/app/uiux/widgets/text/text.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-text",
            "styleUrls": [
                "./text.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./text.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "IText",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { IText } from '@core/interface/widgets/IText';\n\n@Component({\n  selector: 'app-text',\n  templateUrl: './text.component.html',\n  styleUrls: ['./text.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TextComponent implements OnInit {\n  @Input() content: IText;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../theme/mixins/amixin\";\n:host {\n  display: block;\n  width: 100%;\n}\n\n.base-text {\n  overflow: hidden;\n}\n\n.inner {\n  position: relative;\n  z-index: 2;\n}\n\n.actions {\n  > * {\n    margin-right: 2rem;\n  }\n}\n\n.text-body {\n  ::ng-deep {\n    img {\n      max-width: 100%;\n    }\n  }\n}\n\n.lists {\n  ::ng-deep {\n    a {\n      @include line-clamp(1);\n    }\n  }\n}\n",
                    "styleUrl": "./text.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [id]=\"content.id || ''\" class=\"base-text position-relative\" *ngIf=\"content\">\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n  <app-bg-img [content]=\"content.bg\" *ngIf=\"content.bg\"></app-bg-img>\n  <div class=\"container\">\n    <div class=\"inner\" [ngClass.gt-sm]=\"content.classes\" [ngStyle.gt-sm]=\"content.style\">\n      <app-title [content]=\"content.title\" *ngIf=\"content.title\"></app-title>\n      <div class=\"text-body\" [innerHTML]=\"content.body | safeHtml\" *ngIf=\"content.body\"></div>\n      <ul class=\"lists m-y-sm\" [class.list-done]=\"content.lists?.params?.icon\" *ngIf=\"content.lists?.elements\"\n        fxLayout=\"column\">\n        <li *ngFor=\"let list of content.lists?.elements\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n          <app-link [content]=\"list\"></app-link>\n        </li>\n      </ul>\n      <div class=\"actions m-top\" *ngIf=\"content.actions\" fxLayoutAlign=\"{{content.actionsAlign || 'start center'}}\">\n        <ng-container *ngFor=\"let action of content.actions\">\n          <ng-container [ngSwitch]=\"action.type\">\n            <app-search-action *ngSwitchCase=\"'search-action'\" [content]=\"action\"></app-search-action>\n            <button mat-raised-button mat-dialog-close color=\"{{action.color||'primary'}}\"\n              *ngSwitchCase=\"'closeDialog'\">{{action.label}}</button>\n            <app-btn-animate *ngSwitchCase=\"'btn-animate'\" [content]=\"action\"></app-btn-animate>\n            <a mat-raised-button [ngClass]=\"action.classes\" *ngSwitchDefault color=\"{{action.color||'primary'}}\"\n              href=\"{{action.href}}\" target=\"{{action.target}}\">\n              <app-icon [content]=\"action.icon\" *ngIf=\"action?.icon\"></app-icon>\n              {{action.label}}\n            </a>\n          </ng-container>\n        </ng-container>\n      </div>\n    </div>\n  </div>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n</div>\n"
        },
        {
            "name": "TextHeroComponent",
            "id": "component-TextHeroComponent-30d2233b8efd3fcd7a13244dd8f57b1b309bb4a08ab3e90a1aab953e9d57863114bfad5997be56923ad57770c65896f7867c80c9d33b4d6e46e4705e490cbaa7",
            "file": "src/app/uiux/widgets/text-hero/text-hero.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-text-hero",
            "styleUrls": [
                "./text-hero.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./text-hero.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-text-hero',\n  templateUrl: './text-hero.component.html',\n  styleUrls: ['./text-hero.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TextHeroComponent implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/theme/variable/breakpoint\";\n.text-hero {\n  overflow: hidden;\n  ::ng-deep .base-text {\n    overflow: visible;\n    position: static;\n  }\n  @media #{$lt-md} {\n    min-height: 600px;\n    height: 80vh;\n    ::ng-deep {\n      .base-text {\n        .inner {\n          .title {\n            .title-header {\n              font-size: 22px !important;\n            }\n          }\n        }\n      }\n    }\n  }\n  @media #{$lt-sm} {\n    ::ng-deep {\n      .base-text {\n        .inner {\n          .title {\n            .title-header {\n              font-size: 18px !important;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./text-hero.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"content\" class=\"text-hero position-relative\" [ngStyle.gt-sm]=\"content.params\" [ngClass]=\"content.theme\">\n  <a class=\"anchor\" *ngIf=\"content.id\" [id]=\"content.id\"></a>\n  <app-text [content]=\"content.text\"></app-text>\n</div>\n"
        },
        {
            "name": "TitleComponent",
            "id": "component-TitleComponent-b7de935d8e18934df15e66f01ed376853774a78cba1ab687c57652ad3aa23a1721e1b545aa2b7d94e82c5246dc5e1b476c88f72323c805c60f9f962bdce99cfc",
            "file": "src/app/uiux/widgets/title/title.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-title",
            "styleUrls": [
                "./title.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./title.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "ITitle",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { ITitle } from '@core/interface/widgets/ITitle';\n\n@Component({\n  selector: 'app-title',\n  templateUrl: './title.component.html',\n  styleUrls: ['./title.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TitleComponent implements OnInit {\n  @Input() content: ITitle;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/theme/mixins/amixin\";\n.title {\n  text-align: center;\n  &.style-v1,\n  &.style-v2,\n  &.style-v3,\n  &.style-v4,\n  &.style-v5,\n  &.style-v6 {\n    position: relative;\n    .title-header {\n      position: relative;\n      padding-bottom: 20px;\n      margin-bottom: 40px;\n    }\n    .line-style {\n      bottom: 0;\n      height: 1px;\n      position: absolute;\n      width: 33%;\n\n      &:before {\n        content: \"\";\n        display: block;\n        height: 1px;\n        position: absolute;\n        width: 100px;\n        @include transition(all, 0.4s, ease);\n      }\n      .mat-icon {\n        display: block;\n        font-size: 20px;\n        height: 40px;\n        line-height: 40px;\n        position: absolute;\n        text-align: center;\n        top: -20px;\n        width: 40px;\n      }\n    }\n    &:hover {\n      .line-style {\n        &:before {\n          width: 75%;\n        }\n      }\n    }\n    &.small {\n      .title-header {\n        font-size: 22px;\n      }\n    }\n  }\n  &.style-v1,\n  &.style-v2,\n  &.style-v3 {\n    // Center title\n    text-align: center;\n    .line-style {\n      left: 50%;\n      @include translateX(-50%);\n      &:before {\n        left: 50%;\n        @include translateX(-50%);\n      }\n    }\n    .mat-icon {\n      left: 50%;\n      @include translateX(-50%);\n    }\n  }\n  &.style-v1 {\n    // Dot between line bottom\n    .line-style {\n      span {\n        display: block;\n        height: 10px;\n        position: absolute;\n        top: -5px;\n        width: 10px;\n        -webkit-border-radius: 100% 100% 100% 100%;\n        -moz-border-radius: 100% 100% 100% 100%;\n        border-radius: 100% 100% 100% 100%;\n        left: 50%;\n        @include translateX(-50%);\n      }\n    }\n  }\n\n  &.style-v4,\n  &.style-v5,\n  &.style-v6,\n  &.style-v7 {\n    text-align: left;\n  }\n\n  &.style-v4 {\n    // Dot left line bottom\n    .line-style {\n      span {\n        display: block;\n\n        height: 10px;\n        position: absolute;\n        top: -5px;\n        width: 10px;\n        -webkit-border-radius: 100% 100% 100% 100%;\n        -moz-border-radius: 100% 100% 100% 100%;\n        border-radius: 100% 100% 100% 100%;\n      }\n    }\n  }\n\n  &.line-full-width {\n    .line-style {\n      width: 100% !important;\n    }\n    &:hover {\n      .line-style {\n        &:before {\n          width: 30%;\n        }\n      }\n    }\n  }\n  &.banner-title {\n    .title-header {\n      font-weight: 400;\n      font-size: 24px;\n      line-height: 33px;\n      text-align: center;\n      padding: 20px;\n    }\n    .line-style {\n      display: none;\n    }\n  }\n}\n",
                    "styleUrl": "./title.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"content\">\n  <div class=\"title\" [ngClass]=\"content.style\">\n    <h2 class=\"title-header\" [ngClass]=\"content.classes || 'mat-h2'\" [innerHTML]=\"content.label|safeHtml\"\n      [class.m-bottom-sm]=\"content.style === 'none'\"></h2>\n    <div class=\"line-style\" [class.m-top-sm]=\"content.icon\">\n      <mat-icon *ngIf=\"content.icon && content.style\">{{content.icon}}</mat-icon>\n      <span></span>\n    </div>\n  </div>\n</ng-container>\n"
        },
        {
            "name": "TreeComponent",
            "id": "component-TreeComponent-9a6ff76d2f31a6eb691004e03c6b45ccfe702982a650567918efa1cafca4870a3ba53718e1bff6b3e6200d6903467329e14c421bb7b4af2fa9a4793a23621d06",
            "file": "src/app/uiux/widgets/tree/tree.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tree",
            "styleUrls": [
                "./tree.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tree.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "ITree",
                    "decorators": []
                },
                {
                    "name": "defaultActive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "treeChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "default",
                    "defaultValue": "{\n    idField: 'value',\n    displayField: 'label',\n    childrenField: 'elements',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "tree",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'tree'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onActivate",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  OnInit,\n  Output,\n  EventEmitter,\n  ViewChild,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { ITree } from '@core/interface/widgets/ITree';\nimport { ScreenService } from '@core/service/screen.service';\n@Component({\n  selector: 'app-tree',\n  templateUrl: './tree.component.html',\n  styleUrls: ['./tree.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TreeComponent implements OnInit, AfterViewInit {\n  @Input() content: ITree;\n  @Input() defaultActive: number;\n  @Output() treeChange = new EventEmitter();\n  @ViewChild('tree') tree: any;\n\n  // https://angular2-tree.readme.io/docs/getting-started\n  default = {\n    idField: 'value',\n    displayField: 'label',\n    childrenField: 'elements',\n  };\n  options: any;\n  constructor(private screenService: ScreenService) {}\n\n  ngOnInit(): void {\n    if (this.screenService.isPlatformBrowser()) {\n      this.options = Object.assign(this.default, this.content.options);\n    }\n  }\n\n  ngAfterViewInit(): void {\n    if (this.screenService.isPlatformBrowser()) {\n      if (this.content.expandAll) {\n        this.tree.treeModel.expandAll();\n      }\n      if (this.defaultActive) {\n        this.tree.treeModel\n          .getNodeById(this.defaultActive)\n          .setActiveAndVisible();\n      }\n    }\n  }\n\n  onActivate(event: any): void {\n    const obj: any = {};\n    obj[`${this.content.key}`] = event.node.id;\n    obj.page = 0;\n    this.treeChange.emit(obj);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "div.tree {\n  padding-left: 16px;\n  padding-right: 16px;\n  position: relative;\n  font-size: 14px;\n  width: 100%;\n  box-sizing: border-box;\n  max-height: 500px;\n  overflow: auto;\n  &:before {\n    content: \"\";\n    position: absolute;\n    border-left: 1px dotted #23527c;\n    height: 100%;\n    top: -14px;\n    left: 20px;\n  }\n  ::ng-deep {\n    div.tree-children {\n      position: relative;\n      padding-left: 0;\n      margin-left: 16px;\n      &:before {\n        content: \"\";\n        position: absolute;\n        border-left: 1px dotted #23527c;\n        height: 100%;\n        top: -14px;\n        left: 5px;\n      }\n    }\n    tree-node {\n      > div .node-wrapper {\n        margin-left: 24px;\n        > .node-content-wrapper {\n          margin-left: 4px;\n        }\n      }\n      > div.tree-node-leaf .node-wrapper {\n        margin-left: 0;\n      }\n      > div:before {\n        content: \"\";\n        position: absolute;\n        border-bottom: 1px dotted #23527c;\n        width: 7px;\n        margin-top: 12px;\n        left: 7px;\n      }\n      > div .toggle-children-wrapper {\n        width: 13px;\n        height: 13px;\n        border: 1px solid #23527c;\n        position: absolute;\n        left: 15px;\n        margin-top: 5px;\n        margin-left: 0;\n        display: inline-block;\n        background-color: #fff;\n        z-index: 1;\n        box-sizing: border-box;\n        &:before {\n          content: \"\";\n          display: inline-block;\n          width: 7px;\n          border-top: 1px solid #23527c;\n          position: absolute;\n          top: 5px;\n          left: 2px;\n        }\n        &.toggle-children-wrapper-collapsed:after {\n          content: \"\";\n          display: inline-block;\n          height: 7px;\n          border-left: 1px solid #23527c;\n          position: absolute;\n          top: 2px;\n          left: 5px;\n        }\n        .toggle-children {\n          display: none;\n        }\n      }\n      > div .node-content-wrapper {\n        margin-left: 4px;\n      }\n    }\n  }\n}\n\n.actions {\n  float: right;\n}\n",
                    "styleUrl": "./tree.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"tree-inner p-y-sm\" *ngIf=\"content\">\n  <label class=\"mat-h3 p-x-sm\">{{content.label}}</label>\n  <div class=\"actions\">\n    <button mat-button (click)=\"tree.treeModel.expandAll()\">\n      展开\n    </button>\n    <button mat-button (click)=\"tree.treeModel.collapseAll()\">\n      折叠\n    </button>\n  </div>\n  <div class=\"tree\" *ngIf=\"content.nodes.length\">\n    <tree-root #tree [nodes]=\"content.nodes\" [options]=\"options\" (activate)=\"onActivate($event)\">\n    </tree-root>\n  </div>\n</div>\n"
        },
        {
            "name": "TreeListComponent",
            "id": "component-TreeListComponent-2e2c502f75ee9e0a625353ec5e283d5cf6f57e9f51dcc0ea496432b435df321f12250a8d8770ca64aae47a0b2d4b449bcac40a427d972977472b7df5907b43eb",
            "file": "src/app/uiux/combs/list/tree-list/tree-list.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tree-list",
            "styleUrls": [
                "./tree-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tree-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "defaultValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "formState",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "nodes",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "nodeService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NodeService",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "pager",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "routerService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RouteService",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "initForm",
                    "args": [
                        {
                            "name": "items",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "nodeSearch",
                    "args": [
                        {
                            "name": "params",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPageChange",
                    "args": [
                        {
                            "name": "page",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTreeChange",
                    "args": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackByFn",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateList",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApiParams",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getDeepValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getFormParams",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Params",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getParams",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getParamsState",
                    "args": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getUrlQuery",
                    "args": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "handlerPager",
                    "args": [
                        {
                            "name": "pager",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pager",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "initFormValueWithUrlQuery",
                    "args": [
                        {
                            "name": "query",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "controls",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "controls",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "row",
                    "args": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "padding",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'4rem'"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "padding",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'4rem'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { isEmpty, omitBy } from 'lodash-es';\nimport { NodeService } from '@core/service/node.service';\nimport { RouteService } from '@core/service/route.service';\nimport { BaseComponent } from '@uiux/base/base.widget';\nimport { ScreenService } from '@core/service/screen.service';\nimport { Subject } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { AppState } from '@core/mobx/AppState';\nimport { FormGroup } from '@angular/forms';\nimport { FormService } from '@core/service/form.service';\nimport { CORE_CONFIG } from '@core/token/core.config';\nimport { ICoreConfig } from '@core/mobx/IAppConfig';\n\n@Component({\n  selector: 'app-tree-list',\n  templateUrl: './tree-list.component.html',\n  styleUrls: ['./tree-list.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TreeListComponent\n  extends BaseComponent\n  implements OnInit, OnDestroy\n{\n  @Input() content: any;\n  nodes = [];\n  loading = false;\n  page: number;\n  pager: any;\n  formState: any = {};\n  form: FormGroup;\n  defaultValue: any;\n\n  destroy$: Subject<boolean> = new Subject<boolean>();\n  constructor(\n    public nodeService: NodeService,\n    private router: ActivatedRoute,\n    public routerService: RouteService,\n    private screenService: ScreenService,\n    private cd: ChangeDetectorRef,\n    private appState: AppState,\n    private formService: FormService,\n    @Inject(CORE_CONFIG) private coreConfig: ICoreConfig\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    if (this.screenService.isPlatformBrowser()) {\n      this.router.queryParams\n        .pipe(distinctUntilChanged())\n        .subscribe((query: any) => {\n          this.initForm(\n            this.initFormValueWithUrlQuery(query, this.content.tree)\n          );\n          this.defaultValue = query;\n          this.page = query.page || 0;\n          const queryOpt = omitBy(\n            Object.assign(\n              {\n                page: this.page,\n              },\n              query\n            ),\n            isEmpty\n          );\n          this.nodeSearch(queryOpt);\n        });\n    }\n  }\n\n  initForm(items: any[]): void {\n    this.form = this.formService.toFormGroup(items);\n    this.form.valueChanges\n      .pipe(\n        debounceTime(1000),\n        distinctUntilChanged(),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((value) => {\n        this.nodeSearch(value);\n      });\n  }\n\n  nodeSearch(params: any): void {\n    this.loading = true;\n    this.nodeService\n      .search('content', this.getApiParams(params))\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(\n        (data) => {\n          this.updateList(data);\n          this.routerService.updateQueryParams(\n            this.getUrlQuery(this.form.value)\n          );\n          this.loading = false;\n          this.cd.detectChanges();\n        },\n        (error) => {\n          this.loading = false;\n          this.cd.detectChanges();\n        }\n      );\n    this.cd.detectChanges();\n  }\n\n  updateList(data: any): void {\n    const pager = data.pager;\n    this.pager = this.handlerPager(pager);\n    this.nodes = data.rows.map((item: any) => {\n      return {\n        link: {\n          label: item.title,\n          href: item.url,\n          target: '_blank',\n        },\n        created: item.created,\n        body: item.body,\n        user: item.user,\n        type: item.type || '',\n        category: item?.category,\n        tags: item?.field_tags,\n        actions: item.actions || [],\n        img: {\n          src: item?.img || this.coreConfig.defaultThumb,\n          alt: item?.title,\n          href: item?.url,\n          target: '_blank',\n          classes: 'object-fit',\n        },\n      };\n    });\n    this.cd.detectChanges();\n  }\n\n  onPageChange(page: any): void {\n    this.formState = Object.assign(this.formState, { page });\n    this.nodeSearch(this.formState);\n  }\n\n  onSelectChange(event: any): void {\n    const option: any = {};\n    option[event.key] = event.value;\n    option.page = 0;\n    this.formState = Object.assign(this.formState, option);\n    this.nodeSearch(this.formState);\n  }\n\n  onTreeChange(option: any): void {\n    this.form.patchValue(option);\n  }\n\n  trackByFn(index: number, item: any): number {\n    return index;\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../../theme/variable/_breakpoint.scss\";\n\n.filter {\n  border: 1px solid #ddd;\n}\n.tree-list {\n  mat-selection-list {\n    padding: 8px;\n  }\n  mat-list-option {\n    display: inline-block;\n    width: auto;\n    &:first-child {\n      width: 100% !important;\n    }\n    @media #{$gt-sm} {\n      text-align: center;\n      width: 20%;\n    }\n  }\n  ::ng-deep {\n    .search-list {\n      max-width: none;\n    }\n  }\n\n  .sticky {\n    position: relative;\n    @media #{$gt-sm} {\n      position: sticky;\n      position: -webkit-sticky;\n      top: 70px;\n      z-index: 10;\n    }\n  }\n}\n",
                    "styleUrl": "./tree-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "routerService",
                        "type": "RouteService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appState",
                        "type": "AppState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "coreConfig",
                        "type": "ICoreConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "routerService",
                        "type": "RouteService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appState",
                        "type": "AppState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "coreConfig",
                        "type": "ICoreConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"tree-list bg-shadow\">\n  <div class=\"container\">\n    <div fxLayoutAlign=\"space-bewteen start\" fxFlex=\"100\" fxLayout=\"row wrap\">\n      <div fxLayout=\"row wrap\" class=\"left {{content.tree.length <2?'sticky':''}}\" fxFlex.lt-md=\"0 0 100\"\n        fxFlex.gt-sm=\"0 0 25%\">\n        <app-tree class=\"m-y\" [defaultActive]=\"defaultValue[tree.key]\"\n          *ngFor=\"let tree of content.tree; trackBy: trackByFn\" (treeChange)=\"onTreeChange($event)\" fxFlex=\"0 1 100\"\n          [content]=\"tree\">\n        </app-tree>\n      </div>\n      <div fxLayout=\"row wrap\" class=\"main\" fxFlex.lt-md=\"0 0 100\" fxFlex.gt-sm=\"0 0 {{content.tree ? '75%':'100%'}}\">\n        <div class=\"filter\" fxFlex=\"0 1 100\" *ngFor=\"let filter of content.filter\">\n          <mat-selection-list (selectionChange)=\"onSelectChange({key:filter.key, value: $event.option.value})\"\n            [multiple]=\"false\">\n            <mat-list-option *ngFor=\"let item of filter.options\" [value]=\"item.value\">\n              {{item.label}}\n            </mat-list-option>\n          </mat-selection-list>\n        </div>\n        <app-search-list fxFlex=\"0 1 100\" [content]=\"nodes\" [loading]=\"loading\" [pager]=\"pager\"\n          (pageChange)=\"onPageChange($event)\">\n        </app-search-list>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "UserComponent",
            "id": "component-UserComponent-628d80ffea25294eae0a5fbfa86d78c21b65a9bbaefa0d89aa35c487328ac8ce91c0c17706f92f747b59237410bd1d92eb861a06d136e4cbcf51aa9fe2bc0d92",
            "file": "src/app/modules/user/user.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user",
            "styleUrls": [
                "./user.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "getBanner",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getRoles",
                    "args": [
                        {
                            "name": "roles",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roles",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUser",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  OnDestroy,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Inject,\n} from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UserService } from '@core/service/user.service';\nimport { UserState } from '@core/mobx/user/UserState';\nimport { ScreenService } from '@core/service/screen.service';\nimport { isEmpty } from 'lodash-es';\nimport { CORE_CONFIG } from '@core/token/core.config';\nimport { ICoreConfig } from '@core/mobx/IAppConfig';\n\n@Component({\n  selector: 'app-user',\n  templateUrl: './user.component.html',\n  styleUrls: ['./user.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class UserComponent implements OnInit, OnDestroy {\n  user: any;\n  id: any;\n  constructor(\n    private cd: ChangeDetectorRef,\n    private route: Router,\n    private screenService: ScreenService,\n    private userService: UserService,\n    private userState: UserState,\n    @Inject(CORE_CONFIG) private coreConfig: ICoreConfig\n  ) {}\n\n  ngOnInit(): void {\n    if (this.screenService.isPlatformBrowser()) {\n      this.getUser();\n      this.userState.user$.subscribe((user) => {\n        if (!user.authenticated) {\n          setTimeout(() => {\n            this.route.navigate(['user/login']);\n          }, 2000);\n        } else {\n          window.location.reload();\n        }\n      });\n    }\n  }\n\n  getUser(): any {\n    const people = {};\n    this.userService\n      .getUserById(\n        this.userState.currentUser.current_user.uid,\n        this.userState.csrfToken\n      )\n      .subscribe((res) => {\n        const info = res.data[0];\n        if (!info) {\n          return;\n        }\n        const profile = {\n          bannerBg: this.getBanner(),\n          avatar: {\n            src: info?.user_picture?.uri?.url || this.userState.defaultAvatar,\n            alt: info.name,\n          },\n          name: info.name,\n          subTitle: info.display_name,\n          details: {\n            label: '个人资料',\n            elements: [\n              {\n                icon: {\n                  color: 'warn',\n                  svg: 'arrow_right',\n                  inline: true,\n                },\n                label: '邮箱',\n                content: info.mail || '没有填写',\n              },\n              {\n                icon: {\n                  color: 'warn',\n                  svg: 'arrow_right',\n                  inline: true,\n                },\n                label: '手机',\n                content: info.phone_number || '没有填写',\n              },\n              {\n                icon: {\n                  color: 'warn',\n                  svg: 'arrow_right',\n                  inline: true,\n                },\n                label: '角色',\n                content: this.getRoles(info.roles),\n              },\n            ],\n          },\n        };\n        this.user = Object.assign(people, profile);\n        this.cd.detectChanges();\n      });\n  }\n\n  getBanner(): any {\n    return {\n      classes: 'bg-fill-width overlay overlay-80',\n      img: {\n        hostClasses: 'bg-center',\n        src:\n          this.coreConfig?.user?.banner ||\n          '/assets/images/16-9/business-14.jpeg',\n        alt: 'page title',\n      },\n    };\n  }\n\n  getRoles(roles: any): string[] {\n    if (!roles || isEmpty(roles.data)) {\n      return ['注册用户'];\n    }\n    return roles.map((rule: any) => {\n      return rule.label;\n    });\n  }\n\n  logout(): void {\n    this.userState.logout();\n  }\n\n  ngOnDestroy(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/theme/mixins/amixin\";\n@import \"/src/theme/variable/breakpoint\";\n\n.box {\n  ::ng-deep {\n    img {\n      width: 110px;\n      height: 110px;\n      @include border-radius(50%, 50%, 50%, 50%);\n    }\n  }\n}\n\n.profile-banner {\n  overflow: hidden;\n  padding: 80px 0;\n  @media #{$gt-sm} {\n    padding: 180px 0;\n  }\n}\n\n.left {\n  @media #{$gt-sm} {\n    position: relative;\n    top: -295px;\n    border-radius: 4px;\n  }\n}\n\n.label {\n  white-space: nowrap;\n}\n\n.user-menu {\n  .item {\n    margin-bottom: 2rem;\n    a {\n      border-radius: 6px;\n    }\n  }\n}\n",
                    "styleUrl": "./user.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userState",
                        "type": "UserState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "coreConfig",
                        "type": "ICoreConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userState",
                        "type": "UserState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "coreConfig",
                        "type": "ICoreConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"user\">\n  <div class=\"profile-banner position-relative\">\n    <app-bg *ngIf=\"user?.bannerBg\" [content]=\"user.bannerBg\">\n      <app-img [content]=\"user.bannerBg.img\"></app-img>\n    </app-bg>\n  </div>\n  <div class=\"profile-1v1 position-relative p-y\">\n    <div class=\"container\">\n      <div class=\"profile\" fxLayoutAlign=\"space-between start\" fxLayout=\"row wrap\">\n        <div class=\"left\" fxFlex.lt-md=\"0 0 100\" fxFlex.gt-sm=\"0 0 30\">\n          <div class=\"box p-y p-x text-center\" *ngIf=\"user\">\n            <app-img [content]=\"user.avatar\"></app-img>\n            <h2 class=\"mat-h2 m-bottom-0 m-top-xs\">{{user.name}}</h2>\n            <div class=\"subTitle\">{{user.subTitle}}</div>\n          </div>\n          <mat-divider></mat-divider>\n          <div class=\"left-item p-y-sm p-x-sm\" *ngIf=\"user?.details\">\n            <div class=\"item-header bold m-bottom-sm\">{{user.details.label}}</div>\n            <div class=\"list\">\n              <div fxLayoutAlign=\"start start\" *ngFor=\"let item of user.details.elements\">\n                <app-icon [content]=\"item.icon\"></app-icon>\n                <div class=\"label m-right-xs bold\">{{item.label}}:</div>\n                <div>{{item.content}}</div>\n              </div>\n            </div>\n          </div>\n          <div class=\"user-menu p-x-sm m-bottom\" fxLayout=\"row wrap\" fxLayoutAlign=\"space-between\">\n            <div class=\"item\" fxFlex.lt-md=\"100\" fxFlex.gt-sm=\"48\">\n              <a class=\"p-y-sm p-x-sm\" fxLayout=\"column\" fxLayoutAlign=\"center center\" [routerLink]=\"['favorite']\"\n                [routerLinkActive]=\"['active']\">\n                <mat-icon class=\"p-bottom-xs\">favorite</mat-icon>\n                <span>收藏</span>\n              </a>\n            </div>\n            <div class=\"item\" fxFlex.lt-md=\"100\" fxFlex.gt-sm=\"48\">\n              <a class=\"p-y-sm p-x-sm\" fxLayout=\"column\" fxLayoutAlign=\"center center\" [routerLink]=\"['pay']\"\n                [routerLinkActive]=\"['active']\">\n                <mat-icon class=\"p-bottom-xs\">shopping_cart</mat-icon>\n                <span>购买</span>\n              </a>\n            </div>\n            <div class=\"item\" fxFlex.lt-md=\"100\" fxFlex.gt-sm=\"48\">\n              <a class=\"p-y-sm p-x-sm\" fxLayout=\"column\" fxLayoutAlign=\"center center\" (click)=\"logout()\">\n                <mat-icon class=\"p-bottom-xs\">exit_to_app</mat-icon>\n                <span>退出</span>\n              </a>\n            </div>\n          </div>\n        </div>\n        <div class=\"right\" fxFlex.lt-md=\"0 0 100\" fxFlex.gt-sm=\"0 0 calc(100% - 30% - 4rem)\">\n          <div class=\"content\">\n            <router-outlet></router-outlet>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "UserFavoriteComponent",
            "id": "component-UserFavoriteComponent-288abf7ee77f5f549e97a722d1c81f38c414901039d6ee49ac1a65a4abd12fc7c9c2a1f4a1ad4052489fc8a584c66434cb4620b31e9156f64d9b734447fe6f2f",
            "file": "src/app/modules/user/user-favorite/user-favorite.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-favorite",
            "styleUrls": [
                "./user-favorite.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-favorite.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "pager",
                    "defaultValue": "{\n    itemsPerPage: 20,\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "getContent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  OnInit,\n  ChangeDetectorRef,\n  OnDestroy,\n} from '@angular/core';\nimport { NodeService } from '@core/service/node.service';\nimport { takeUntil } from 'rxjs/operators';\nimport { formatDate } from '@angular/common';\nimport { ScreenService } from '@core/service/screen.service';\nimport { Subject } from 'rxjs';\nimport { UserState } from '@core/mobx/user/UserState';\n@Component({\n  selector: 'app-user-favorite',\n  templateUrl: './user-favorite.component.html',\n  styleUrls: ['./user-favorite.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class UserFavoriteComponent implements OnInit, OnDestroy {\n  content: any;\n  id: string;\n  loading: boolean;\n  pager = {\n    itemsPerPage: 20,\n  };\n\n  destroy$: Subject<boolean> = new Subject<boolean>();\n  constructor(\n    private cd: ChangeDetectorRef,\n    private userState: UserState,\n    private nodeService: NodeService,\n    private screenService: ScreenService\n  ) {}\n\n  ngOnInit(): void {\n    if (this.screenService.isPlatformBrowser()) {\n      this.getContent();\n    }\n  }\n\n  getContent(): void {\n    this.loading = true;\n    const path = this.nodeService.apiUrlConfig.flaggingGetPath;\n    const params = [\n      `filter[uid.id]=${this.userState.currentUser.id}`,\n      `include=flagged_entity`,\n      `sort=-created`,\n      `jsonapi_include=1`,\n    ].join('&');\n    this.nodeService\n      .getNodes(path, 'favorite', params, this.userState.csrfToken)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(\n        (res) => {\n          const lists = res.data.filter((item: any) => {\n            return item.flagged_entity?.status ? true : false;\n          });\n          this.content = lists.map((item: any) => {\n            const node = item.flagged_entity;\n            return {\n              type: 'list-thin',\n              link: {\n                label: node.title,\n                href: this.nodeService.getNodePath(node),\n              },\n              meta: [\n                {\n                  label: node.uid.dispaly_name || node.uid.name,\n                },\n                {\n                  label: formatDate(node.changed, 'yyyy-MM-dd', 'en-US'),\n                },\n              ],\n              actions: [\n                {\n                  type: 'flag',\n                  label: '收藏',\n                  icon: {\n                    name: 'star',\n                    inline: true,\n                  },\n                  params: {\n                    type: item.type,\n                    entity_type: item.entity_type,\n                    entity_id: item.entity_id,\n                    relationships: {\n                      flagged_entity: {\n                        type: node.type,\n                        id: node.id,\n                      },\n                    },\n                  },\n                },\n                {\n                  type: 'share',\n                  button: {\n                    icon: 'share',\n                    label: '分享',\n                  },\n                  params: {\n                    url: `${\n                      this.nodeService.apiUrl\n                    }${this.nodeService.getNodePath(node)}`,\n                  },\n                },\n              ],\n            };\n          });\n          this.loading = false;\n          this.cd.detectChanges();\n        },\n        (error) => {\n          console.log(error);\n        }\n      );\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./user-favorite.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userState",
                        "type": "UserState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userState",
                        "type": "UserState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-list-thin *ngIf=\"content\" [pager]=\"pager\" [content]=\"content\" [loading]=\"loading\"></app-list-thin>\n"
        },
        {
            "name": "UserHomeComponent",
            "id": "component-UserHomeComponent-4cd3e00b44ce6694dc9a7808526f3686d49404ea1a76a42058bd89f603df2c1a70c52c8647164ab9288dfbc32845296c374a336643965f086744158f99d91376",
            "file": "src/app/modules/user/user-home/user-home.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-home",
            "styleUrls": [
                "./user-home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "content",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "getContent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ScreenService } from '@core/service/screen.service';\n\n@Component({\n  selector: 'app-user-home',\n  templateUrl: './user-home.component.html',\n  styleUrls: ['./user-home.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class UserHomeComponent implements OnInit {\n  content: any[] = [];\n  constructor(private screenService: ScreenService) {}\n\n  ngOnInit(): void {\n    if (this.screenService.isPlatformBrowser()) {\n      this.getContent();\n    }\n  }\n\n  getContent(): void {\n    this.content[0] = {\n      label: '',\n      type: 'text',\n      spacer: 'none',\n      body: '<p>暂无简介</p>',\n    };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./user-home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"user-home\" *ngIf=\"content\">\n  <div class=\"item m-bottom\" *ngFor=\"let item of content\">\n    <div class=\"mat-h2 label m-y-sm bold\">{{item.label}}</div>\n    <app-dynamic-widgets [content]=\"item\"></app-dynamic-widgets>\n  </div>\n</div>\n"
        },
        {
            "name": "UserMenuComponent",
            "id": "component-UserMenuComponent-33bfcb3b2f7d45373a6a51a6567a72ce44cd3487922f11667fe0e484572db68761efc7343a3df9bb4db83ddd3ab10c7a339aef0664b26233545ec70fe563aa7e",
            "file": "src/app/core/branding/header/menu/user-menu/user-menu.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-menu",
            "styleUrls": [
                "./user-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "screen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScreenState",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "userState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserState",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "utilities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UtilitiesService",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openDialog",
                    "args": [
                        {
                            "name": "dialog",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dialog",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  OnInit,\n  OnDestroy,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { UserState } from '@core/mobx/user/UserState';\nimport { MatDialog } from '@angular/material/dialog';\nimport { UtilitiesService } from '@core/service/utilities.service';\nimport { ScreenState } from '@core/mobx/screen/ScreenState';\nimport { DialogComponent } from '@uiux/widgets/dialog/dialog.component';\nimport { DynamicFormComponent } from '@uiux/combs/other/dynamic-form/dynamic-form.component';\nimport { DialogService } from '@core/service/dialog.service';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-user-menu',\n  templateUrl: './user-menu.component.html',\n  styleUrls: ['./user-menu.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class UserMenuComponent implements OnInit, OnDestroy {\n  @Input() content: any;\n  dialogRef: any;\n\n  destroy$: Subject<boolean> = new Subject<boolean>();\n  constructor(\n    public userState: UserState,\n    public utilities: UtilitiesService,\n    public screen: ScreenState,\n    public dialog: MatDialog,\n    private dialogService: DialogService,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    this.userState.user$.subscribe((user) => {\n      this.cd.markForCheck();\n    });\n  }\n\n  logout(): void {\n    this.userState.logout();\n  }\n\n  openDialog(dialog: any): void {\n    this.dialogRef = this.dialog.open(DialogComponent, {\n      width: '600px',\n      data: {\n        renderInputComponent: DynamicFormComponent,\n        inputData: {\n          content: dialog.content,\n          actions: dialog.actions,\n        },\n      },\n    });\n    this.dialogRef\n      .afterClosed()\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(() => console.log('dialog after'));\n    this.dialogService.dialogState$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((state) => {\n        if (!state) {\n          this.dialogRef.close();\n        }\n      });\n  }\n\n  get userPage(): any[] {\n    return [`/my`];\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.unsubscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".user {\n  ::ng-deep {\n    .mat-button-wrapper {\n      padding: 0;\n\n      .name {\n        font-size: 2rem;\n        line-height: 4rem;\n        padding: 0;\n        margin: 0;\n        text-transform: uppercase;\n        font-weight: normal;\n      }\n    }\n  }\n}\n.user-picture {\n  height: 30px;\n  width: 30px;\n  border-radius: 50%;\n  cursor: pointer;\n}\n",
                    "styleUrl": "./user-menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userState",
                        "type": "UserState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilities",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screen",
                        "type": "ScreenState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "userState",
                        "type": "UserState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilities",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screen",
                        "type": "ScreenState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "userPage": {
                    "name": "userPage",
                    "getSignature": {
                        "name": "userPage",
                        "type": "[]",
                        "returnType": "any[]",
                        "line": 73
                    }
                }
            },
            "templateData": "<div class=\"user\">\n  <ng-container *ngIf=\"!userState.authenticated\">\n    <button aria-label=\"user login\" color=\"primary\" [routerLink]=\"['/my/login']\" mat-mini-fab mat-button>\n      <mat-icon>person</mat-icon>\n    </button>\n  </ng-container>\n  <ng-container *ngIf=\"userState.authenticated\">\n    <button aria-label=\"user name\" *ngIf=\"!userState.picture; else picture\" mat-mini-fab color=\"primary\" mat-button\n      [matMenuTriggerFor]=\"menu\">\n      <h3 class=\"name\">\n        {{utilities.getIndexTitle(userState?.currentUser?.display_name || 'N')}}</h3>\n    </button>\n    <ng-template #picture>\n      <img class=\"user-picture\" [matMenuTriggerFor]=\"menu\" [src]=\"userState.picture\"\n        alt=\"{{userState.currentUser.display_name}}\">\n    </ng-template>\n    <mat-menu #menu=\"matMenu\" class=\"user-dropdown\">\n      <a mat-menu-item [routerLink]=\"userPage\">\n        <mat-icon>account_circle</mat-icon>{{userState.currentUser?.display_name}}\n      </a>\n      <ng-container *ngFor=\"let item of content\">\n        <button aria-label=\"dialog\" *ngIf=\"item.dialog;else link\" mat-menu-item (click)=\"openDialog(item.dialog)\">\n          <app-icon [content]=\"item.icon\"></app-icon>{{item.label}}\n        </button>\n        <ng-template #link>\n          <button aria-label=\"user link\" mat-menu-item>\n            <app-icon [content]=\"item.icon\"></app-icon>\n            <app-link [content]=\"item\"></app-link>\n          </button>\n        </ng-template>\n      </ng-container>\n      <button aria-label=\"logout\" mat-menu-item (click)=\"logout()\">\n        <mat-icon>exit_to_app</mat-icon>退出\n      </button>\n    </mat-menu>\n  </ng-container>\n</div>\n"
        },
        {
            "name": "UserPayComponent",
            "id": "component-UserPayComponent-5f1a4a37d5a457602e01260253a05c931001d9c74a58467b3ed797abff3276eb441a8f493ebcf97c0a5d927c7e7eb3a20d9543e9a51384a49bbdcfb6ef8a6fba",
            "file": "src/app/modules/user/user-pay/user-pay.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-pay",
            "styleUrls": [
                "./user-pay.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-pay.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "pager",
                    "defaultValue": "{\n    itemsPerPage: 20,\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "getContent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { formatDate } from '@angular/common';\nimport { Component, OnInit, ChangeDetectorRef } from '@angular/core';\nimport { UserState } from '@core/mobx/user/UserState';\nimport { NodeService } from '@core/service/node.service';\nimport { ScreenService } from '@core/service/screen.service';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-user-pay',\n  templateUrl: './user-pay.component.html',\n  styleUrls: ['./user-pay.component.scss'],\n})\nexport class UserPayComponent implements OnInit {\n  content: any;\n  loading: boolean;\n  id: string;\n  pager = {\n    itemsPerPage: 20,\n  };\n\n  destroy$: Subject<boolean> = new Subject<boolean>();\n  constructor(\n    private screenService: ScreenService,\n    private nodeService: NodeService,\n    private userState: UserState,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    if (this.screenService.isPlatformBrowser()) {\n      this.getContent();\n    }\n  }\n\n  getContent(): void {\n    this.loading = true;\n    const path = this.nodeService.apiUrlConfig.flaggingGetPath;\n\n    const params = [\n      `filter[uid.id]=${this.userState.currentUser.id}`,\n      `include=flagged_entity`,\n      `sort=-created`,\n      `jsonapi_include=1`,\n    ].join('&');\n    this.nodeService\n      .getNodes(path, 'payment', params, this.userState.csrfToken)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(\n        (res) => {\n          const lists = res.data.filter((item: any) => {\n            return item.flagged_entity?.status ? true : false;\n          });\n          this.content = lists.map((item: any) => {\n            const node = item.flagged_entity;\n            return {\n              type: 'list-thin',\n              link: {\n                label: node.title,\n                href: this.nodeService.getNodePath(node),\n              },\n              meta: [\n                {\n                  label: node.uid.dispaly_name || node.uid.name,\n                },\n                {\n                  label: formatDate(node.changed, 'yyyy-MM-dd', 'en-US'),\n                },\n              ],\n              actions: [\n                {\n                  type: 'share',\n                  button: {\n                    icon: 'share',\n                    label: '分享',\n                  },\n                  params: {\n                    url: `${\n                      this.nodeService.apiUrl\n                    }${this.nodeService.getNodePath(node)}`,\n                  },\n                },\n                {\n                  type: 'download',\n                  label: '下载',\n                  icon: {\n                    name: 'file_download',\n                    inline: true,\n                  },\n                  elements: [\n                    {\n                      type: 'link',\n                      label: 'Doc',\n                      icon: {\n                        name: 'description',\n                      },\n                      href: `/print/view/word_docx/print/doc?id=${node.drupal_internal__nid}`,\n                    },\n                    {\n                      type: 'link',\n                      label: 'Pdf',\n                      icon: {\n                        name: 'picture_as_pdf',\n                      },\n                      href: `/print/view/pdf/print/pdf?id=${node.drupal_internal__nid}`,\n                    },\n                  ],\n                },\n              ],\n            };\n          });\n          this.loading = false;\n          this.cd.detectChanges();\n        },\n        (error) => {\n          console.log(error);\n        }\n      );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./user-pay.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userState",
                        "type": "UserState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userState",
                        "type": "UserState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-list-thin *ngIf=\"content\" [pager]=\"pager\" [content]=\"content\" [loading]=\"loading\"></app-list-thin>\n"
        },
        {
            "name": "VideoBgComponent",
            "id": "component-VideoBgComponent-2fae06298156e229a26de0921445aec5a285ad71a29d30a32e0c0a88aee5396f930495f152c69ef2a9cba66daa7ae94c993da03c7d1a1daa7c87a327c7c8fb16",
            "file": "src/app/uiux/combs/video/video-bg/video-bg.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-video-bg",
            "styleUrls": [
                "./video-bg.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./video-bg.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { ScreenService } from '@core/service/screen.service';\n@Component({\n  selector: 'app-video-bg',\n  templateUrl: './video-bg.component.html',\n  styleUrls: ['./video-bg.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VideoBgComponent implements OnInit, AfterViewInit, OnDestroy {\n  @Input() content: any;\n\n  constructor(private screenService: ScreenService) {}\n  ngOnInit(): void {}\n\n  ngAfterViewInit(): void {\n    if (this.screenService.isPlatformBrowser()) {\n    }\n  }\n\n  ngOnDestroy(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/theme/variable/breakpoint\";\n.video-bg {\n  overflow: hidden;\n  min-height: 280px;\n  @media #{$gt-md} {\n    min-height: 400px;\n  }\n}\n.video-js {\n  position: absolute;\n  top: -50%;\n  left: -50%;\n  width: 200% !important;\n  height: 200% !important;\n  max-width: none !important;\n  video {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: 0;\n    margin: auto;\n    min-height: 50%;\n    min-width: 50%;\n  }\n}\n.layer {\n  z-index: 1;\n  background: #000;\n  opacity: 0.1;\n  position: absolute;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  top: 0;\n}\n\n.inner {\n  z-index: 10;\n}\n",
                    "styleUrl": "./video-bg.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "screenService",
                        "type": "ScreenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"video-bg position-relative\" *ngIf=\"content\">\n  <a class=\"anchor\" *ngIf=\"content.id\" [id]=\"content.id\"></a>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n  <div class=\"layer\"></div>\n  <video class=\"video-js\" autoplay muted loop preload=\"auto\">\n    <source src=\"{{content?.source?.src}}\" type=\"{{content?.source?.type}}\">\n  </video>\n  <div class=\"inner position-relative\" ngClass.gt-sm=\"xy-center\" ngClass.lt-md=\"y-center\">\n    <app-dynamic-combs [content]=\"content.widget\"></app-dynamic-combs>\n  </div>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n</div>\n"
        },
        {
            "name": "ViewListComponent",
            "id": "component-ViewListComponent-1163594d19155a9e5683d7799cd53fb2bc0b37e1fa795ce979355d88d06ba6221e15ef24f669aad9bcf2b81f0a2e6b61330b765712f09d83e570a50b071bda4b",
            "file": "src/app/uiux/widgets/view-list/view-list.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-view-list",
            "styleUrls": [
                "./view-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./view-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "noAuth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "pager",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "searchEntry",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "table",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getViews",
                    "args": [
                        {
                            "name": "options",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPageChange",
                    "args": [
                        {
                            "name": "page",
                            "type": "PageEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "PageEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApiParams",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getDeepValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getFormParams",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Params",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getParams",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getParamsState",
                    "args": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getUrlQuery",
                    "args": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formValues",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "handlerPager",
                    "args": [
                        {
                            "name": "pager",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pager",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "initFormValueWithUrlQuery",
                    "args": [
                        {
                            "name": "query",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "controls",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "controls",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "row",
                    "args": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "padding",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'4rem'"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "padding",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'4rem'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { formatDate } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { PageEvent } from '@angular/material/paginator';\nimport { UserState } from '@core/mobx/user/UserState';\nimport { FormService } from '@core/service/form.service';\nimport { NodeService } from '@core/service/node.service';\nimport { BaseComponent } from '@uiux/base/base.widget';\nimport { of, Subject } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  takeUntil,\n  catchError,\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'app-view-list',\n  templateUrl: './view-list.component.html',\n  styleUrls: ['./view-list.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ViewListComponent extends BaseComponent implements OnInit {\n  @Input() content: any;\n  form: FormGroup;\n  searchEntry: any;\n  table: any;\n  loading: boolean;\n  pager: any;\n  noAuth: boolean;\n  destroy$: Subject<boolean> = new Subject<boolean>();\n\n  constructor(\n    private nodeService: NodeService,\n    private userState: UserState,\n    private cd: ChangeDetectorRef,\n    private formService: FormService\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.initForm();\n    this.getViews();\n  }\n\n  initForm(): void {\n    if (this.content.form) {\n      this.form = this.formService.toFormGroup(this.content.form);\n      this.form.valueChanges\n        .pipe(\n          debounceTime(1000),\n          distinctUntilChanged(),\n          takeUntil(this.destroy$)\n        )\n        .subscribe((res) => {\n          if (res.start) {\n            res.start = formatDate(res.start, 'yyyy-MM-dd', 'en-US');\n          }\n          if (res.end) {\n            res.end = formatDate(res.end, 'yyyy-MM-dd', 'en-US');\n          }\n          this.getViews(res);\n        });\n    }\n  }\n\n  getViews(options = {}): void {\n    this.loading = true;\n    const params = this.getApiParams(options);\n    this.cd.detectChanges();\n    this.nodeService\n      .search(this.content.params.apiType, params, this.userState.csrfToken)\n      .pipe(\n        catchError((error: any) => {\n          if (error.status === 403) {\n            return of(false);\n          }\n          return of(error.status);\n        })\n      )\n      .subscribe((res) => {\n        if (!res) {\n          this.noAuth = true;\n          this.loading = false;\n          this.cd.detectChanges();\n          return;\n        }\n        this.table = {\n          header: this.content.header,\n          elements: res.rows,\n        };\n        this.pager = res.pager;\n        this.loading = false;\n        this.cd.detectChanges();\n      });\n  }\n\n  clear(): void {\n    this.form.reset();\n  }\n\n  onPageChange(page: PageEvent): void {\n    this.getViews({\n      page: page.pageIndex,\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".view-list {\n  position: relative;\n  min-height: 600px;\n  ::ng-deep .dynamic-table {\n    min-height: 600px;\n  }\n  .loading-inner {\n    position: absolute;\n    left: 50%;\n    top: 25%;\n  }\n}\n\n.view {\n  position: relative;\n}\n",
                    "styleUrl": "./view-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userState",
                        "type": "UserState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "nodeService",
                        "type": "NodeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userState",
                        "type": "UserState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"view-list\" *ngIf=\"content\">\n  <a class=\"anchor\" *ngIf=\"content.id\" [id]=\"content.id\"></a>\n  <app-bg-img [content]=\"content.bg\"></app-bg-img>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n  <div class=\"container\" fxLayout=\"row wrap\">\n    <app-text [content]=\"content.text\" *ngIf=\"content.text\"></app-text>\n    <div class=\"filter\" *ngIf=\"content.form\" fxFlex.gt-sm=\"0 0 100\" fxFlex.lt-md=\"100\" fxLayout.gt-sm=\"row\"\n      fxLayout.lt-md=\"column\" fxLayoutAlign=\"space-between center\">\n      <div class=\"filter-item\" fxLayout.gt-sm=\"row wrap\" fxLayout.lt-md=\"column\" fxLayoutGap.gt-sm=\"1rem\">\n        <app-dynamic-widgets fxFlex=\"220px\" *ngFor=\"let item of content.form\" [content]=\"item\" [form]=\"form\">\n        </app-dynamic-widgets>\n      </div>\n      <div class=\"actions\">\n        <button mat-button (click)=\"clear()\">\n          <mat-icon>clear</mat-icon>清空\n        </button>\n      </div>\n    </div>\n    <mat-divider></mat-divider>\n    <div class=\"view\" fxFlex.gt-sm=\"0 0 100\" fxFlex.lt-md=\"100\">\n      <ngx-skeleton-loader *ngIf=\"loading\" count=\"10\" appearance=\"line\"></ngx-skeleton-loader>\n      <app-dynamic-table [content]=\"table\" *ngIf=\"table\"></app-dynamic-table>\n      <div class=\"p-y p-x\" *ngIf=\"noAuth\">\n        您没有权限访问该页面！\n      </div>\n      <mat-paginator *ngIf=\"pager\" (page)=\"onPageChange($event)\" [length]=\"pager.total_items\"\n        [pageSize]=\"pager.items_per_page\">\n      </mat-paginator>\n    </div>\n  </div>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n</div>\n"
        },
        {
            "name": "WhychooseusComponent",
            "id": "component-WhychooseusComponent-5246861608433288c5f0f21630acb1b6109923b20ef9e171ce4c0e4101196e6fbb7600c0905688c349df617e900daf964418cefe00390d3483fb11cadf9b4861",
            "file": "src/app/uiux/combs/other/whychooseus/whychooseus.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-whychooseus",
            "styleUrls": [
                "./whychooseus.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./whychooseus.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-whychooseus',\n  templateUrl: './whychooseus.component.html',\n  styleUrls: ['./whychooseus.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WhychooseusComponent implements OnInit {\n  @Input() content: any;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./whychooseus.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"why-choose-us\" *ngIf=\"content\">\n  <a class=\"anchor\" *ngIf=\"content.id\" [id]=\"content.id\"></a>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n  <div class=\"container\">\n    <app-title [content]=\"content.title\" *ngIf=\"content.title\"></app-title>\n    <app-bg [content]=\"content.bg\" *ngIf=\"content.bg\">\n      <app-img [content]=\"content.bg.img\" *ngIf=\"content.bg.img\"></app-img>\n    </app-bg>\n    <div class=\"inner\" fxLayout.lt-md=\"column\" fxLayout.gt-sm=\"row\" fxLayoutAlign=\"space-between start\">\n      <app-dynamic-widgets fxFlex.lt-md=\"100\" fxFlex.gt-sm=\"48\" [content]=\"item\" *ngFor=\"let item of content.elements\">\n      </app-dynamic-widgets>\n    </div>\n  </div>\n  <app-spacer [size]=\"content?.spacer || 'md'\"></app-spacer>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "ActionModule",
            "id": "module-ActionModule-923c5b93fc46f4c8eb5017a7150fbdb0b08f716428a14712f382792c0c78e3c09301c32eef12aaed98240cbffa2a75c42e85a1a7bee9b0cf0b45232e2d707c56",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/uiux/combs/action/action.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { ShareModule } from '@share/share.module';\nimport { WidgetsModule } from '../../widgets/widgets.module';\nimport { Action1v1Component } from './action1v1/action1v1.component';\n\nconst components = [Action1v1Component];\n\n@NgModule({\n  declarations: [...components],\n  imports: [ShareModule, WidgetsModule],\n  exports: [...components],\n})\nexport class ActionModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ManageBlockComponent"
                        },
                        {
                            "name": "ManageMediaComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ShareModule"
                        },
                        {
                            "name": "WidgetsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ManageBlockComponent"
                        },
                        {
                            "name": "ManageMediaComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "id": "module-AppModule-4abf8032e6e8016dfd34aa4beccf0ba6c2d32aceef7167c883f3a622b7e678f1275cd3e6849f53542862c93a1cfa5ec2e05460dfd05f5bd298404fb492d3ee01",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import {\n  BrowserModule,\n  BrowserTransferStateModule,\n  Title,\n} from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { APP_INITIALIZER, NgModule, Inject } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { CommonModule } from '@angular/common';\nimport { AppRoutingModule } from './app-routing.module';\nimport { MobxModule } from '@core/mobx/mobx.module';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { NgxWebstorageModule } from 'ngx-webstorage';\nimport { BrandingModule } from '@core/branding/branding.module';\nimport { AppComponent } from './app.component';\nimport { AppState } from './core/mobx/AppState';\nimport { httpInterceptorProviders } from '@core/interceptors';\nimport { Angulartics2Module } from 'angulartics2';\nimport { CORE_CONFIG } from '@core/token/core.config';\n\nexport function initConfig(appState: AppState, coreConfig: object) {\n  return () => appState.loadConfig(coreConfig);\n}\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule.withServerTransition({ appId: 'xinshi' }),\n    HttpClientModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    BrowserTransferStateModule,\n    CommonModule,\n    MatSidenavModule,\n    NgxWebstorageModule.forRoot(),\n    Angulartics2Module.forRoot(),\n    MobxModule.forRoot(),\n    BrandingModule,\n  ],\n  providers: [\n    Title,\n    AppState,\n    httpInterceptorProviders,\n    {\n      provide: CORE_CONFIG,\n      useValue: {},\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initConfig,\n      deps: [AppState, [new Inject(CORE_CONFIG)]],\n      multi: true,\n    },\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AppState"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "BrandingModule"
                        },
                        {
                            "name": "MobxModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-77b425667fa1c750b112b12982652a32e848cac9a1024e36aa0c1cc20a8cf2dacd028dcf6114fe7695d43ba8e172db875af7d618367a3f086fa858149afad7d0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule, PreloadAllModules } from '@angular/router';\nimport { AuthGuard } from '@core/guards/auth.guard';\nimport { ManageGuard } from '@core/guards/manage.guard';\n\nconst routes: Routes = [\n  {\n    path: '',\n    redirectTo: 'home',\n    pathMatch: 'full',\n  },\n  {\n    path: 'my',\n    canActivate: [AuthGuard],\n    loadChildren: () =>\n      \"import('./modules/user/user.module').then((m) => m.UserModule)\",\n  },\n  {\n    path: 'super',\n    canActivate: [ManageGuard],\n    loadChildren: () =>\n      \"import('./modules/manage/manage.module').then((m) => m.ManageModule)\",\n  },\n  {\n    path: 'samples',\n    loadChildren: () =>\n      \"import('./modules/sample/sample.module').then((m) => m.SampleModule)\",\n  },\n  {\n    path: '**',\n    loadChildren: () =>\n      \"import('./modules/page-render/page-render.module').then(\\\n        (m) => m.PageRenderModule\\\n      )\",\n    canActivate: [AuthGuard],\n  },\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes, {\n      scrollPositionRestoration: 'enabled',\n      initialNavigation: 'enabled',\n      preloadingStrategy: PreloadAllModules,\n      anchorScrolling: 'enabled',\n    }),\n  ],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppServerModule",
            "id": "module-AppServerModule-39f29c29e70440ff994b1b02e48a301a1747b9357184c50c95e07b6918127eb619755900720b01ef997655fe1a17a9a364e03af67b33af8af8e311b847aaafa7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.server.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport {\n  ServerModule,\n  ServerTransferStateModule,\n} from '@angular/platform-server';\nimport { FlexLayoutServerModule } from '@angular/flex-layout/server';\nimport { AppModule } from './app.module';\nimport { AppComponent } from './app.component';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { ServerStateInterceptor } from '@core/interceptors/serverState-interceptor.service';\n\n@NgModule({\n  imports: [\n    AppModule,\n    ServerModule,\n    FlexLayoutServerModule,\n    ServerTransferStateModule,\n  ],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: ServerStateInterceptor,\n      multi: true,\n    },\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppServerModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ServerStateInterceptor"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BannerModule",
            "id": "module-BannerModule-7a679723c640a5fcd92aeca8367bdb2cdb63dc6ebb7d8025d4dc914c0be440884a68bb0deb94d13aacb0b172cadfc63bd0df495a869126acf1a5c4b4e6ba86f9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/uiux/combs/banner/banner.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { ShareModule } from '@share/share.module';\nimport { WidgetsModule } from '../../widgets/widgets.module';\nimport { BannerSimpleComponent } from './banner-simple/banner-simple.component';\n\nconst components = [BannerSimpleComponent];\n\n@NgModule({\n  declarations: [...components],\n  imports: [ShareModule, WidgetsModule],\n  exports: [...components],\n})\nexport class BannerModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ManageBlockComponent"
                        },
                        {
                            "name": "ManageMediaComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ShareModule"
                        },
                        {
                            "name": "WidgetsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ManageBlockComponent"
                        },
                        {
                            "name": "ManageMediaComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BrandingModule",
            "id": "module-BrandingModule-d26716b41bedfe3d5ff5f978d4222fc350144e98a2fcebb97249facc2f69bc9fbbec4eb0d11a844eaee38c707d7992ccb3b6dfe1d2bb6a67d6314fc6ec4cacbd",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/core/branding/branding.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { HeaderComponent } from './header/header.component';\nimport { FooterComponent } from './footer/footer.component';\nimport { ShareModule } from '@share/share.module';\nimport { MenuComponent } from './header/menu/menu.component';\nimport { UserMenuComponent } from './header/menu/user-menu/user-menu.component';\nimport { SwitchThemeComponent } from './header/menu/switch-theme/switch-theme.component';\nimport { PopupComponent } from './footer/popup/popup.component';\nimport { ItemMenuComponent } from './header/menu/item-menu/item-menu.component';\nimport { SubMenuComponent } from './header/menu/item-menu/sub-menu/sub-menu.component';\nimport { HeaderTopComponent } from './header/header-top/header-top.component';\nimport { HeroModule } from '@uiux/combs/hero/hero.module';\nimport { WidgetsModule } from '@uiux/widgets/widgets.module';\nimport { DynamicCombsModule } from '@uiux/combs/dynamic-combs/dynamic-combs.module';\nimport { LightComponent } from './footer/light/light.component';\nimport { InverseComponent } from './footer/inverse/inverse.component';\nimport { MenuItemComponent } from './footer/menu-item/menu-item.component';\nimport { SearchBoxComponent } from './header/menu/search-box/search-box.component';\nimport { HeaderBannerComponent } from './header/header-banner/header-banner.component';\nimport { MegaMenuComponent } from './header/menu/item-menu/mega-menu/mega-menu.component';\nimport { SpaceBetweenComponent } from './footer/space-between/space-between.component';\nimport { FixBarComponent } from './footer/fix-bar/fix-bar.component';\nimport { FixBarPopupComponent } from './footer/fix-bar/fix-bar-popup/fix-bar-popup.component';\n\n@NgModule({\n  declarations: [\n    HeaderComponent,\n    FooterComponent,\n    MenuComponent,\n    UserMenuComponent,\n    SwitchThemeComponent,\n    PopupComponent,\n    ItemMenuComponent,\n    SubMenuComponent,\n    MenuItemComponent,\n    HeaderTopComponent,\n    LightComponent,\n    InverseComponent,\n    SearchBoxComponent,\n    HeaderBannerComponent,\n    MegaMenuComponent,\n    SpaceBetweenComponent,\n    FixBarComponent,\n    FixBarPopupComponent,\n  ],\n  imports: [ShareModule, WidgetsModule, HeroModule, DynamicCombsModule],\n  exports: [HeaderComponent, FooterComponent, MenuComponent],\n})\nexport class BrandingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FixBarComponent"
                        },
                        {
                            "name": "FixBarPopupComponent"
                        },
                        {
                            "name": "FooterComponent"
                        },
                        {
                            "name": "HeaderBannerComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "HeaderTopComponent"
                        },
                        {
                            "name": "InverseComponent"
                        },
                        {
                            "name": "ItemMenuComponent"
                        },
                        {
                            "name": "LightComponent"
                        },
                        {
                            "name": "MegaMenuComponent"
                        },
                        {
                            "name": "MenuComponent"
                        },
                        {
                            "name": "MenuItemComponent"
                        },
                        {
                            "name": "PopupComponent"
                        },
                        {
                            "name": "SearchBoxComponent"
                        },
                        {
                            "name": "SpaceBetweenComponent"
                        },
                        {
                            "name": "SubMenuComponent"
                        },
                        {
                            "name": "SwitchThemeComponent"
                        },
                        {
                            "name": "UserMenuComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DynamicCombsModule"
                        },
                        {
                            "name": "HeroModule"
                        },
                        {
                            "name": "ShareModule"
                        },
                        {
                            "name": "WidgetsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FooterComponent"
                        },
                        {
                            "name": "MenuComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CalendarModule",
            "id": "module-CalendarModule-c21de9ab2b001a4d56e165c6f4b85265998ebf67b23321382ba088e870cc1592d3b644e9e03d5b516a06da962a6b8479fc5bb816240feebf5eb376477725941c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/uiux/combs/calendar/calendar.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FullCalendarComponent } from './full-calendar/full-calendar.component';\nimport { ShareModule } from '@share/share.module';\nimport { WidgetsModule } from '@uiux/widgets/widgets.module';\n\nconst components = [FullCalendarComponent];\n\n@NgModule({\n  declarations: [...components],\n  imports: [ShareModule, WidgetsModule],\n  exports: [...components],\n  providers: [],\n})\nexport class CalendarModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ManageBlockComponent"
                        },
                        {
                            "name": "ManageMediaComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ShareModule"
                        },
                        {
                            "name": "WidgetsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ManageBlockComponent"
                        },
                        {
                            "name": "ManageMediaComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CarouselModule",
            "id": "module-CarouselModule-117037bee802403b18d3aab1abbc51bd44d8ebc1431a0e0bcdfa2eb9a2751207528eb78def59533be8e76f4987ac892b4a04e85a4daf9782799680c8ce9c3bfa",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/uiux/combs/carousel/carousel.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { WidgetsModule } from '../../widgets/widgets.module';\nimport { ShareModule } from '@share/share.module';\nimport { Carousel1v1Component } from './carousel1v1/carousel1v1.component';\nimport { Carousel1v2Component } from './carousel1v2/carousel1v2.component';\nimport { Carousel2v1Component } from './carousel2v1/carousel2v1.component';\nimport { Carousel1v3Component } from './carousel1v3/carousel1v3.component';\nimport { Carousel2v2Component } from './carousel2v2/carousel2v2.component';\n\nconst components = [\n  Carousel1v1Component,\n  Carousel1v2Component,\n  Carousel1v3Component,\n  Carousel2v1Component,\n  Carousel2v2Component,\n];\n\n@NgModule({\n  declarations: [...components],\n  imports: [WidgetsModule, ShareModule],\n  exports: [...components],\n})\nexport class CarouselModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ManageBlockComponent"
                        },
                        {
                            "name": "ManageMediaComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ShareModule"
                        },
                        {
                            "name": "WidgetsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ManageBlockComponent"
                        },
                        {
                            "name": "ManageMediaComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CombsModule",
            "id": "module-CombsModule-a8ca18a0a2fdd39ba5966676bdfc2bdec58dc40d428bfd2a4032d5c604c388537e40f3f8831f778302d961aa5304ebba818ff3450af34eb8200e7785d8904146",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/uiux/combs/combs.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MapModule } from './map/map.module';\nimport { OtherModule } from './other/other.module';\nimport { VideoModule } from './video/video.module';\nimport { BannerModule } from './banner/banner.module';\nimport { SearchModule } from './search/search.module';\nimport { MasonryModule } from './masonry/masonry.module';\nimport { ShowcaseModule } from './showcase/showcase.module';\nimport { CarouselModule } from './carousel/carousel.module';\nimport { HeroModule } from './hero/hero.module';\nimport { DynamicCombsModule } from './dynamic-combs/dynamic-combs.module';\nimport { ListModule } from './list/list.module';\nimport { ProfileModule } from './profile/profile.module';\nimport { ActionModule } from './action/action.module';\nimport { TabModule } from './tab/tab.module';\nimport { NodeModule } from './node/node.module';\nimport { CalendarModule } from './calendar/calendar.module';\n\nconst modules = [\n  ActionModule,\n  BannerModule,\n  CarouselModule,\n  DynamicCombsModule,\n  HeroModule,\n  ListModule,\n  MasonryModule,\n  MapModule,\n  OtherModule,\n  ProfileModule,\n  ShowcaseModule,\n  SearchModule,\n  VideoModule,\n  TabModule,\n  NodeModule,\n  CalendarModule,\n];\n\n@NgModule({\n  imports: [CommonModule, ...modules],\n  exports: [...modules],\n  declarations: [],\n})\nexport class CombsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CombsModule"
                        },
                        {
                            "name": "WidgetsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CombsModule"
                        },
                        {
                            "name": "WidgetsModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DynamicCombsModule",
            "id": "module-DynamicCombsModule-d87400688fbd46c19d5f55ca7b3227797e042f75c986d2db32b1e4bfc81f6582af5d60eef7234ec5d9cd8bb9a6eaa5bfae171a12ed425128b550ba488bb227e4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/uiux/combs/dynamic-combs/dynamic-combs.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DynamicCombsComponent } from './dynamic-combs/dynamic-combs.component';\nimport { ShowcaseModule } from '../showcase/showcase.module';\nimport { CarouselModule } from '../carousel/carousel.module';\nimport { HeroModule } from '../hero/hero.module';\nimport { WidgetsModule } from '../../widgets/widgets.module';\n@NgModule({\n  declarations: [DynamicCombsComponent],\n  imports: [\n    CommonModule,\n    ShowcaseModule,\n    CarouselModule,\n    HeroModule,\n    WidgetsModule,\n  ],\n  exports: [DynamicCombsComponent],\n})\nexport class DynamicCombsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DynamicCombsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CarouselModule"
                        },
                        {
                            "name": "HeroModule"
                        },
                        {
                            "name": "ShowcaseModule"
                        },
                        {
                            "name": "WidgetsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DynamicCombsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HeroModule",
            "id": "module-HeroModule-dbeb94eb95eb6273cc2025215ea006f63979ca240425c451cc4255fc73f109b2e7fe86be6960499bfd8d603bbd6cd8585062bcc0db1e87ead6db0c0d2ed465f6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/uiux/combs/hero/hero.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { ShareModule } from '@share/share.module';\nimport { WidgetsModule } from '../../widgets/widgets.module';\nimport { Hero2v1Component } from './hero2v1/hero2v1.component';\nimport { Hero1v1Component } from './hero1v1/hero1v1.component';\nimport { Hero2v2Component } from './hero2v2/hero2v2.component';\nimport { Hero2v3Component } from './hero2v3/hero2v3.component';\nimport { Hero1v2Component } from './hero1v2/hero1v2.component';\nimport { SwiperModule } from 'ngx-swiper-wrapper';\n\nconst components = [\n  Hero1v1Component,\n  Hero1v2Component,\n  Hero2v1Component,\n  Hero2v2Component,\n  Hero2v3Component,\n];\n\n@NgModule({\n  declarations: [...components],\n  imports: [ShareModule, WidgetsModule, SwiperModule],\n  exports: [...components],\n})\nexport class HeroModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ManageBlockComponent"
                        },
                        {
                            "name": "ManageMediaComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ShareModule"
                        },
                        {
                            "name": "WidgetsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ManageBlockComponent"
                        },
                        {
                            "name": "ManageMediaComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ListModule",
            "id": "module-ListModule-11fe8039d90a1c3f1605c70d1c40cf02871fb4c7448f63f83b3dfdafd298e81542a638c43e284342db298fd0e76fbfc8f065879913afab65b2135a8ea24b7c87",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/uiux/combs/list/list.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { ShareModule } from '@share/share.module';\nimport { WidgetsModule } from '../../widgets/widgets.module';\nimport { ShowcaseModule } from '../showcase/showcase.module';\nimport { ListComponent } from './list/list.component';\nimport { TaxonomyListComponent } from './taxonomy-list/taxonomy-list.component';\nimport { DynamicMediaListComponent } from './dynamic-media-list/dynamic-media-list.component';\nimport { DynamicCardListComponent } from './dynamic-card-list/dynamic-card-list.component';\nimport { DynamicTextListComponent } from './dynamic-text-list/dynamic-text-list.component';\nimport { TaxonomyThinListComponent } from './taxonomy-thin-list/taxonomy-thin-list.component';\nimport { ListThinComponent } from './list/list-thin/list-thin.component';\nimport { SearchModule } from '../search/search.module';\nimport { TreeListComponent } from './tree-list/tree-list.component';\nimport { DynamicCardList1v1Component } from './dynamic-card-list1v1/dynamic-card-list1v1.component';\n\nconst components = [\n  ListComponent,\n  TaxonomyListComponent,\n  DynamicMediaListComponent,\n  DynamicCardListComponent,\n  DynamicCardList1v1Component,\n  DynamicTextListComponent,\n  TaxonomyThinListComponent,\n  ListThinComponent,\n  TreeListComponent,\n];\n\n@NgModule({\n  declarations: [...components],\n  imports: [ShareModule, WidgetsModule, ShowcaseModule, SearchModule],\n  exports: [...components],\n})\nexport class ListModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ManageBlockComponent"
                        },
                        {
                            "name": "ManageMediaComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SearchModule"
                        },
                        {
                            "name": "ShareModule"
                        },
                        {
                            "name": "ShowcaseModule"
                        },
                        {
                            "name": "WidgetsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ManageBlockComponent"
                        },
                        {
                            "name": "ManageMediaComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ManageModule",
            "id": "module-ManageModule-2662df3f990284549e60b2c7c5c232a6b2dbcb4061c6e6288c7fe3404fe0f98f6550f5e5c7f6ddd6c6320bd471a268f65e5a70cbe0f3ee9a2259c4b8a2d22b8e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/manage/manage.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { ShareModule } from '@share/share.module';\nimport { ManageRoutingModule } from './manage-routing.module';\nimport { ManageMediaComponent } from './manage-media/manage-media.component';\nimport { UiuxModule } from '@uiux/uiux.module';\nimport { ManageBlockComponent } from './manage-block/manage-block.component';\nconst components = [ManageMediaComponent, ManageBlockComponent];\n\n@NgModule({\n  declarations: [...components],\n  imports: [ShareModule, UiuxModule, ManageRoutingModule],\n})\nexport class ManageModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ManageBlockComponent"
                        },
                        {
                            "name": "ManageMediaComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ManageRoutingModule"
                        },
                        {
                            "name": "ShareModule"
                        },
                        {
                            "name": "UiuxModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ManageRoutingModule",
            "id": "module-ManageRoutingModule-2706a2a8cdc9c79c02b3aa0f6c436cb1a2f36e35c0651aa466ca019d08ce6af823e23dd637d7c19e3538e8979c36243667a621c204cf295808854453c101e0fe",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/manage/manage-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ManageBlockComponent } from './manage-block/manage-block.component';\nimport { ManageMediaComponent } from './manage-media/manage-media.component';\n\nconst routes: Routes = [\n  {\n    path: 'media',\n    component: ManageMediaComponent,\n  },\n  {\n    path: 'block',\n    component: ManageBlockComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ManageRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MapModule",
            "id": "module-MapModule-03f74b844702674816a5198071f078e81b9f240f49c8c8ad53096d3ca24bb1e495d5537f0527a77916d3300b826b02bc2841d0272ef2bad792c70f7f26ea3108",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/uiux/combs/map/map.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { ShareModule } from '@share/share.module';\nimport { WidgetsModule } from '../../widgets/widgets.module';\nimport { LocationComponent } from './location/location.component';\nimport { MapListV1Component } from './map-list-v1/map-list-v1.component';\n\nconst components = [LocationComponent, MapListV1Component];\n\n@NgModule({\n  declarations: [...components],\n  imports: [ShareModule, WidgetsModule],\n  exports: [...components],\n})\nexport class MapModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ManageBlockComponent"
                        },
                        {
                            "name": "ManageMediaComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ShareModule"
                        },
                        {
                            "name": "WidgetsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ManageBlockComponent"
                        },
                        {
                            "name": "ManageMediaComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MasonryModule",
            "id": "module-MasonryModule-0798d915202dc3119af2f694cf29f08bfe1b67e5e680206714130f828a5a3e902c2233b259905cae852babf7cb6f8219fe80ed3970d9d6b4d56024f27efb0f44",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/uiux/combs/masonry/masonry.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { ShareModule } from '@share/share.module';\nimport { WidgetsModule } from '../../widgets/widgets.module';\nimport { NgxPackeryModule } from 'ngx-packery';\nimport { ShuffleComponent } from './shuffle/shuffle.component';\nimport { PackeryComponent } from './packery/packery.component';\n\nconst components = [ShuffleComponent, PackeryComponent];\n\n@NgModule({\n  declarations: [...components],\n  imports: [ShareModule, WidgetsModule, NgxPackeryModule],\n\n  exports: [...components],\n})\nexport class MasonryModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ManageBlockComponent"
                        },
                        {
                            "name": "ManageMediaComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ShareModule"
                        },
                        {
                            "name": "WidgetsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ManageBlockComponent"
                        },
                        {
                            "name": "ManageMediaComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MobxModule",
            "id": "module-MobxModule-68c719befdad3d3a687f4e16e6eaf2ffa95efe533fbe60fd1949ba3241ce32d3a025badd55a00db589b0ae39137f119b73692c286f6e1b4a15dcaceac46fd45b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/core/mobx/mobx.module.ts",
            "methods": [
                {
                    "name": "forRoot",
                    "args": [],
                    "optional": false,
                    "returnType": "ModuleWithProviders<MobxModule>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "sourceCode": "import {\n  LOCALE_ID,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MobxAngularModule } from 'mobx-angular';\nimport { UserState } from './user/UserState';\nimport { BrandingState } from './BrandingState';\n\nconst states = [UserState, BrandingState];\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule, MobxAngularModule],\n  exports: [MobxAngularModule],\n})\nexport class MobxModule {\n  constructor(@Optional() @SkipSelf() parentModule: MobxModule) {\n    if (parentModule) {\n      throw new Error('MobxModule is already loaded.');\n    }\n  }\n\n  public static forRoot(): ModuleWithProviders<MobxModule> {\n    return {\n      ngModule: MobxModule,\n      providers: [...states],\n    };\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NodeModule",
            "id": "module-NodeModule-c64c2501a17665201c5b4520f7ec17092d63cfed659a0839e465a5224b7878d26fa4ec170e41a24d13ead43b4c06260b3567edbfcb7e137c347202ac83e6179a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/uiux/combs/node/node.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { ShareModule } from '@share/share.module';\nimport { WidgetsModule } from '@uiux/widgets/widgets.module';\nimport { ShowcaseModule } from '../showcase/showcase.module';\nimport { QuillModule } from 'ngx-quill';\nimport { CaseComponent } from './case/case.component';\nimport { CaseNodeComponent } from './case/case-node/case-node.component';\nimport { JobComponent } from './job/job.component';\nimport { JobFilterComponent } from './job/job-filter/job-filter.component';\nimport { JobListComponent } from './job/job-list/job-list.component';\nimport { JobNodeComponent } from './job/job-node/job-node.component';\nimport { ArticleBannerComponent } from './article/article-banner/article-banner.component';\nimport { ArticleComponent } from './article/article.component';\nimport { QuestionComponent } from './question/question.component';\nimport { CommentFormComponent } from './comment/comment-form/comment-form.component';\nimport { CommentListComponent } from './comment/comment-list/comment-list.component';\nimport { ArticleMetaComponent } from './article/article-meta/article-meta.component';\nimport { LawCaseComponent } from './law/law-case/law-case.component';\nimport { LawFilesComponent } from './law/law-files/law-files.component';\nimport { LawTableComponent } from './law/law-table/law-table.component';\nimport { LawShowcaseComponent } from './law/law-showcase/law-showcase.component';\nimport { LawCardComponent } from './law/law-card/law-card.component';\nimport { LawHeaderComponent } from './law/law-header/law-header.component';\nimport { CommentActionsComponent } from './comment/comment-actions/comment-actions.component';\nimport { CommentItemComponent } from './comment/comment-list/comment-item/comment-item.component';\n\nconst components = [\n  JobComponent,\n  CaseComponent,\n  ArticleComponent,\n  JobNodeComponent,\n  JobListComponent,\n  CaseNodeComponent,\n  JobFilterComponent,\n  ArticleBannerComponent,\n  ArticleMetaComponent,\n  QuestionComponent,\n  LawCaseComponent,\n  LawFilesComponent,\n  LawTableComponent,\n  CommentFormComponent,\n  CommentListComponent,\n  CommentItemComponent,\n  LawShowcaseComponent,\n  LawCardComponent,\n  LawHeaderComponent,\n  CommentActionsComponent,\n];\n@NgModule({\n  declarations: [...components],\n  imports: [ShareModule, WidgetsModule, ShowcaseModule, QuillModule.forRoot()],\n  exports: [\n    CaseNodeComponent,\n    CaseComponent,\n    ArticleComponent,\n    QuestionComponent,\n    JobComponent,\n    LawCaseComponent,\n  ],\n})\nexport class NodeModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ManageBlockComponent"
                        },
                        {
                            "name": "ManageMediaComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ShareModule"
                        },
                        {
                            "name": "ShowcaseModule"
                        },
                        {
                            "name": "WidgetsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ArticleComponent"
                        },
                        {
                            "name": "CaseComponent"
                        },
                        {
                            "name": "CaseNodeComponent"
                        },
                        {
                            "name": "JobComponent"
                        },
                        {
                            "name": "LawCaseComponent"
                        },
                        {
                            "name": "QuestionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "OtherModule",
            "id": "module-OtherModule-b4b16d1b2f285f221c824e60032222cdfd6eefe5265b26c6528774091bdd1ca4d330fc383c5d41d4f59ee116c823c177ea0b840870e76be10ace2f8adbf1b44e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/uiux/combs/other/other.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { ShareModule } from '@share/share.module';\nimport { WidgetsModule } from '../../widgets/widgets.module';\n\nimport { WhychooseusComponent } from './whychooseus/whychooseus.component';\nimport { NotfoundComponent } from './notfound/notfound.component';\nimport { DynamicFormComponent } from './dynamic-form/dynamic-form.component';\n\nconst components = [\n  WhychooseusComponent,\n  NotfoundComponent,\n  DynamicFormComponent,\n];\n\n@NgModule({\n  declarations: [...components],\n  imports: [ShareModule, WidgetsModule],\n  exports: [...components],\n})\nexport class OtherModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ManageBlockComponent"
                        },
                        {
                            "name": "ManageMediaComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ShareModule"
                        },
                        {
                            "name": "WidgetsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ManageBlockComponent"
                        },
                        {
                            "name": "ManageMediaComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PageRenderModule",
            "id": "module-PageRenderModule-8dbdea945e7cb33e291c4fda1a3eb364af58276242b86a247f04f794f1b26f923222fe651ae1cd0e21935c6b49dff5ef229c6a252070f19130aa4e17a4eee6c7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/page-render/page-render.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { UiuxModule } from '@uiux/uiux.module';\nimport { BlockComponent } from './block/block.component';\nimport { PageRoutingModule } from './page-routing.module';\n\nconst modules = [CommonModule, UiuxModule, PageRoutingModule];\n@NgModule({\n  declarations: [BlockComponent],\n  imports: [...modules],\n})\nexport class PageRenderModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BlockComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CombsModule"
                        },
                        {
                            "name": "WidgetsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PageRoutingModule",
            "id": "module-PageRoutingModule-72a881c4950016872bad9daf4b1b1d283161435f48ad8916657b02301bf2acb51eed0163d71d12c6a5c09b13909faa81127c469a6034073953b36a8b01b45cee",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/page-render/page-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AuthGuard } from '@core/guards/auth.guard';\n\nimport { BlockComponent } from './block/block.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: BlockComponent,\n    canActivate: [AuthGuard],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class PageRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProfileModule",
            "id": "module-ProfileModule-1dc006edf211edbe40afe07aeddac9873cd221e3fcfff22ce86b8a470a164e5489ff012abb313f9c91c42f31f28f4977907dc18b82e08a03031af324b37ce72a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/uiux/combs/profile/profile.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { ShareModule } from '@share/share.module';\nimport { WidgetsModule } from '../../widgets/widgets.module';\nimport { Profile1v1Component } from './profile1v1/profile1v1.component';\n\nconst components = [Profile1v1Component];\n\n@NgModule({\n  declarations: [components],\n  imports: [ShareModule, WidgetsModule],\n  exports: [components],\n})\nexport class ProfileModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ManageBlockComponent"
                        },
                        {
                            "name": "ManageMediaComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ShareModule"
                        },
                        {
                            "name": "WidgetsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ManageBlockComponent"
                        },
                        {
                            "name": "ManageMediaComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SampleModule",
            "id": "module-SampleModule-595db4cda7d84e804ee5b96c70d7963190a703c04374e7ba787a20d55894b576f29cfe684bce019b24c3ab2a37158bc7e8642a4487e8283cebb5940df70378b1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/sample/sample.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SampleRoutingModule } from './sample-routing.module';\nimport { SampleWidgetsComponent } from './sample-widgets/sample-widgets.component';\nimport { WidgetsModule } from '@uiux/widgets/widgets.module';\n\n@NgModule({\n  declarations: [SampleWidgetsComponent],\n  imports: [CommonModule, WidgetsModule, SampleRoutingModule],\n})\nexport class SampleModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SampleWidgetsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SampleRoutingModule"
                        },
                        {
                            "name": "WidgetsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SampleRoutingModule",
            "id": "module-SampleRoutingModule-b61fb0faf960d464d8ef30ce8714375e08033d10a0afe5cc3de8fc56ec69e97fe3aecfff6d699c574fef4cf48e1e91bf38a4f117e49f8dd121b3bf236aa6f64c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/sample/sample-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { SampleWidgetsComponent } from './sample-widgets/sample-widgets.component';\n\nconst routes: Routes = [\n  {\n    path: 'widgets',\n    component: SampleWidgetsComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SampleRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SearchModule",
            "id": "module-SearchModule-a4dbca58249630754a61fe697980ed6446eb381ea3943189d7c349e2cf0bf300dacb4f6335bf1c1ed2428705c561cbfbaebb6c6be0156833faa1e22fcb223ac9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/uiux/combs/search/search.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { ShareModule } from '@share/share.module';\nimport { WidgetsModule } from '../../widgets/widgets.module';\nimport { SearchComponent } from './search.component';\nimport { HeroModule } from '../hero/hero.module';\nimport { SearchHeaderComponent } from './search-header/search-header.component';\nimport { SearchListComponent } from './search-list/search-list.component';\nimport { SearchTopComponent } from './search-top/search-top.component';\nimport { SearchStatusComponent } from './search-status/search-status.component';\n\n@NgModule({\n  declarations: [\n    SearchComponent,\n    SearchHeaderComponent,\n    SearchListComponent,\n    SearchTopComponent,\n    SearchStatusComponent,\n  ],\n  imports: [ShareModule, WidgetsModule, HeroModule],\n  exports: [SearchComponent, SearchListComponent],\n})\nexport class SearchModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SearchComponent"
                        },
                        {
                            "name": "SearchHeaderComponent"
                        },
                        {
                            "name": "SearchListComponent"
                        },
                        {
                            "name": "SearchStatusComponent"
                        },
                        {
                            "name": "SearchTopComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "HeroModule"
                        },
                        {
                            "name": "ShareModule"
                        },
                        {
                            "name": "WidgetsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SearchComponent"
                        },
                        {
                            "name": "SearchListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ShareModule",
            "id": "module-ShareModule-9826fd4dac1f3ecc5dba4979091cec9dd77041e47a09d8b6cf72a93bf6db0120faaef0370d8e6214b82a59cb9bfb07058d8905c1cd7e804579fd389b0c1336f3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/share/share.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatSelectModule } from '@angular/material/select';\nimport { NgxMatSelectSearchModule } from 'ngx-mat-select-search';\nimport { MatRippleModule } from '@angular/material/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatListModule } from '@angular/material/list';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatTableModule } from '@angular/material/table';\n\n// utils\nimport { NgPipesModule } from 'ngx-pipes';\nimport { NgxPaginationModule } from 'ngx-pagination';\nimport { IconService } from '@core/service/icon.service';\nimport {\n  MatPaginatorIntl,\n  MatPaginatorModule,\n} from '@angular/material/paginator';\nimport { MatPaginatorIntlCro } from '@core/service/paginator.service';\nimport { NgxSkeletonLoaderModule } from 'ngx-skeleton-loader';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatAutocompleteModule,\n    MatInputModule,\n    MatDividerModule,\n    FlexLayoutModule,\n    MatCheckboxModule,\n    MatFormFieldModule,\n    MatSelectModule,\n    MatRippleModule,\n    ReactiveFormsModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatMenuModule,\n    MatExpansionModule,\n    MatChipsModule,\n    RouterModule,\n    ScrollingModule,\n    MatTabsModule,\n    MatDialogModule,\n    MatSnackBarModule,\n    NgPipesModule,\n    NgxPaginationModule,\n    MatTableModule,\n    NgxMatSelectSearchModule,\n    NgxSkeletonLoaderModule,\n  ],\n  exports: [\n    CommonModule,\n    RouterModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatAutocompleteModule,\n    MatInputModule,\n    MatDividerModule,\n    FlexLayoutModule,\n    MatCheckboxModule,\n    MatFormFieldModule,\n    MatSelectModule,\n    MatRippleModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatMenuModule,\n    MatListModule,\n    MatTooltipModule,\n    MatExpansionModule,\n    MatChipsModule,\n    ScrollingModule,\n    MatTabsModule,\n    MatDialogModule,\n    MatSnackBarModule,\n    NgPipesModule,\n    NgxPaginationModule,\n    MatTableModule,\n    MatPaginatorModule,\n    NgxMatSelectSearchModule,\n    NgxSkeletonLoaderModule,\n  ],\n  providers: [\n    IconService,\n    {\n      provide: MatPaginatorIntl,\n      useClass: MatPaginatorIntlCro,\n    },\n  ],\n})\nexport class ShareModule {\n  /**\n   * @SkipSelf 让模块去父级寻找依赖，不然会造成死循环\n   * @Optional 可选，如果CoreModule不存在正常执行\n   */\n  constructor(private iconService: IconService) {\n    this.iconService.loadSvgResources();\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "IconService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ShowcaseModule",
            "id": "module-ShowcaseModule-4ef1dc68a9edf0b889bf7b416fc640c1388edc301a6cb49802c42f9907e57a55c7d00a384ba2d06c9fc0bf9c5a96dc32cc2f8a79ea327597da712c2cbf2a4c87",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/uiux/combs/showcase/showcase.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { WidgetsModule } from '../../widgets/widgets.module';\nimport { ShareModule } from '@share/share.module';\nimport { Showcase1v1Component } from './showcase1v1/showcase1v1.component';\nimport { Showcase1v3Component } from './showcase1v3/showcase1v3.component';\nimport { Showcase2v1Component } from './showcase2v1/showcase2v1.component';\nimport { Showcase2v2Component } from './showcase2v2/showcase2v2.component';\nimport { Showcase2v3Component } from './showcase2v3/showcase2v3.component';\nimport { Showcase2v4Component } from './showcase2v4/showcase2v4.component';\nimport { Showcase3v1Component } from './showcase3v1/showcase3v1.component';\nimport { Showcase3v2Component } from './showcase3v2/showcase3v2.component';\nimport { Showcase3v3Component } from './showcase3v3/showcase3v3.component';\nimport { Showcase3v4Component } from './showcase3v4/showcase3v4.component';\nimport { Showcase3v5Component } from './showcase3v5/showcase3v5.component';\nimport { Showcase3v6Component } from './showcase3v6/showcase3v6.component';\nimport { Showcase3v7Component } from './showcase3v7/showcase3v7.component';\nimport { Showcase3v8Component } from './showcase3v8/showcase3v8.component';\nimport { Showcase4v1Component } from './showcase4v1/showcase4v1.component';\nimport { Showcase2v5Component } from './showcase2v5/showcase2v5.component';\nimport { Showcase2v6Component } from './showcase2v6/showcase2v6.component';\n\nconst components = [\n  Showcase1v1Component,\n  Showcase1v3Component,\n  Showcase2v1Component,\n  Showcase2v2Component,\n  Showcase2v3Component,\n  Showcase2v4Component,\n  Showcase2v5Component,\n  Showcase2v6Component,\n  Showcase3v1Component,\n  Showcase3v2Component,\n  Showcase3v3Component,\n  Showcase3v4Component,\n  Showcase3v5Component,\n  Showcase3v6Component,\n  Showcase3v7Component,\n  Showcase3v8Component,\n  Showcase4v1Component,\n];\n\n@NgModule({\n  declarations: [...components],\n  imports: [WidgetsModule, ShareModule],\n  exports: [...components],\n})\nexport class ShowcaseModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ManageBlockComponent"
                        },
                        {
                            "name": "ManageMediaComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ShareModule"
                        },
                        {
                            "name": "WidgetsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ManageBlockComponent"
                        },
                        {
                            "name": "ManageMediaComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TabModule",
            "id": "module-TabModule-c3fec3c0c6a0d5ac1e08f4f12134819c62fd5894e5538d4360b4d62d90c2269fc3454ca64e80b8bf7366d69d8297ebd013caa02dbc04e736467b579e941b9980",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/uiux/combs/tab/tab.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ShareModule } from '@share/share.module';\nimport { WidgetsModule } from '../../widgets/widgets.module';\nimport { Tab1v1Component } from './tab1v1/tab1v1.component';\n\nconst components = [Tab1v1Component];\n\n@NgModule({\n  declarations: [...components, Tab1v1Component],\n  imports: [ShareModule, WidgetsModule],\n  exports: [...components],\n})\nexport class TabModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ManageBlockComponent"
                        },
                        {
                            "name": "ManageMediaComponent"
                        },
                        {
                            "name": "Tab1v1Component"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ShareModule"
                        },
                        {
                            "name": "WidgetsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ManageBlockComponent"
                        },
                        {
                            "name": "ManageMediaComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UiuxModule",
            "id": "module-UiuxModule-4aec71cdbdb2cb0088c3d63d83cbe2023de8917385150133f9c17c32b621d798db68439eebd9ba39e43472fbb01470f72b3a26aad685bcf0e20ecf48d3e0ae9f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/uiux/uiux.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { WidgetsModule } from './widgets/widgets.module';\nimport { CombsModule } from './combs/combs.module';\n\nconst modules = [WidgetsModule, CombsModule];\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule, ...modules],\n  exports: [...modules],\n})\nexport class UiuxModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CombsModule"
                        },
                        {
                            "name": "WidgetsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CombsModule"
                        },
                        {
                            "name": "WidgetsModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UserModule",
            "id": "module-UserModule-488917d8406759b1222a31a82234ded4549e6dc457c21b04e98cb4a4d2c1a345afd82184ced31fdfac5ce434b73e6f9cca941539dca8db2c3559e30caf26269d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/user/user.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { ShareModule } from '@share/share.module';\nimport { UserRoutingModule } from './user-routing.module';\nimport { LoginComponent } from './login/login.component';\nimport { WidgetsModule } from '@uiux/widgets/widgets.module';\nimport { ProfileModule } from '@uiux/combs/profile/profile.module';\nimport { ListModule } from '@uiux/combs/list/list.module';\nimport { CountdownModule } from 'ngx-countdown';\nimport { UserComponent } from './user.component';\nimport { UserHomeComponent } from './user-home/user-home.component';\nimport { UserFavoriteComponent } from './user-favorite/user-favorite.component';\nimport { UserPayComponent } from './user-pay/user-pay.component';\n\n@NgModule({\n  declarations: [\n    LoginComponent,\n    UserComponent,\n    UserHomeComponent,\n    UserFavoriteComponent,\n    UserPayComponent,\n  ],\n  imports: [\n    ShareModule,\n    WidgetsModule,\n    CountdownModule,\n    ProfileModule,\n    ListModule,\n    UserRoutingModule,\n  ],\n})\nexport class UserModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "UserComponent"
                        },
                        {
                            "name": "UserFavoriteComponent"
                        },
                        {
                            "name": "UserHomeComponent"
                        },
                        {
                            "name": "UserPayComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ListModule"
                        },
                        {
                            "name": "ProfileModule"
                        },
                        {
                            "name": "ShareModule"
                        },
                        {
                            "name": "UserRoutingModule"
                        },
                        {
                            "name": "WidgetsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UserRoutingModule",
            "id": "module-UserRoutingModule-30ec67f56ed27443a8e911aa1b9b56cf4c2ff8036802ccad951dd1e6a835b8482e0e037ac7f30d2942d96ec9ae87461da489a1bc160f6335d158bca259e313a9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/user/user-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\nimport { UserComponent } from './user.component';\nimport { UserHomeComponent } from './user-home/user-home.component';\nimport { UserFavoriteComponent } from './user-favorite/user-favorite.component';\nimport { UserPayComponent } from './user-pay/user-pay.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: UserComponent,\n    children: [\n      {\n        path: 'favorite',\n        component: UserFavoriteComponent,\n      },\n      {\n        path: 'pay',\n        component: UserPayComponent,\n      },\n    ],\n  },\n  {\n    path: 'login',\n    component: LoginComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class UserRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "VideoModule",
            "id": "module-VideoModule-1f42067e80860fab4eaeda9646376aec1211278f9228f245840ef4303fa8f72278b3f8cb095ecc8d99027fbe9599a901ae4f1387612adab96c3343c56a22c568",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/uiux/combs/video/video.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { WidgetsModule } from '../../widgets/widgets.module';\nimport { VideoBgComponent } from './video-bg/video-bg.component';\nimport { ShareModule } from '@share/share.module';\nimport { DynamicCombsModule } from '../dynamic-combs/dynamic-combs.module';\n\nconst components = [VideoBgComponent];\n\n@NgModule({\n  declarations: [...components],\n  imports: [WidgetsModule, ShareModule, DynamicCombsModule],\n  exports: [...components],\n})\nexport class VideoModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ManageBlockComponent"
                        },
                        {
                            "name": "ManageMediaComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DynamicCombsModule"
                        },
                        {
                            "name": "ShareModule"
                        },
                        {
                            "name": "WidgetsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ManageBlockComponent"
                        },
                        {
                            "name": "ManageMediaComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "WidgetsModule",
            "id": "module-WidgetsModule-fad48255d6d7e751fe9e31d94bae03c709e33c333e2c0f05869f5791992b0210cbe3cd342a58da047766690df8081a2a170802a11d8ba84cc3ac09c46f29d3e2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/uiux/widgets/widgets.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { FullCalendarModule } from '@fullcalendar/angular'; // must go before plugins\nimport listPlugin from '@fullcalendar/list';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport { LightboxModule } from 'ngx-lightbox';\nimport { SwiperModule } from 'ngx-swiper-wrapper';\nimport { SWIPER_CONFIG } from 'ngx-swiper-wrapper';\nimport { ShareModule } from '@share/share.module';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { SwiperConfigInterface } from 'ngx-swiper-wrapper';\nimport { CountToModule } from 'angular-count-to';\nimport { DynamicModule } from 'ng-dynamic-component';\nimport { TreeModule } from '@circlon/angular-tree-component';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatNativeDateModule } from '@angular/material/core';\n\nimport { BgComponent } from './bg/bg.component';\nimport { ImgComponent } from './img/img.component';\nimport { BoxComponent } from './box/box.component';\nimport { MapComponent } from './map/map.component';\nimport { TabComponent } from './tab/tab.component';\nimport { LinkComponent } from './link/link.component';\nimport { CardComponent } from './card/card.component';\nimport { TextComponent } from './text/text.component';\nimport { TitleComponent } from './title/title.component';\nimport { InputComponent } from './form/input/input.component';\nimport { PanelComponent } from './panel/panel.component';\nimport { SwiperComponent } from './swiper/swiper.component';\nimport { SpacerComponent } from './spacer/spacer.component';\nimport { SidebarComponent } from './sidebar/sidebar.component';\nimport { MenuListComponent } from './menu-list/menu-list.component';\nimport { SpinnerComponent } from './spinner/spinner.component';\nimport { TextareaComponent } from './form/textarea/textarea.component';\nimport { ChipListComponent } from './chip-list/chip-list.component';\nimport { LineYearComponent } from './line-year/line-year.component';\nimport { ContactUsComponent } from './contact-us/contact-us.component';\nimport { BreadcrumbComponent } from './breadcrumb/breadcrumb.component';\nimport { PaginationComponent } from './pagination/pagination.component';\nimport { BtnAnimateComponent } from './btn-animate/btn-animate.component';\nimport { FeatureBoxComponent } from './feature-box/feature-box.component';\nimport { TestimonialComponent } from './testimonial/testimonial.component';\nimport { ProgressBarComponent } from './progress-bar/progress-bar.component';\nimport { DropdownMenuComponent } from './dropdown-menu/dropdown-menu.component';\nimport { NumberAnimateComponent } from './number-animate/number-animate.component';\nimport { DynamicWidgetsComponent } from './dynamic-widgets/dynamic-widgets.component';\n\nimport { SafeHtmlPipe } from '@core/pipe/safe-html.pipe';\nimport { IconComponent } from './icon/icon.component';\nimport { ProgressGroupComponent } from './progress-group/progress-group.component';\nimport { MediaListComponent } from './media/media-list/media-list.component';\nimport { MediaObjectComponent } from './media/media-object/media-object.component';\nimport { MediaObjectGroupComponent } from './media/media-object-group/media-object-group.component';\nimport { DialogComponent } from './dialog/dialog.component';\nimport { DynamicFormControlComponent } from './dynamic-form-control/dynamic-form-control.component';\nimport { SelectComponent } from './form/select/select.component';\nimport { PaginationSimpleComponent } from './pagination/pagination-simple/pagination-simple.component';\nimport { FlagComponent } from './actions/flag/flag.component';\nimport { ShapeComponent } from './shape/shape.component';\nimport { BgImgComponent } from './bg-img/bg-img.component';\nimport { ShareComponent } from './actions/share/share.component';\nimport { TreeComponent } from './tree/tree.component';\nimport { Card1v1Component } from './card/card1v1/card1v1.component';\nimport { BtnComponent } from './btn/btn.component';\nimport { Card1v2Component } from './card/card1v2/card1v2.component';\nimport { Card1v3Component } from './card/card1v3/card1v3.component';\nimport { CardMetaComponent } from './card/card-meta/card-meta.component';\nimport { DownloadComponent } from './actions/download/download.component';\nimport { MediaMetaComponent } from './media/media-meta/media-meta.component';\nimport { TextHeroComponent } from './text-hero/text-hero.component';\nimport { FontChangeComponent } from './font-change/font-change.component';\nimport { CheckboxComponent } from './form/checkbox/checkbox.component';\nimport { ContentBoxComponent } from './content-box/content-box.component';\nimport { TermsServiceComponent } from './form/terms-service/terms-service.component';\nimport { DynamicTableComponent } from './dynamic-table/dynamic-table.component';\nimport { InlineLightboxComponent } from './lightbox/inline-lightbox/inline-lightbox.component';\nimport { ContentTextCenterComponent } from './content-text-center/content-text-center.component';\nimport { CalendarComponent } from './date/calendar/calendar.component';\nimport { DatepickerComponent } from './form/datepicker/datepicker.component'; // a plugin!\nimport { ViewListComponent } from './view-list/view-list.component';\nimport { DataSourcePipe } from '@core/pipe/dataSource.pipe';\nimport { SearchActionComponent } from './actions/search-action/search-action.component';\nimport { SearchSidebarComponent } from './sidebar/search-sidebar/search-sidebar.component';\nimport { LoopWidgetsComponent } from './loop-widgets/loop-widgets.component';\n\nconst DEFAULT_SWIPER_CONFIG: SwiperConfigInterface = {\n  direction: 'horizontal',\n  slidesPerView: 'auto',\n};\n\nFullCalendarModule.registerPlugins([\n  // register FullCalendar plugins\n  dayGridPlugin,\n  timeGridPlugin,\n  listPlugin,\n]);\n\nconst components = [\n  BgComponent,\n  ImgComponent,\n  MapComponent,\n  BoxComponent,\n  TextComponent,\n  TextHeroComponent,\n  LinkComponent,\n  BtnComponent,\n  TabComponent,\n  CardComponent,\n  IconComponent,\n  TitleComponent,\n  PanelComponent,\n  InputComponent,\n  SelectComponent,\n  SwiperComponent,\n  SpacerComponent,\n  SpinnerComponent,\n  Card1v1Component,\n  Card1v2Component,\n  Card1v3Component,\n  CheckboxComponent,\n  ContentBoxComponent,\n  ChipListComponent,\n  TextareaComponent,\n  LineYearComponent,\n  ContactUsComponent,\n  BtnAnimateComponent,\n  FeatureBoxComponent,\n  BreadcrumbComponent,\n  TestimonialComponent,\n  DropdownMenuComponent,\n  NumberAnimateComponent,\n  DynamicWidgetsComponent,\n  SidebarComponent,\n  MediaListComponent,\n  MediaMetaComponent,\n  MediaObjectComponent,\n  MenuListComponent,\n  PaginationComponent,\n  PaginationSimpleComponent,\n  ProgressBarComponent,\n  ProgressGroupComponent,\n  SafeHtmlPipe,\n  DataSourcePipe,\n  DialogComponent,\n  FlagComponent,\n  ShareComponent,\n  ShapeComponent,\n  BgImgComponent,\n  TreeComponent,\n  CalendarComponent,\n  DownloadComponent,\n  CardMetaComponent,\n  ViewListComponent,\n  DatepickerComponent,\n  FontChangeComponent,\n  LoopWidgetsComponent,\n  TermsServiceComponent,\n  DynamicTableComponent,\n  SearchActionComponent,\n  SearchSidebarComponent,\n  InlineLightboxComponent,\n  MediaObjectGroupComponent,\n  ContentTextCenterComponent,\n  DynamicFormControlComponent,\n];\n\n@NgModule({\n  declarations: [...components],\n  imports: [\n    MatChipsModule,\n    ShareModule,\n    SwiperModule,\n    TreeModule,\n    LightboxModule,\n    CountToModule,\n    DynamicModule,\n    CdkTableModule,\n    FullCalendarModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n  ],\n  exports: [...components],\n  providers: [\n    MatDatepickerModule,\n    {\n      provide: SWIPER_CONFIG,\n      useValue: DEFAULT_SWIPER_CONFIG,\n    },\n    // { provide: MAT_DATE_LOCALE, useValue: 'zh-cn' },\n  ],\n})\nexport class WidgetsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ManageBlockComponent"
                        },
                        {
                            "name": "ManageMediaComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ShareModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ManageBlockComponent"
                        },
                        {
                            "name": "ManageMediaComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "__non_webpack_require__",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "NodeRequire"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/manage/manage.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[ManageMediaComponent, ManageBlockComponent]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/uiux/widgets/widgets.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  BgComponent,\n  ImgComponent,\n  MapComponent,\n  BoxComponent,\n  TextComponent,\n  TextHeroComponent,\n  LinkComponent,\n  BtnComponent,\n  TabComponent,\n  CardComponent,\n  IconComponent,\n  TitleComponent,\n  PanelComponent,\n  InputComponent,\n  SelectComponent,\n  SwiperComponent,\n  SpacerComponent,\n  SpinnerComponent,\n  Card1v1Component,\n  Card1v2Component,\n  Card1v3Component,\n  CheckboxComponent,\n  ContentBoxComponent,\n  ChipListComponent,\n  TextareaComponent,\n  LineYearComponent,\n  ContactUsComponent,\n  BtnAnimateComponent,\n  FeatureBoxComponent,\n  BreadcrumbComponent,\n  TestimonialComponent,\n  DropdownMenuComponent,\n  NumberAnimateComponent,\n  DynamicWidgetsComponent,\n  SidebarComponent,\n  MediaListComponent,\n  MediaMetaComponent,\n  MediaObjectComponent,\n  MenuListComponent,\n  PaginationComponent,\n  PaginationSimpleComponent,\n  ProgressBarComponent,\n  ProgressGroupComponent,\n  SafeHtmlPipe,\n  DataSourcePipe,\n  DialogComponent,\n  FlagComponent,\n  ShareComponent,\n  ShapeComponent,\n  BgImgComponent,\n  TreeComponent,\n  CalendarComponent,\n  DownloadComponent,\n  CardMetaComponent,\n  ViewListComponent,\n  DatepickerComponent,\n  FontChangeComponent,\n  LoopWidgetsComponent,\n  TermsServiceComponent,\n  DynamicTableComponent,\n  SearchActionComponent,\n  SearchSidebarComponent,\n  InlineLightboxComponent,\n  MediaObjectGroupComponent,\n  ContentTextCenterComponent,\n  DynamicFormControlComponent,\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/uiux/combs/action/action.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[Action1v1Component]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/uiux/combs/banner/banner.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[BannerSimpleComponent]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/uiux/combs/calendar/calendar.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[FullCalendarComponent]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/uiux/combs/carousel/carousel.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  Carousel1v1Component,\n  Carousel1v2Component,\n  Carousel1v3Component,\n  Carousel2v1Component,\n  Carousel2v2Component,\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/uiux/combs/hero/hero.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  Hero1v1Component,\n  Hero1v2Component,\n  Hero2v1Component,\n  Hero2v2Component,\n  Hero2v3Component,\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/uiux/combs/list/list.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  ListComponent,\n  TaxonomyListComponent,\n  DynamicMediaListComponent,\n  DynamicCardListComponent,\n  DynamicCardList1v1Component,\n  DynamicTextListComponent,\n  TaxonomyThinListComponent,\n  ListThinComponent,\n  TreeListComponent,\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/uiux/combs/map/map.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[LocationComponent, MapListV1Component]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/uiux/combs/masonry/masonry.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[ShuffleComponent, PackeryComponent]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/uiux/combs/other/other.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  WhychooseusComponent,\n  NotfoundComponent,\n  DynamicFormComponent,\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/uiux/combs/profile/profile.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[Profile1v1Component]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/uiux/combs/node/node.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  JobComponent,\n  CaseComponent,\n  ArticleComponent,\n  JobNodeComponent,\n  JobListComponent,\n  CaseNodeComponent,\n  JobFilterComponent,\n  ArticleBannerComponent,\n  ArticleMetaComponent,\n  QuestionComponent,\n  LawCaseComponent,\n  LawFilesComponent,\n  LawTableComponent,\n  CommentFormComponent,\n  CommentListComponent,\n  CommentItemComponent,\n  LawShowcaseComponent,\n  LawCardComponent,\n  LawHeaderComponent,\n  CommentActionsComponent,\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/uiux/combs/tab/tab.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[Tab1v1Component]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/uiux/combs/video/video.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[VideoBgComponent]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/uiux/combs/showcase/showcase.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  Showcase1v1Component,\n  Showcase1v3Component,\n  Showcase2v1Component,\n  Showcase2v2Component,\n  Showcase2v3Component,\n  Showcase2v4Component,\n  Showcase2v5Component,\n  Showcase2v6Component,\n  Showcase3v1Component,\n  Showcase3v2Component,\n  Showcase3v3Component,\n  Showcase3v4Component,\n  Showcase3v5Component,\n  Showcase3v6Component,\n  Showcase3v7Component,\n  Showcase3v8Component,\n  Showcase4v1Component,\n]"
            },
            {
                "name": "compressionModule",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require('compression')"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "CORE_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/token/core.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<object>('core config')"
            },
            {
                "name": "DEFAULT_SWIPER_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/uiux/widgets/widgets.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "SwiperConfigInterface",
                "defaultValue": "{\n  direction: 'horizontal',\n  slidesPerView: 'auto',\n}"
            },
            {
                "name": "distFolder",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "join(process.cwd(), `${environment.site}/browser`)"
            },
            {
                "name": "dominoModule",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require('domino')"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.nnit.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IEnvironment",
                "defaultValue": "{\n  apiUrl: 'https://api.nnitpai.com',\n  production: true,\n  site: 'nnit',\n  port: 4201,\n  cache: true,\n  ssr: true,\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IEnvironment",
                "defaultValue": "{\n  apiUrl: 'https://api.zhaobg.com',\n  production: true,\n  site: 'dist',\n  port: 4200,\n  cache: false,\n  ssr: true,\n  drupalProxy: false,\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IEnvironment",
                "defaultValue": "{\n  apiUrl: 'http://localhost:4200',\n  // apiUrl: 'https://api.zhaobg.com',\n  production: false,\n  site: 'xinshi',\n  port: 4000,\n  cache: false,\n  ssr: false,\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.sanziqi.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IEnvironment",
                "defaultValue": "{\n  apiUrl: 'https://sanziqi-api.zhaobg.com',\n  production: true,\n  site: 'sanziqi',\n  port: 4207,\n  cache: true,\n  ssr: true,\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.xinshi.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IEnvironment",
                "defaultValue": "{\n  apiUrl: 'https://api.zhaobg.com',\n  production: true,\n  site: 'xinshi',\n  port: 4200,\n  cache: true,\n  ssr: true,\n}"
            },
            {
                "name": "feature",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/uiux/combs/node/job/job.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  type: 'showcase-3v6',\n  id: '',\n  title: {\n    type: 'text',\n    spacer: 'sm',\n    title: {\n      label: '职位招聘',\n      style: 'style-v1',\n    },\n    body: '<p class=\"text-center\">免费推送相关职位信息，关注公众号随时随地了解职位情况。</p>',\n  },\n  bg: {\n    classes: 'bg-light bg-fill-width',\n  },\n  row: '3',\n  elements: [\n    {\n      img: {\n        src: '/assets/images/logo/codepen.svg',\n        style: {\n          width: '45px',\n          height: '45px',\n        },\n        alt: 'logo',\n      },\n      css3: true,\n      link: {\n        label: '前端开发工程师',\n        classes: 'bold',\n        href: '#',\n      },\n      subTitle: '字节跳动，北京',\n    },\n    {\n      img: {\n        src: '/assets/images/logo/codepen.svg',\n        style: {\n          width: '45px',\n          height: '45px',\n        },\n        alt: 'logo',\n      },\n      css3: true,\n      link: {\n        label: '前端架构师',\n        classes: 'bold',\n        href: '#',\n      },\n      subTitle: '美团，广州',\n    },\n    {\n      img: {\n        src: '/assets/images/logo/codepen.svg',\n        style: {\n          width: '45px',\n          height: '45px',\n        },\n        alt: 'logo',\n      },\n      css3: true,\n      link: {\n        label: '后端开发',\n        classes: 'bold',\n        href: '#',\n      },\n      subTitle: '微软，北京',\n    },\n    {\n      img: {\n        src: '/assets/images/logo/codepen.svg',\n        style: {\n          width: '45px',\n          height: '45px',\n        },\n        alt: 'logo',\n      },\n      css3: true,\n      link: {\n        label: 'UI 设计师',\n        classes: 'bold',\n        href: '#',\n      },\n      subTitle: '腾讯，深圳',\n    },\n    {\n      img: {\n        src: '/assets/images/logo/codepen.svg',\n        style: {\n          width: '45px',\n          height: '45px',\n        },\n        alt: 'logo',\n      },\n      css3: true,\n      link: {\n        label: 'IOS 开发',\n        classes: 'bold',\n        href: '#',\n      },\n      subTitle: '华为，深圳',\n    },\n    {\n      img: {\n        src: '/assets/images/logo/codepen.svg',\n        style: {\n          width: '45px',\n          height: '45px',\n        },\n        alt: 'logo',\n      },\n      css3: true,\n      link: {\n        label: '游戏开发',\n        classes: 'bold',\n        href: '#',\n      },\n      subTitle: '腾讯，成都',\n    },\n  ],\n  action: {\n    label: '查看更多',\n    href: '#',\n    style: 'style-v1',\n    icon: 'open_in_new',\n  },\n}"
            },
            {
                "name": "fsModule",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require('fs')"
            },
            {
                "name": "gtag",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/service/ga.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            },
            {
                "name": "httpInterceptorProviders",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/interceptors/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    provide: HTTP_INTERCEPTORS,\n    useClass: BrowserStateInterceptor,\n    multi: true,\n  },\n]"
            },
            {
                "name": "indexTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "fsModule\n  .readFileSync(`${environment.site}/browser/index.html`)\n  .toString()"
            },
            {
                "name": "initPage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/mobx/AppState.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  title: '',\n  body: [],\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "mainModule",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "__non_webpack_require__.main"
            },
            {
                "name": "moduleFilename",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(mainModule && mainModule.filename) || ''"
            },
            {
                "name": "modules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/uiux/uiux.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[WidgetsModule, CombsModule]"
            },
            {
                "name": "modules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/page-render/page-render.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[CommonModule, UiuxModule, PageRoutingModule]"
            },
            {
                "name": "modules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/uiux/combs/combs.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  ActionModule,\n  BannerModule,\n  CarouselModule,\n  DynamicCombsModule,\n  HeroModule,\n  ListModule,\n  MasonryModule,\n  MapModule,\n  OtherModule,\n  ProfileModule,\n  ShowcaseModule,\n  SearchModule,\n  VideoModule,\n  TabModule,\n  NodeModule,\n  CalendarModule,\n]"
            },
            {
                "name": "paginationgConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/uiux/widgets/swiper/swiper.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "SwiperPaginationInterface",
                "defaultValue": "{\n  el: '.swiper-pagination',\n  type: 'bullets',\n  clickable: true,\n  hideOnClick: false,\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "states",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/mobx/mobx.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[UserState, BrandingState]"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "text",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/uiux/combs/node/case/case.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  spacer: 'none',\n  title: {\n    label: '国内 Drupal 优秀网站案例',\n    style: 'style-v1',\n    classes: 'mat-display-0',\n  },\n  body: '<p class=\"text-center\">欢迎分享 Drupal 优秀的数字创新体验</p>',\n}"
            },
            {
                "name": "unauthUser",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/mobx/user/UserState.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  id: '',\n  authenticated: false,\n  csrf_token: '',\n  current_user: {\n    uid: '',\n    name: '',\n    roles: [],\n  },\n  logout_token: '',\n}"
            },
            {
                "name": "win",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "dominoModule.createWindow(indexTemplate)"
            },
            {
                "name": "window",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/service/ga.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            },
            {
                "name": "window",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/uiux/widgets/actions/share/share.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            }
        ],
        "functions": [
            {
                "name": "app",
                "file": "server.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "express.Express"
            },
            {
                "name": "initConfig",
                "file": "src/app/app.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "appState",
                        "type": "AppState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "coreConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "appState",
                        "type": "AppState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "coreConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "run",
                "file": "server.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "void"
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "server.ts": [
                {
                    "name": "__non_webpack_require__",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NodeRequire"
                },
                {
                    "name": "compressionModule",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require('compression')"
                },
                {
                    "name": "distFolder",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "join(process.cwd(), `${environment.site}/browser`)"
                },
                {
                    "name": "dominoModule",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require('domino')"
                },
                {
                    "name": "fsModule",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require('fs')"
                },
                {
                    "name": "indexTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "fsModule\n  .readFileSync(`${environment.site}/browser/index.html`)\n  .toString()"
                },
                {
                    "name": "mainModule",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "__non_webpack_require__.main"
                },
                {
                    "name": "moduleFilename",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(mainModule && mainModule.filename) || ''"
                },
                {
                    "name": "win",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "dominoModule.createWindow(indexTemplate)"
                }
            ],
            "src/app/modules/manage/manage.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/manage/manage.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[ManageMediaComponent, ManageBlockComponent]"
                }
            ],
            "src/app/uiux/widgets/widgets.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/uiux/widgets/widgets.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  BgComponent,\n  ImgComponent,\n  MapComponent,\n  BoxComponent,\n  TextComponent,\n  TextHeroComponent,\n  LinkComponent,\n  BtnComponent,\n  TabComponent,\n  CardComponent,\n  IconComponent,\n  TitleComponent,\n  PanelComponent,\n  InputComponent,\n  SelectComponent,\n  SwiperComponent,\n  SpacerComponent,\n  SpinnerComponent,\n  Card1v1Component,\n  Card1v2Component,\n  Card1v3Component,\n  CheckboxComponent,\n  ContentBoxComponent,\n  ChipListComponent,\n  TextareaComponent,\n  LineYearComponent,\n  ContactUsComponent,\n  BtnAnimateComponent,\n  FeatureBoxComponent,\n  BreadcrumbComponent,\n  TestimonialComponent,\n  DropdownMenuComponent,\n  NumberAnimateComponent,\n  DynamicWidgetsComponent,\n  SidebarComponent,\n  MediaListComponent,\n  MediaMetaComponent,\n  MediaObjectComponent,\n  MenuListComponent,\n  PaginationComponent,\n  PaginationSimpleComponent,\n  ProgressBarComponent,\n  ProgressGroupComponent,\n  SafeHtmlPipe,\n  DataSourcePipe,\n  DialogComponent,\n  FlagComponent,\n  ShareComponent,\n  ShapeComponent,\n  BgImgComponent,\n  TreeComponent,\n  CalendarComponent,\n  DownloadComponent,\n  CardMetaComponent,\n  ViewListComponent,\n  DatepickerComponent,\n  FontChangeComponent,\n  LoopWidgetsComponent,\n  TermsServiceComponent,\n  DynamicTableComponent,\n  SearchActionComponent,\n  SearchSidebarComponent,\n  InlineLightboxComponent,\n  MediaObjectGroupComponent,\n  ContentTextCenterComponent,\n  DynamicFormControlComponent,\n]"
                },
                {
                    "name": "DEFAULT_SWIPER_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/uiux/widgets/widgets.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SwiperConfigInterface",
                    "defaultValue": "{\n  direction: 'horizontal',\n  slidesPerView: 'auto',\n}"
                }
            ],
            "src/app/uiux/combs/action/action.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/uiux/combs/action/action.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[Action1v1Component]"
                }
            ],
            "src/app/uiux/combs/banner/banner.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/uiux/combs/banner/banner.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[BannerSimpleComponent]"
                }
            ],
            "src/app/uiux/combs/calendar/calendar.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/uiux/combs/calendar/calendar.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[FullCalendarComponent]"
                }
            ],
            "src/app/uiux/combs/carousel/carousel.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/uiux/combs/carousel/carousel.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  Carousel1v1Component,\n  Carousel1v2Component,\n  Carousel1v3Component,\n  Carousel2v1Component,\n  Carousel2v2Component,\n]"
                }
            ],
            "src/app/uiux/combs/hero/hero.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/uiux/combs/hero/hero.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  Hero1v1Component,\n  Hero1v2Component,\n  Hero2v1Component,\n  Hero2v2Component,\n  Hero2v3Component,\n]"
                }
            ],
            "src/app/uiux/combs/list/list.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/uiux/combs/list/list.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  ListComponent,\n  TaxonomyListComponent,\n  DynamicMediaListComponent,\n  DynamicCardListComponent,\n  DynamicCardList1v1Component,\n  DynamicTextListComponent,\n  TaxonomyThinListComponent,\n  ListThinComponent,\n  TreeListComponent,\n]"
                }
            ],
            "src/app/uiux/combs/map/map.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/uiux/combs/map/map.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[LocationComponent, MapListV1Component]"
                }
            ],
            "src/app/uiux/combs/masonry/masonry.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/uiux/combs/masonry/masonry.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[ShuffleComponent, PackeryComponent]"
                }
            ],
            "src/app/uiux/combs/other/other.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/uiux/combs/other/other.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  WhychooseusComponent,\n  NotfoundComponent,\n  DynamicFormComponent,\n]"
                }
            ],
            "src/app/uiux/combs/profile/profile.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/uiux/combs/profile/profile.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[Profile1v1Component]"
                }
            ],
            "src/app/uiux/combs/node/node.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/uiux/combs/node/node.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  JobComponent,\n  CaseComponent,\n  ArticleComponent,\n  JobNodeComponent,\n  JobListComponent,\n  CaseNodeComponent,\n  JobFilterComponent,\n  ArticleBannerComponent,\n  ArticleMetaComponent,\n  QuestionComponent,\n  LawCaseComponent,\n  LawFilesComponent,\n  LawTableComponent,\n  CommentFormComponent,\n  CommentListComponent,\n  CommentItemComponent,\n  LawShowcaseComponent,\n  LawCardComponent,\n  LawHeaderComponent,\n  CommentActionsComponent,\n]"
                }
            ],
            "src/app/uiux/combs/tab/tab.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/uiux/combs/tab/tab.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[Tab1v1Component]"
                }
            ],
            "src/app/uiux/combs/video/video.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/uiux/combs/video/video.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[VideoBgComponent]"
                }
            ],
            "src/app/uiux/combs/showcase/showcase.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/uiux/combs/showcase/showcase.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  Showcase1v1Component,\n  Showcase1v3Component,\n  Showcase2v1Component,\n  Showcase2v2Component,\n  Showcase2v3Component,\n  Showcase2v4Component,\n  Showcase2v5Component,\n  Showcase2v6Component,\n  Showcase3v1Component,\n  Showcase3v2Component,\n  Showcase3v3Component,\n  Showcase3v4Component,\n  Showcase3v5Component,\n  Showcase3v6Component,\n  Showcase3v7Component,\n  Showcase3v8Component,\n  Showcase4v1Component,\n]"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/app/core/token/core.config.ts": [
                {
                    "name": "CORE_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/token/core.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<object>('core config')"
                }
            ],
            "src/environments/environment.nnit.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.nnit.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IEnvironment",
                    "defaultValue": "{\n  apiUrl: 'https://api.nnitpai.com',\n  production: true,\n  site: 'nnit',\n  port: 4201,\n  cache: true,\n  ssr: true,\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IEnvironment",
                    "defaultValue": "{\n  apiUrl: 'https://api.zhaobg.com',\n  production: true,\n  site: 'dist',\n  port: 4200,\n  cache: false,\n  ssr: true,\n  drupalProxy: false,\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IEnvironment",
                    "defaultValue": "{\n  apiUrl: 'http://localhost:4200',\n  // apiUrl: 'https://api.zhaobg.com',\n  production: false,\n  site: 'xinshi',\n  port: 4000,\n  cache: false,\n  ssr: false,\n}"
                }
            ],
            "src/environments/environment.sanziqi.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.sanziqi.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IEnvironment",
                    "defaultValue": "{\n  apiUrl: 'https://sanziqi-api.zhaobg.com',\n  production: true,\n  site: 'sanziqi',\n  port: 4207,\n  cache: true,\n  ssr: true,\n}"
                }
            ],
            "src/environments/environment.xinshi.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.xinshi.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IEnvironment",
                    "defaultValue": "{\n  apiUrl: 'https://api.zhaobg.com',\n  production: true,\n  site: 'xinshi',\n  port: 4200,\n  cache: true,\n  ssr: true,\n}"
                }
            ],
            "src/app/uiux/combs/node/job/job.component.ts": [
                {
                    "name": "feature",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/uiux/combs/node/job/job.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  type: 'showcase-3v6',\n  id: '',\n  title: {\n    type: 'text',\n    spacer: 'sm',\n    title: {\n      label: '职位招聘',\n      style: 'style-v1',\n    },\n    body: '<p class=\"text-center\">免费推送相关职位信息，关注公众号随时随地了解职位情况。</p>',\n  },\n  bg: {\n    classes: 'bg-light bg-fill-width',\n  },\n  row: '3',\n  elements: [\n    {\n      img: {\n        src: '/assets/images/logo/codepen.svg',\n        style: {\n          width: '45px',\n          height: '45px',\n        },\n        alt: 'logo',\n      },\n      css3: true,\n      link: {\n        label: '前端开发工程师',\n        classes: 'bold',\n        href: '#',\n      },\n      subTitle: '字节跳动，北京',\n    },\n    {\n      img: {\n        src: '/assets/images/logo/codepen.svg',\n        style: {\n          width: '45px',\n          height: '45px',\n        },\n        alt: 'logo',\n      },\n      css3: true,\n      link: {\n        label: '前端架构师',\n        classes: 'bold',\n        href: '#',\n      },\n      subTitle: '美团，广州',\n    },\n    {\n      img: {\n        src: '/assets/images/logo/codepen.svg',\n        style: {\n          width: '45px',\n          height: '45px',\n        },\n        alt: 'logo',\n      },\n      css3: true,\n      link: {\n        label: '后端开发',\n        classes: 'bold',\n        href: '#',\n      },\n      subTitle: '微软，北京',\n    },\n    {\n      img: {\n        src: '/assets/images/logo/codepen.svg',\n        style: {\n          width: '45px',\n          height: '45px',\n        },\n        alt: 'logo',\n      },\n      css3: true,\n      link: {\n        label: 'UI 设计师',\n        classes: 'bold',\n        href: '#',\n      },\n      subTitle: '腾讯，深圳',\n    },\n    {\n      img: {\n        src: '/assets/images/logo/codepen.svg',\n        style: {\n          width: '45px',\n          height: '45px',\n        },\n        alt: 'logo',\n      },\n      css3: true,\n      link: {\n        label: 'IOS 开发',\n        classes: 'bold',\n        href: '#',\n      },\n      subTitle: '华为，深圳',\n    },\n    {\n      img: {\n        src: '/assets/images/logo/codepen.svg',\n        style: {\n          width: '45px',\n          height: '45px',\n        },\n        alt: 'logo',\n      },\n      css3: true,\n      link: {\n        label: '游戏开发',\n        classes: 'bold',\n        href: '#',\n      },\n      subTitle: '腾讯，成都',\n    },\n  ],\n  action: {\n    label: '查看更多',\n    href: '#',\n    style: 'style-v1',\n    icon: 'open_in_new',\n  },\n}"
                }
            ],
            "src/app/core/service/ga.service.ts": [
                {
                    "name": "gtag",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/service/ga.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                },
                {
                    "name": "window",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/service/ga.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                }
            ],
            "src/app/core/interceptors/index.ts": [
                {
                    "name": "httpInterceptorProviders",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/interceptors/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    provide: HTTP_INTERCEPTORS,\n    useClass: BrowserStateInterceptor,\n    multi: true,\n  },\n]"
                }
            ],
            "src/app/core/mobx/AppState.ts": [
                {
                    "name": "initPage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/mobx/AppState.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  title: '',\n  body: [],\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "src/app/uiux/uiux.module.ts": [
                {
                    "name": "modules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/uiux/uiux.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[WidgetsModule, CombsModule]"
                }
            ],
            "src/app/modules/page-render/page-render.module.ts": [
                {
                    "name": "modules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/page-render/page-render.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[CommonModule, UiuxModule, PageRoutingModule]"
                }
            ],
            "src/app/uiux/combs/combs.module.ts": [
                {
                    "name": "modules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/uiux/combs/combs.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  ActionModule,\n  BannerModule,\n  CarouselModule,\n  DynamicCombsModule,\n  HeroModule,\n  ListModule,\n  MasonryModule,\n  MapModule,\n  OtherModule,\n  ProfileModule,\n  ShowcaseModule,\n  SearchModule,\n  VideoModule,\n  TabModule,\n  NodeModule,\n  CalendarModule,\n]"
                }
            ],
            "src/app/uiux/widgets/swiper/swiper.component.ts": [
                {
                    "name": "paginationgConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/uiux/widgets/swiper/swiper.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SwiperPaginationInterface",
                    "defaultValue": "{\n  el: '.swiper-pagination',\n  type: 'bullets',\n  clickable: true,\n  hideOnClick: false,\n}"
                }
            ],
            "src/app/core/mobx/mobx.module.ts": [
                {
                    "name": "states",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/mobx/mobx.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[UserState, BrandingState]"
                }
            ],
            "src/app/uiux/combs/node/case/case.component.ts": [
                {
                    "name": "text",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/uiux/combs/node/case/case.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  spacer: 'none',\n  title: {\n    label: '国内 Drupal 优秀网站案例',\n    style: 'style-v1',\n    classes: 'mat-display-0',\n  },\n  body: '<p class=\"text-center\">欢迎分享 Drupal 优秀的数字创新体验</p>',\n}"
                }
            ],
            "src/app/core/mobx/user/UserState.ts": [
                {
                    "name": "unauthUser",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/mobx/user/UserState.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  id: '',\n  authenticated: false,\n  csrf_token: '',\n  current_user: {\n    uid: '',\n    name: '',\n    roles: [],\n  },\n  logout_token: '',\n}"
                }
            ],
            "src/app/uiux/widgets/actions/share/share.component.ts": [
                {
                    "name": "window",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/uiux/widgets/actions/share/share.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                }
            ]
        },
        "groupedFunctions": {
            "server.ts": [
                {
                    "name": "app",
                    "file": "server.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "express.Express"
                },
                {
                    "name": "run",
                    "file": "server.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "void"
                }
            ],
            "src/app/app.module.ts": [
                {
                    "name": "initConfig",
                    "file": "src/app/app.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "appState",
                            "type": "AppState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "coreConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "appState",
                            "type": "AppState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "coreConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "app",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "run",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "__non_webpack_require__",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "compressionModule",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "distFolder",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dominoModule",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fsModule",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "indexTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mainModule",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "moduleFilename",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "win",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "initConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/branding/footer/fix-bar/fix-bar-popup/fix-bar-popup.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FixBarPopupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/branding/footer/fix-bar/fix-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FixBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/branding/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/core/branding/footer/inverse/inverse.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InverseComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/branding/footer/light/light.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LightComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/branding/footer/menu-item/menu-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/branding/footer/popup/popup.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PopupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/branding/footer/space-between/space-between.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpaceBetweenComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/branding/header/header-banner/header-banner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderBannerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/branding/header/header-top/header-top.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderTopComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/branding/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/core/branding/header/menu/item-menu/item-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItemMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/core/branding/header/menu/item-menu/mega-menu/mega-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MegaMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/branding/header/menu/item-menu/sub-menu/sub-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SubMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/branding/header/menu/menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/core/branding/header/menu/search-box/search-box.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchBoxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/core/branding/header/menu/switch-theme/switch-theme.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SwitchThemeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/branding/header/menu/user-menu/user-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/manage.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "ManageGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/browserState-interceptor.service.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "BrowserStateInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "httpInterceptorProviders",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/loader-interceptor.service.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "HttpRequestInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/serverState-interceptor.service.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "ServerStateInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/IAmap.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAmap",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/IAmap.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMark",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/IDialog.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDialog",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/IEnvironment.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IEnvironment",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/IForm.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAction",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/IForm.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IActionParams",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/node/IArticle.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IArticleAccess",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/node/INode.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IBaseNode",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/node/INode.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICase",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/node/INode.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICasePrams",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/node/INode.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICommentConfig",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/node/INode.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICommentContent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/node/INode.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICommentParams",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/node/INode.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IQuestion",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/widgets/IActions.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Button",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/widgets/IActions.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISearchAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/widgets/IActions.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IShare",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/widgets/IBg.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IBg",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/widgets/IBgImg.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IBgImg",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/widgets/IBox.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IBox",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/widgets/IBreadcrumb.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IBreadcrumb",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/widgets/IBtnAnimate.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IBtnAnimate",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/widgets/IChipList.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IChipList",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/widgets/IControl.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IControl",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/widgets/IDownload.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDownload",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/widgets/IDownload.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDownloadItem",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/widgets/IDropdownMenu.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDropdownMenu",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/widgets/IFeatureBox.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFeatureBox",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/widgets/IFlag.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FlaggedEntity",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/widgets/IFlag.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFlag",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/widgets/IFlag.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Params",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/widgets/IFlag.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Relationships",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/widgets/IIcon.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IIcon",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/widgets/IImg.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IImg",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/widgets/ILineYear.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILineYear",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/widgets/ILink.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILink",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/widgets/IMediaList.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IElement",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/widgets/IMediaList.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMediaList",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/widgets/IMediaMeta.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMediaMeta",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/widgets/IMediaObject.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMediaObject",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/widgets/IMenuList.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMenuList",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/widgets/INumberAnimate.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "INumberAnimate",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/widgets/IPaginationSimple.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPaginationSimple",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/widgets/IText.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IText",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/widgets/ITitle.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITitle",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interface/widgets/ITree.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITree",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/AppState.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/AppState.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initPage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/BrandingState.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BrandingState",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/CalendarState.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CalendarState",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/ContentState.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ContentState",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/FormState.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FormState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/IAppConfig.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Action",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/IAppConfig.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Action2",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/IAppConfig.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Button",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/IAppConfig.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Comment",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/IAppConfig.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Commerce",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/IAppConfig.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Download",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/IAppConfig.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Flag",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/IAppConfig.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FontSize",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/IAppConfig.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ForceDialog",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/IAppConfig.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Form",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/IAppConfig.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Github",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/IAppConfig.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GoogleAnalytics",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/IAppConfig.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Guard",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/IAppConfig.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IActions",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/IAppConfig.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IApiUrl",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/IAppConfig.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAppConfig",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/IAppConfig.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IArticle",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/IAppConfig.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICommerce",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/IAppConfig.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Icon",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/IAppConfig.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Icon2",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/IAppConfig.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICoreConfig",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/IAppConfig.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDialog",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/IAppConfig.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IEditor",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/IAppConfig.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILogin",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/IAppConfig.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPage",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/IAppConfig.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITheme",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/IAppConfig.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Modules",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/IAppConfig.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Params",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/IAppConfig.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PhoneLogin",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/IAppConfig.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PswLogin",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/IAppConfig.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Share",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/IAppConfig.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Text",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/IAppConfig.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Title",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/IAppConfig.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/amap/AMapState.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AMapState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/mobx.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "states",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/screen/ScreenState.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ScreenState",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/user/IUser.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CurrentUser",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/user/IUser.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IUser",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/user/IUser.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TokenUser",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/user/UserState.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserState",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mobx/user/UserState.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "unauthUser",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/pipe/dataSource.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "DataSourcePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/pipe/safe-html.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "SafeHtmlPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/service/amap.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AmapService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/service/api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ApiService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/service/bt.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BtService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/service/config.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ConfigService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/service/crypto-js.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CryptoJSService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/service/dialog.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DialogService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/service/feiyan.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FeiyanService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/service/form.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FormService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/service/ga.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GoogleAnalyticsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/service/ga.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "gtag",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/service/ga.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "window",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/service/icon.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "IconService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/service/loading.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoadingService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/service/manage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ManageService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/core/service/navigation.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NavigationService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/service/node.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NodeService",
                "coveragePercent": 0,
                "coverageCount": "0/34",
                "status": "low"
            },
            {
                "filePath": "src/app/core/service/paginator.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MatPaginatorIntlCro",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/service/qidian.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "QiDianService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/service/route.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RouteService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/service/screen.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ScreenService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/core/service/tags.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TagsService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/service/user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserService",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/core/service/utilities.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UtilitiesService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/token/core.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CORE_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/manage/manage-block/manage-block.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ManageBlockComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/manage/manage-media/manage-media.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ManageMediaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/manage/manage.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/page-render/block/block.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BlockComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/page-render/page-render.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "modules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sample/sample-widgets/sample-widgets.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SampleWidgetsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/user/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/user/user-favorite/user-favorite.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserFavoriteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/user/user-home/user-home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserHomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/user/user-pay/user-pay.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserPayComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/user/user.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/base/base.widget.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BaseComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/base/node.widget.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NodeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/ICombs.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IShowcase2v1",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/action/action.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/action/action1v1/action1v1.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Action1v1Component",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/banner/banner-simple/banner-simple.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BannerSimpleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/banner/banner.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/calendar/calendar.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/calendar/full-calendar/full-calendar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FullCalendarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/carousel/carousel.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/carousel/carousel1v1/carousel1v1.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Carousel1v1Component",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/carousel/carousel1v2/carousel1v2.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Carousel1v2Component",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/carousel/carousel1v3/carousel1v3.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Carousel1v3Component",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/carousel/carousel2v1/carousel2v1.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Carousel2v1Component",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/carousel/carousel2v2/carousel2v2.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Carousel2v2Component",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/combs.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "modules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/dynamic-combs/dynamic-combs/dynamic-combs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynamicCombsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/hero/hero.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/hero/hero1v1/hero1v1.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Hero1v1Component",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/hero/hero1v2/hero1v2.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Hero1v2Component",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/hero/hero2v1/hero2v1.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Hero2v1Component",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/hero/hero2v2/hero2v2.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Hero2v2Component",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/hero/hero2v3/hero2v3.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Hero2v3Component",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/list/dynamic-card-list/dynamic-card-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynamicCardListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/31",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/list/dynamic-card-list1v1/dynamic-card-list1v1.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynamicCardList1v1Component",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/list/dynamic-media-list/dynamic-media-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynamicMediaListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/list/dynamic-text-list/dynamic-text-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynamicTextListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/list/list.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/list/list/list-thin/list-thin.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListThinComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/list/list/list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/list/taxonomy-list/taxonomy-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaxonomyListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/list/taxonomy-thin-list/taxonomy-thin-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaxonomyThinListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/list/tree-list/tree-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TreeListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/33",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/map/location/location.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LocationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/map/map-list-v1/map-list-v1.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MapListV1Component",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/map/map.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/masonry/masonry.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/masonry/packery/packery.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PackeryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/masonry/shuffle/shuffle.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShuffleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/node/article/article-banner/article-banner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ArticleBannerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/node/article/article-meta/article-meta.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ArticleMetaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/node/article/article.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ArticleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/33",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/node/case/case-node/case-node.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CaseNodeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/node/case/case.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CaseComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/node/case/case.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "text",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/node/comment/comment-actions/comment-actions.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CommentActionsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/node/comment/comment-form/comment-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CommentFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/node/comment/comment-list/comment-item/comment-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CommentItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/node/comment/comment-list/comment-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CommentListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/node/job/IJob.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IChipList",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/node/job/IJob.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IJob",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/node/job/job-filter/job-filter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "JobFilterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/node/job/job-list/job-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "JobListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/node/job/job-node/job-node.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "JobNodeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/node/job/job.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "JobComponent",
                "coveragePercent": 0,
                "coverageCount": "0/30",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/node/job/job.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "feature",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/node/law/law-card/law-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LawCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/node/law/law-case/law-case.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LawCaseComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/node/law/law-files/law-files.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LawFilesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/node/law/law-header/law-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LawHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/node/law/law-showcase/law-showcase.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LawShowcaseComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/node/law/law-table/law-table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LawTableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/node/node.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/node/question/question.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QuestionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/other/dynamic-form/dynamic-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynamicFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/other/notfound/notfound.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotfoundComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/other/other.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/other/whychooseus/whychooseus.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WhychooseusComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/profile/profile.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/profile/profile1v1/profile1v1.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Profile1v1Component",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/search/search-header/search-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/search/search-list/search-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/search/search-status/search-status.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchStatusComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/search/search-top/search-top.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchTopComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/search/search.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/31",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/showcase/showcase.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/showcase/showcase1v1/showcase1v1.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Showcase1v1Component",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/showcase/showcase1v3/showcase1v3.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Showcase1v3Component",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/showcase/showcase2v1/showcase2v1.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Showcase2v1Component",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/showcase/showcase2v2/showcase2v2.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Showcase2v2Component",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/showcase/showcase2v3/showcase2v3.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Showcase2v3Component",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/showcase/showcase2v4/showcase2v4.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Showcase2v4Component",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/showcase/showcase2v5/showcase2v5.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Showcase2v5Component",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/showcase/showcase2v6/showcase2v6.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Showcase2v6Component",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/showcase/showcase3v1/showcase3v1.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Showcase3v1Component",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/showcase/showcase3v2/showcase3v2.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Showcase3v2Component",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/showcase/showcase3v3/showcase3v3.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Showcase3v3Component",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/showcase/showcase3v4/showcase3v4.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Showcase3v4Component",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/showcase/showcase3v5/showcase3v5.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Showcase3v5Component",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/showcase/showcase3v6/showcase3v6.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Showcase3v6Component",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/showcase/showcase3v7/showcase3v7.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Showcase3v7Component",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/showcase/showcase3v8/showcase3v8.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Showcase3v8Component",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/showcase/showcase4v1/showcase4v1.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Showcase4v1Component",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/tab/tab.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/tab/tab1v1/tab1v1.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Tab1v1Component",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/video/video-bg/video-bg.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VideoBgComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/combs/video/video.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/uiux.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "modules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/IWidgets.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICard",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/IWidgets.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDynamicTable",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/IWidgets.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IInlineLightbox",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/IWidgets.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILightboxElement",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/IWidgets.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMeta",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/actions/download/download.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DownloadComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/actions/flag/flag.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FlagComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/actions/search-action/search-action.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchActionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/actions/share/share.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShareComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/actions/share/share.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "window",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/bg-img/bg-img.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BgImgComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/bg/bg.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BgComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/box/box.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/breadcrumb/breadcrumb.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BreadcrumbComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/btn-animate/btn-animate.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BtnAnimateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/btn/btn.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BtnComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/card/card-meta/card-meta.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardMetaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/card/card1v1/card1v1.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Card1v1Component",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/card/card1v2/card1v2.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Card1v2Component",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/card/card1v3/card1v3.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Card1v3Component",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/chip-list/chip-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChipListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/contact-us/contact-us.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContactUsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/content-box/content-box.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContentBoxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/content-text-center/content-text-center.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContentTextCenterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/date/calendar/calendar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CalendarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/dialog/dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/dropdown-menu/dropdown-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DropdownMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/dynamic-form-control/dynamic-form-control.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynamicFormControlComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/dynamic-table/dynamic-table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynamicTableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/dynamic-widgets/dynamic-widgets.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynamicWidgetsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/feature-box/feature-box.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FeatureBoxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/font-change/font-change.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FontChangeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/form/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/form/datepicker/datepicker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DatepickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/form/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/form/select/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectComponent",
                "coveragePercent": 23,
                "coverageCount": "3/13",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/form/terms-service/terms-service.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TermsServiceComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/form/textarea/textarea.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextareaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/icon/icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/img/img.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ImgComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/lightbox/inline-lightbox/inline-lightbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InlineLightboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/line-year/line-year.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LineYearComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/link/link.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LinkComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/loop-widgets/loop-widgets.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoopWidgetsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/map/map.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MapComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/media/media-list/media-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MediaListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/media/media-meta/media-meta.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MediaMetaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/media/media-object-group/media-object-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MediaObjectGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/media/media-object/media-object.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MediaObjectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/menu-list/menu-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/number-animate/number-animate.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NumberAnimateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/pagination/pagination-simple/pagination-simple.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaginationSimpleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/pagination/pagination.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaginationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/panel/panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/progress-bar/progress-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProgressBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/progress-group/progress-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProgressGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/shape/shape.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShapeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/sidebar/search-sidebar/search-sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchSidebarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/sidebar/search-sidebar/search-sidebar.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILabel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/sidebar/sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidebarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/spacer/spacer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpacerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/spinner/spinner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpinnerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/swiper/swiper.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SwiperComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/swiper/swiper.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "paginationgConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/tab/tab.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/testimonial/testimonial.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TestimonialComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/text-hero/text-hero.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextHeroComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/text/text.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/title/title.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TitleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/tree/tree.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TreeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/view-list/view-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ViewListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/widgets.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/uiux/widgets/widgets.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_SWIPER_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.nnit.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.sanziqi.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.xinshi.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}